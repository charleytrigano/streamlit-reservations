
            

# ============================ PART 5/5 ‚Äî SMS, PARAMETRES, MAIN ==============================

def vue_sms(df: pd.DataFrame, palette: dict):
    """Page SMS ‚Äî messages pr√©format√©s avant arriv√©e et apr√®s d√©part (copier/coller)."""
    from urllib.parse import quote

    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"‚úâÔ∏è SMS ‚Äî {apt_name}")
    print_buttons()

    if df is None or df.empty:
        st.info("Aucune r√©servation disponible.")
        return

    dfv = df.copy()
    dfv["date_arrivee"] = _to_date(dfv["date_arrivee"])
    dfv["date_depart"] = _to_date(dfv["date_depart"])

    # ----------- Pr√©-arriv√©e (arriv√©es J+1) -----------
    st.subheader("üõ¨ Pr√©-arriv√©e (arriv√©es J+1)")
    target_arrivee = st.date_input("Arriv√©es du", date.today() + timedelta(days=1), key="pre_date")
    pre = dfv.dropna(subset=["telephone", "nom_client", "date_arrivee"]).copy()
    pre = pre[(pre["date_arrivee"] == target_arrivee) & (~_to_bool_series(pre["sms_envoye"]))]

    if pre.empty:
        st.info("Aucun client √† contacter pour la date s√©lectionn√©e.")
    else:
        pre = pre.sort_values("date_arrivee")
        pre_idx = pre.reset_index()  # conserve l'index original de df dans la colonne 'index'
        options = [f"{i}: {r['nom_client']} ({r['telephone']})" for i, r in pre_idx.iterrows()]
        pick = st.selectbox("Client (pr√©-arriv√©e)", options=options, index=None)
        if pick:
            sel_idx = int(pick.split(":")[0])
            r = pre_idx.loc[sel_idx]
            link_form = FORM_SHORT_URL
            nuitees = int(pd.to_numeric(r.get("nuitees"), errors="coerce") or 0)
            arr_txt = r["date_arrivee"].strftime("%d/%m/%Y") if pd.notna(r["date_arrivee"]) else ""
            dep_txt = r["date_depart"].strftime("%d/%m/%Y") if pd.notna(r["date_depart"]) else ""

            apt_name.upper()}
Plateforme : {r.get('plateforme','N/A')}
Arriv√©e : {arr_txt}  D√©part : {dep_txt}  Nuit√©es : {nuitees}

Bonjour {r.get('nom_client','')}

Bienvenue chez nous !

Nous sommes ravis de vous accueillir bient√¥t √† Nice. Afin d'organiser au mieux votre r√©ception,
merci de remplir la fiche suivante :
{link_form}

Un parking est √† votre disposition sur place.

Le check-in se fait √† partir de 14:00 et le check-out avant 11:00.
Nous serons sur place lors de votre arriv√©e pour vous remettre les cl√©s.

Vous trouverez des consignes √† bagages dans chaque quartier de Nice.

Nous vous souhaitons un excellent voyage et avons h√¢te de vous rencontrer.

Annick & Charley

******

Welcome to our establishment!

We are delighted to welcome you soon to Nice.
To organize your reception as efficiently as possible, please fill this form:
{link_form}

Parking is available on site.

Check-in from 2:00 p.m. ‚Äî check-out before 11:00 a.m.
We will be there to give you the keys at arrival.

You will find luggage storage in every district of Nice.

We wish you a pleasant journey and look forward to meeting you very soon.

Annick & Charley
"""
{

            st.text_area("üìã Copier le message", value=msg, height=360)
            # Liens rapides
            e164 = _format_phone_e164(r.get("telephone", ""))
            only_digits = "".join(ch for ch in e164 if ch.isdigit())
            enc = quote(msg)
            c1, c2, c3 = st.columns(3)
            c1.link_button("üì≤ iPhone SMS", f"sms:&body={enc}")
            c2.link_button("ü§ñ Android SMS", f"sms:{e164}?body={enc}")
            c3.link_button("üü¢ WhatsApp", f"https://wa.me/{only_digits}?text={enc}")

            if st.button("‚úÖ Marquer 'SMS envoy√©' pour ce client"):
                try:
                    df.loc[r["index"], "sms_envoye"] = True  # r["index"] = index original de df
                    if sauvegarder_donnees(df):
                        st.success("Marqu√© ‚úÖ")
                        st.rerun()
                except Exception as e:
                    st.error(f"Impossible de marquer : {e}")

    st.markdown("---")

    # ----------- Post-d√©part (d√©parts du jour) -----------
    st.subheader("üì§ Post-d√©part (d√©parts du jour)")
    target_depart = st.date_input("D√©parts du", date.today(), key="post_date")
    post = dfv.dropna(subset=["telephone", "nom_client", "date_depart"]).copy()
    post = post[(post["date_depart"] == target_depart) & (~_to_bool_series(post["post_depart_envoye"]))]

    if post.empty:
        st.info("Aucun message post-d√©part √† envoyer aujourd‚Äôhui.")
    else:
        post = post.sort_values("date_depart")
        post_idx = post.reset_index()
        options2 = [f"{i}: {r['nom_client']} ‚Äî d√©part {r['date_depart']}" for i, r in post_idx.iterrows()]
        pick2 = st.selectbox("Client (post-d√©part)", options=options2, index=None)
        if pick2:
            sel_idx2 = int(pick2.split(":")[0])
            r2 = post_idx.loc[sel_idx2]
            name = str(r2.get("nom_client") or "").strip()

            msg2 = f"""\
Bonjour {name},

Un grand merci d'avoir choisi notre appartement pour votre s√©jour.
Nous esp√©rons que vous avez pass√© un moment agr√©able.
Si vous souhaitez revenir explorer encore un peu la ville, notre porte vous sera toujours grande ouverte.

Au plaisir de vous accueillir √† nouveau.

Annick & Charley

******

Hello {name},

Thank you very much for choosing our apartment for your stay.
We hope you had a great time ‚Äî our door is always open if you want to come back.

Annick & Charley
"""

            st.text_area("üìã Copier le message", value=msg2, height=280)
            e164b = _format_phone_e164(r2.get("telephone", ""))
            only_digits_b = "".join(ch for ch in e164b if ch.isdigit())
            enc2 = quote(msg2)
            c1, c2, c3 = st.columns(3)
            c1.link_button("üü¢ WhatsApp", f"https://wa.me/{only_digits_b}?text={enc2}")
            c2.link_button("üì≤ iPhone SMS", f"sms:&body={enc2}")
            c3.link_button("ü§ñ Android SMS", f"sms:{e164b}?body={enc2}")

            if st.button("‚úÖ Marquer 'post-d√©part envoy√©' pour ce client"):
                try:
                    df.loc[r2["index"], "post_depart_envoye"] = True
                    if sauvegarder_donnees(df):
                        st.success("Marqu√© ‚úÖ")
                        st.rerun()
                except Exception as e:
                    st.error(f"Impossible de marquer : {e}")


# ============================== PARAMETRES ==============================

def vue_settings(df: pd.DataFrame, palette: dict):
    """Sauvegarde / restauration des donn√©es + maintenance apartments.csv + cache."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header("## ‚öôÔ∏è Param√®tres")
    st.subheader(apt_name)
    print_buttons()
    st.caption("Sauvegarde, restauration, cache et outil secours pour apartments.csv.")

    # Sauvegarde (exports)
    st.markdown("### üíæ Sauvegarde (exports)")
    try:
        out = ensure_schema(df).copy()
        out["pays"] = out["telephone"].apply(_phone_country)
        for col in ["date_arrivee", "date_depart"]:
            out[col] = pd.to_datetime(out[col], errors="coerce").dt.strftime("%d/%m/%Y")
        csv_bytes = out.to_csv(sep=";", index=False).encode("utf-8")
    except Exception:
        csv_bytes = b""

    c1, c2 = st.columns(2)
    c1.download_button(
        "‚¨áÔ∏è Exporter r√©servations (CSV)",
        data=csv_bytes,
        file_name=os.path.basename(st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)),
        mime="text/csv",
        key="dl_res_csv",
    )

    try:
        out_xlsx = ensure_schema(df).copy()
        out_xlsx["pays"] = out_xlsx["telephone"].apply(_phone_country)
        for col in ["date_arrivee", "date_depart"]:
            out_xlsx[col] = pd.to_datetime(out_xlsx[col], errors="coerce").dt.strftime("%d/%m/%Y")
        xlsx_bytes, _ = _df_to_xlsx_bytes(out_xlsx, sheet_name="Reservations")
    except Exception:
        xlsx_bytes = None

    c2.download_button(
        "‚¨áÔ∏è Exporter r√©servations (XLSX)",
        data=xlsx_bytes or b"",
        file_name=(os.path.splitext(os.path.basename(st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)))[0] + ".xlsx"),
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        disabled=(xlsx_bytes is None),
        key="dl_res_xlsx",
    )

    # Restauration (CSV/XLSX)
    st.markdown("### ‚ôªÔ∏è Restauration (remplacer les donn√©es)")
    up = st.file_uploader("Restaurer (CSV ou XLSX)", type=["csv", "xlsx"], key="restore_uploader_settings")
    if up is not None:
        try:
            if up.name.lower().endswith(".xlsx"):
                xls = pd.ExcelFile(up)
                sheet = st.selectbox("Feuille Excel", xls.sheet_names, index=0, key="restore_sheet_settings")
                tmp = pd.read_excel(xls, sheet_name=sheet, dtype=str)
            else:
                raw = up.read()
                tmp = _detect_delimiter_and_read(raw)

            prev = ensure_schema(tmp)
            st.success(f"Aper√ßu charg√© ({up.name})")
            with st.expander("Aper√ßu (10 premi√®res lignes)", expanded=False):
                st.dataframe(prev.head(10), use_container_width=True)

            if st.button("‚úÖ Confirmer la restauration", key="confirm_restore_settings"):
                try:
                    save = prev.copy()
                    for col in ["date_arrivee", "date_depart"]:
                        save[col] = pd.to_datetime(save[col], errors="coerce").dt.strftime("%d/%m/%Y")
                    target_csv = st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)
                    save.to_csv(target_csv, sep=";", index=False, encoding="utf-8", lineterminator="\n")
                    st.cache_data.clear()
                    st.success("Fichier restaur√© ‚Äî rechargement‚Ä¶")
                    st.rerun()
                except Exception as e:
                    st.error(f"Erreur √©criture : {e}")
        except Exception as e:
            st.error(f"Erreur restauration : {e}")

    # Vider le cache
    st.markdown("### üßπ Vider le cache")
    if st.button("Vider le cache & recharger", key="clear_cache_btn_settings"):
        try:
            st.cache_data.clear()
        except Exception:
            pass
        st.rerun()

    # Outil secours apartments.csv
    st.markdown("### üß∞ √âcraser apartments.csv (outil secours)")
    default_csv = "slug,name\nvilla-tobias,Villa Tobias\nle-turenne,Le Turenne\n"
    txt = st.text_area(
        "Contenu apartments.csv",
        value=default_csv,
        height=140,
        key="force_apts_txt_settings",
    )
    if st.button("üß∞ √âcraser apartments.csv", key="force_apts_btn_settings"):
        try:
            with open(APARTMENTS_CSV, "w", encoding="utf-8", newline="") as f:
                f.write(txt.strip() + "\n")
            st.cache_data.clear()
            st.success("apartments.csv √©cras√© ‚úÖ ‚Äî rechargement‚Ä¶")
            st.rerun()
        except Exception as e:
            st.error(f"Impossible d'√©crire apartments.csv : {e}")


# ------------------------------- MAIN ---------------------------------

def main():
    # Reset cache via URL ?clear=1
    params = st.query_params
    if params.get("clear", ["0"])[0] in ("1", "true", "True", "yes"):
        try:
            st.cache_data.clear()
        except Exception:
            pass

    # S√©lecteur d'appartement (met √† jour CSV_RESERVATIONS / CSV_PLATEFORMES)
    changed = _select_apartment_sidebar()
    if changed:
        try:
            st.cache_data.clear()
        except Exception:
            pass

    # Th√®me (applique le CSS d√©fini plus haut)
    try:
        mode_clair = st.sidebar.toggle("üåì Mode clair (PC)", value=False)
    except Exception:
        mode_clair = st.sidebar.checkbox("üåì Mode clair (PC)", value=False)
    apply_style(light=bool(mode_clair))

    # En-t√™te
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.title(f"‚ú® {apt_name} ‚Äî Gestion des R√©servations")

    # Chargement des donn√©es sp√©cifiques √† l'appartement
    df, palette_loaded = _load_data_for_active_apartment()
    palette = palette_loaded if palette_loaded else DEFAULT_PALETTE

    # Pages
    pages = {
        "üè† Accueil": vue_accueil,
        "üìã R√©servations": vue_reservations,
        "‚ûï Ajouter": vue_ajouter,
        "‚úèÔ∏è Modifier / Supprimer": vue_modifier,
        "üé® Plateformes": vue_plateformes,
        "üìÖ Calendrier": vue_calendrier,
        "üìä Rapport": vue_rapport,
        "‚úâÔ∏è SMS": vue_sms,
        "üìÜ Export ICS": vue_export_ics,
        "üìù Google Sheet": vue_google_sheet,
        "üë• Clients": vue_clients,
        "üÜî ID": vue_id,
        "üåç Indicateurs pays": vue_indicatifs,  # si tu as gard√© la page indicatifs
        "‚öôÔ∏è Param√®tres": vue_settings,
    }

    # Si la page "Indicateurs pays" n'existe pas (pas d√©finie), on la retire
    if "üåç Indicateurs pays" in pages and "vue_indicatifs" not in globals():
        pages.pop("üåç Indicateurs pays", None)

    choice = st.sidebar.radio("Aller √†", list(pages.keys()), key="nav_radio")
    page_func = pages.get(choice)
    if page_func:
        page_func(df, palette)
    else:
        st.error("Page inconnue.")


if __name__ == "__main__":
    main()
