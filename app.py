# app.py (Version de diagnostic pour trouver le point de blocage)
import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(layout="wide")
st.title("üïµÔ∏è‚Äç‚ôÇÔ∏è Diagnostic du Chargement des Donn√©es")

CSV_FILE = "reservations.xlsx - Sheet1.csv"

try:
    st.write("---")
    st.write("‚úÖ **√âtape 1 :** D√©marrage du script.")
    
    # √âtape 2 : Lecture du fichier CSV
    df = pd.read_csv(CSV_FILE, delimiter=';')
    st.write(f"‚úÖ **√âtape 2 :** Fichier CSV lu avec succ√®s. {len(df)} lignes trouv√©es.")
    
    # √âtape 3 : Nettoyage des noms de colonnes (espaces)
    df.columns = df.columns.str.strip()
    st.write("‚úÖ **√âtape 3 :** Les espaces dans les noms de colonnes ont √©t√© nettoy√©s.")
    
    # √âtape 4 : Renommage des colonnes
    rename_map = { 
        'Pay√©': 'paye', 'Client': 'nom_client', 'Plateforme': 'plateforme', 
        'Arriv√©e': 'date_arrivee', 'D√©part': 'date_depart', 'Nuits': 'nuitees',
        'Brut (‚Ç¨)': 'prix_brut', 'Charges (‚Ç¨)': 'charges', 'Net (‚Ç¨)': 'prix_net',
        'Charges (%)': '%'
    }
    df.rename(columns=rename_map, inplace=True)
    st.write("‚úÖ **√âtape 4 :** Les colonnes ont √©t√© renomm√©es pour √™tre utilis√©es par le code.")
    
    # √âtape 5 : Nettoyage et conversion des nombres
    numeric_cols = ['prix_brut', 'commissions', 'frais_cb', 'menage', 'taxes_sejour']
    for col in numeric_cols:
        if col in df.columns:
            if df[col].dtype == 'object':
                df[col] = df[col].astype(str).str.replace('‚Ç¨', '', regex=False).str.replace(',', '.', regex=False).str.replace(' ', '', regex=False).str.strip()
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
    st.write("‚úÖ **√âtape 5 :** Les colonnes de chiffres (prix, commissions, etc.) ont √©t√© nettoy√©es et converties.")
    
    st.markdown("---")
    st.success("üéâ Le diagnostic est termin√© avec succ√®s ! Toutes les √©tapes ont fonctionn√©.")
    st.subheader("Aper√ßu final des donn√©es nettoy√©es :")
    st.dataframe(df.head())

except FileNotFoundError:
    st.error(f"‚ùå ERREUR √† l'√©tape 2 : Le fichier '{CSV_FILE}' est introuvable.")
except Exception as e:
    st.error(f"‚ùå ERREUR INATTENDUE : Le script a plant√©.")
    st.exception(e)
