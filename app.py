# ============================
# Villa Tobias - R√©servations
# Version STABLE + calendrier coloris√© + palette plateformes persistante
# ============================

import streamlit as st
import pandas as pd
import numpy as np
import calendar
from datetime import date, timedelta, datetime, timezone
from io import BytesIO
import hashlib
import os, json
from urllib.parse import quote

FICHIER = "reservations.xlsx"
PALETTE_FILE = "plateformes.json"
DEFAULT_PALETTE = {"Booking": "#1e90ff", "Airbnb": "#ff385c", "Autre": "#f59e0b"}

# ==============================  MAINTENANCE / CACHE  ==============================

def render_cache_section_sidebar():
    st.sidebar.markdown("---")
    st.sidebar.markdown("## üß∞ Maintenance")
    if st.sidebar.button("‚ôªÔ∏è Vider le cache et relancer"):
        try:
            st.cache_data.clear()
        except Exception:
            pass
        try:
            st.cache_resource.clear()
        except Exception:
            pass
        st.sidebar.success("Cache vid√©. Red√©marrage‚Ä¶")
        st.rerun()

# ==============================  OUTILS  ==============================

def to_date_only(x):
    if pd.isna(x) or x is None:
        return None
    try:
        return pd.to_datetime(x).date()
    except Exception:
        return None

def format_date_str(d):
    return d.strftime("%Y/%m/%d") if isinstance(d, date) else ""

def normalize_tel(x):
    """Force la lecture du t√©l√©phone en TEXTE, retire .0 √©ventuel, espaces, et garde le +."""
    if x is None or (isinstance(x, float) and np.isnan(x)):
        return ""
    s = str(x).strip()
    s = s.replace(" ", "")
    if s.endswith(".0"):
        s = s[:-2]
    return s

# ==============================  PALETTE PLATEFORMES (persistante)  ==============================

def load_palette() -> dict:
    try:
        if os.path.exists(PALETTE_FILE):
            with open(PALETTE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                if isinstance(data, dict) and data:
                    return data
    except Exception:
        pass
    return DEFAULT_PALETTE.copy()

def save_palette(palette: dict):
    try:
        with open(PALETTE_FILE, "w", encoding="utf-8") as f:
            json.dump(palette, f, ensure_ascii=False, indent=2)
    except Exception as e:
        st.sidebar.error(f"Erreur sauvegarde palette: {e}")

def platform_color(palette: dict, pf: str) -> str:
    if not pf:
        return "#cccccc"
    return palette.get(pf, "#cccccc")

def platform_badge(pf: str, color: str) -> str:
    return f"""<span style="display:inline-block;padding:2px 8px;margin:2px;border-radius:12px;
               background:{color};color:white;font-size:0.85rem">{pf}</span>"""

def is_dark_hex(hex_color: str) -> bool:
    try:
        h = hex_color.lstrip("#")
        r, g, b = int(h[0:2], 16), int(h[2:4], 16), int(h[4:6], 16)
        # luminance relative
        luminance = 0.2126*r + 0.7152*g + 0.0722*b
        return luminance < 140
    except Exception:
        return False

# ==============================  SCHEMA & CALCULS  ==============================

BASE_COLS = [
    "paye", "nom_client", "sms_envoye", "plateforme", "telephone",
    "date_arrivee", "date_depart", "nuitees",
    "prix_brut","commissions","frais_cb","prix_net",
    "menage","taxes_sejour","base","charges","%","AAAA","MM","ical_uid"
]

def ensure_schema(df: pd.DataFrame) -> pd.DataFrame:
    if df is None:
        df = pd.DataFrame()
    df = df.copy()

    for c in BASE_COLS:
        if c not in df.columns:
            df[c] = np.nan

    # Bool√©ens
    df["paye"] = df["paye"].fillna(False).astype(bool)
    df["sms_envoye"] = df["sms_envoye"].fillna(False).astype(bool)

    # Dates
    df["date_arrivee"] = df["date_arrivee"].apply(to_date_only)
    df["date_depart"]  = df["date_depart"].apply(to_date_only)

    # T√©l√©phone en texte
    df["telephone"] = df["telephone"].apply(normalize_tel)

    # Num√©riques
    for c in ["prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%","nuitees"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")

    # Nuit√©es
    df["nuitees"] = [
        (d2 - d1).days if (isinstance(d1, date) and isinstance(d2, date)) else np.nan
        for d1, d2 in zip(df["date_arrivee"], df["date_depart"])
    ]

    # AAAA/MM
    df["AAAA"] = df["date_arrivee"].apply(lambda d: d.year if isinstance(d, date) else np.nan).astype("Int64")
    df["MM"]   = df["date_arrivee"].apply(lambda d: d.month if isinstance(d, date) else np.nan).astype("Int64")

    # Defaults strings
    df["nom_client"] = df["nom_client"].fillna("")
    df["plateforme"] = df["plateforme"].fillna("Autre")
    df["ical_uid"]   = df["ical_uid"].fillna("")

    # 0.0 pour calculs
    for c in ["prix_brut","commissions","frais_cb","menage","taxes_sejour"]:
        df[c] = df[c].fillna(0.0)

    # Calculs
    df["prix_net"] = (df["prix_brut"] - df["commissions"] - df["frais_cb"]).clip(lower=0)
    df["base"]     = (df["prix_net"] - df["menage"] - df["taxes_sejour"]).clip(lower=0)
    df["charges"]  = (df["prix_brut"] - df["prix_net"]).clip(lower=0)
    with pd.option_context("mode.use_inf_as_na", True):
        df["%"] = (df["charges"] / df["prix_brut"] * 100).fillna(0)

    # Arrondis
    for c in ["prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%"]:
        df[c] = df[c].round(2)

    ordered_cols = [c for c in BASE_COLS if c in df.columns]
    rest_cols = [c for c in df.columns if c not in ordered_cols]
    return df[ordered_cols + rest_cols]

def is_total_row(row: pd.Series) -> bool:
    name_is_total = str(row.get("nom_client","")).strip().lower() == "total"
    pf_is_total   = str(row.get("plateforme


# ==============================  UI HELPERS  ==============================

def kpi_chips(df: pd.DataFrame):
    core, _ = split_totals(df)
    if core.empty:
        return
    b = core["prix_brut"].sum()
    total_comm = core["commissions"].sum()
    total_cb   = core["frais_cb"].sum()
    ch = total_comm + total_cb
    n = core["prix_net"].sum()
    base = core["base"].sum()
    nuits = core["nuitees"].sum()
    pct = (ch / b * 100) if b else 0
    pm_nuit = (b / nuits) if nuits else 0

    html = f"""
    <style>
    .chips-wrap {{ display:flex; flex-wrap:wrap; gap:8px; margin:6px 0 10px 0; }}
    .chip {{ padding:8px 10px; border-radius:10px; background: rgba(127,127,127,0.12); border: 1px solid rgba(127,127,127,0.25); font-size:0.9rem; }}
    .chip b {{ display:block; margin-bottom:3px; font-size:0.85rem; opacity:0.8; }}
    .chip .v {{ font-weight:600; }}
    </style>
    <div class="chips-wrap">
      <div class="chip"><b>Total Brut</b><div class="v">{b:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Total Net</b><div class="v">{n:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Total Base</b><div class="v">{base:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Total Charges</b><div class="v">{ch:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Nuit√©es</b><div class="v">{int(nuits) if pd.notna(nuits) else 0}</div></div>
      <div class="chip"><b>Commission moy.</b><div class="v">{pct:.2f} %</div></div>
      <div class="chip"><b>Prix moyen/nuit</b><div class="v">{pm_nuit:,.2f} ‚Ç¨</div></div>
    </div>
    """
    st.markdown(html, unsafe_allow_html=True)

def search_box(df: pd.DataFrame) -> pd.DataFrame:
    q = st.text_input("üîé Recherche (nom, plateforme, t√©l√©phone‚Ä¶)", "")
    if not q:
        return df
    ql = q.strip().lower()
    def _match(v):
        s = "" if pd.isna(v) else str(v)
        return ql in s.lower()
    mask = (
        df["nom_client"].apply(_match) |
        df["plateforme"].apply(_match) |
        df["telephone"].apply(_match)
    )
    return df[mask].copy()

# ==============================  VUES  ==============================

def vue_reservations(df: pd.DataFrame, palette: dict):
    st.title("üìã R√©servations")
    with st.expander("üéõÔ∏è Options d‚Äôaffichage", expanded=True):
        filtre_paye = st.selectbox("Filtrer pay√©", ["Tous", "Pay√©", "Non pay√©"])
        show_kpi = st.checkbox("Afficher les totaux (KPI)", value=True)
        enable_search = st.checkbox("Activer la recherche", value=True)

    df = ensure_schema(df)

    # Filtre pay√©
    if filtre_paye == "Pay√©":
        df = df[df["paye"] == True].copy()
    elif filtre_paye == "Non pay√©":
        df = df[df["paye"] == False].copy()

    if show_kpi:
        kpi_chips(df)
    if enable_search:
        df = search_box(df)

    core, totals = split_totals(df)
    core = sort_core(core)

    # √âditeur : seulement paye & sms_envoye
    core_edit = core.copy()
    core_edit["__rowid"] = core_edit.index
    core_edit["date_arrivee"] = core_edit["date_arrivee"].apply(format_date_str)
    core_edit["date_depart"]  = core_edit["date_depart"].apply(format_date_str)

    cols_order = [
        "paye","nom_client","sms_envoye","plateforme","telephone",
        "date_arrivee","date_depart","nuitees",
        "prix_brut","commissions","frais_cb","prix_net",
        "menage","taxes_sejour","base","charges","%","AAAA","MM","__rowid"
    ]
    cols_show = [c for c in cols_order if c in core_edit.columns]

    edited = st.data_editor(
        core_edit[cols_show],
        use_container_width=True,
        hide_index=True,
        column_config={
            "paye": st.column_config.CheckboxColumn("Pay√©"),
            "sms_envoye": st.column_config.CheckboxColumn("SMS envoy√©"),
            "__rowid": st.column_config.Column("id", help="Interne", disabled=True, width="small"),
            "date_arrivee": st.column_config.TextColumn("date_arrivee", disabled=True),
            "date_depart":  st.column_config.TextColumn("date_depart", disabled=True),
            "nom_client":   st.column_config.TextColumn("nom_client", disabled=True),
            "plateforme":   st.column_config.TextColumn("plateforme", disabled=True),
            "telephone":    st.column_config.TextColumn("telephone", disabled=True),
            "nuitees":      st.column_config.NumberColumn("nuitees", disabled=True),
            "prix_brut":    st.column_config.NumberColumn("prix_brut", disabled=True),
            "commissions":  st.column_config.NumberColumn("commissions", disabled=True),
            "frais_cb":     st.column_config.NumberColumn("frais_cb", disabled=True),
            "prix_net":     st.column_config.NumberColumn("prix_net", disabled=True),
            "menage":       st.column_config.NumberColumn("menage", disabled=True),
            "taxes_sejour": st.column_config.NumberColumn("taxes_sejour", disabled=True),
            "base":         st.column_config.NumberColumn("base", disabled=True),
            "charges":      st.column_config.NumberColumn("charges", disabled=True),
            "%":            st.column_config.NumberColumn("%", disabled=True),
            "AAAA":         st.column_config.NumberColumn("AAAA", disabled=True),
            "MM":           st.column_config.NumberColumn("MM", disabled=True),
        }
    )

    c1, c2 = st.columns([1,3])
    if c1.button("üíæ Enregistrer les cases coch√©es"):
        for _, r in edited.iterrows():
            ridx = int(r["__rowid"])
            core.at[ridx, "paye"] = bool(r.get("paye", False))
            core.at[ridx, "sms_envoye"] = bool(r.get("sms_envoye", False))
        new_df = pd.concat([core, totals], ignore_index=False).reset_index(drop=True)
        sauvegarder_donnees(new_df)
        st.success("‚úÖ Statuts Pay√© / SMS mis √† jour.")
        st.rerun()

    # Totaux √† part
    if not totals.empty:
        show_tot = totals.copy()
        for c in ["date_arrivee","date_depart"]:
            show_tot[c] = show_tot[c].apply(format_date_str)
        st.caption("Lignes de totaux (non √©ditables) :")
        cols_tot = [
            "paye","nom_client","sms_envoye","plateforme","telephone",
            "date_arrivee","date_depart","nuitees",
            "prix_brut","commissions","frais_cb","prix_net",
            "menage","taxes_sejour","base","charges","%","AAAA","MM"
        ]
        cols_tot = [c for c in cols_tot if c in show_tot.columns]
        st.dataframe(show_tot[cols_tot], use_container_width=True)

def vue_ajouter(df: pd.DataFrame):
    st.title("‚ûï Ajouter une r√©servation")
    st.caption("Saisie compacte (libell√©s inline)")

    def inline_input(label, widget_fn, key=None, **widget_kwargs):
        col1, col2 = st.columns([1,2])
        with col1: st.markdown(f"**{label}**")
        with col2: return widget_fn(label, key=key, label_visibility="collapsed", **widget_kwargs)

    paye = inline_input("Pay√©", st.checkbox, key="add_paye", value=False)
    nom = inline_input("Nom", st.text_input, key="add_nom", value="")
    sms_envoye = inline_input("SMS envoy√©", st.checkbox, key="add_sms", value=False)

    tel = inline_input("T√©l√©phone (+33...)", st.text_input, key="add_tel", value="")
    plateforme = inline_input("Plateforme", st.selectbox, key="add_pf",
                              options=["Booking","Airbnb","Autre"], index=0)

    arrivee = inline_input("Arriv√©e", st.date_input, key="add_arrivee", value=date.today())
    min_dep = arrivee + timedelta(days=1)
    depart  = inline_input("D√©part",  st.date_input, key="add_depart",
                           value=min_dep, min_value=min_dep)

    brut = inline_input("Prix brut (‚Ç¨)", st.number_input, key="add_brut",
                        min_value=0.0, step=1.0, format="%.2f")
    commissions = inline_input("Commissions (‚Ç¨)", st.number_input, key="add_comm",
                               min_value=0.0, step=1.0, format="%.2f")
    frais_cb = inline_input("Frais CB (‚Ç¨)", st.number_input, key="add_cb",
                            min_value=0.0, step=1.0, format="%.2f")

    net_calc = max(float(brut) - float(commissions) - float(frais_cb), 0.0)
    inline_input("Prix net (calcul√©)", st.number_input, key="add_net",
                 value=round(net_calc,2), step=0.01, format="%.2f", disabled=True)

    menage = inline_input("M√©nage (‚Ç¨)", st.number_input, key="add_menage",
                          min_value=0.0, step=1.0, format="%.2f")
    taxes  = inline_input("Taxes s√©jour (‚Ç¨)", st.number_input, key="add_taxes",
                          min_value=0.0, step=1.0, format="%.2f")

    base_calc = max(net_calc - float(menage) - float(taxes), 0.0)
    charges_calc = max(float(brut) - net_calc, 0.0)
    pct_calc = (charges_calc / float(brut) * 100) if float(brut) > 0 else 0.0

    inline_input("Base (calcul√©e)", st.number_input, key="add_base",
                 value=round(base_calc,2), step=0.01, format="%.2f", disabled=True)
    inline_input("Commission (%)", st.number_input, key="add_pct",
                 value=round(pct_calc,2), step=0.01, format="%.2f", disabled=True)

    if st.button("Enregistrer"):
        if depart < arrivee + timedelta(days=1):
            st.error("La date de d√©part doit √™tre au moins le lendemain de l‚Äôarriv√©e.")
            return
        ligne = {
            "paye": bool(paye),
            "nom_client": (nom or "").strip(),
            "sms_envoye": bool(sms_envoye),
            "plateforme": plateforme,
            "telephone": normalize_tel(tel),
            "date_arrivee": arrivee,
            "date_depart": depart,
            "prix_brut": float(brut),
            "commissions": float(commissions),
            "frais_cb": float(frais_cb),
            "prix_net": round(net_calc, 2),
            "menage": float(menage),
            "taxes_sejour": float(taxes),
            "base": round(base_calc, 2),
            "charges": round(charges_calc, 2),
            "%": round(pct_calc, 2),
            "nuitees": (depart - arrivee).days,
            "AAAA": arrivee.year,
            "MM": arrivee.month,
            "ical_uid": ""
        }
        df2 = pd.concat([df, pd.DataFrame([ligne])], ignore_index=True)
        sauvegarder_donnees(df2)
        st.success("‚úÖ R√©servation enregistr√©e")
        st.rerun()

def vue_modifier(df: pd.DataFrame):
    st.title("‚úèÔ∏è Modifier / Supprimer")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune r√©servation.")
        return

    df["identifiant"] = df["nom_client"].astype(str) + " | " + df["date_arrivee"].apply(format_date_str)
    choix = st.selectbox("Choisir une r√©servation", df["identifiant"])
    idx = df.index[df["identifiant"] == choix]
    if len(idx) == 0:
        st.warning("S√©lection invalide.")
        return
    i = idx[0]

    t0, t1, t2 = st.columns(3)
    paye = t0.checkbox("Pay√©", value=bool(df.at[i, "paye"]))
    nom = t1.text_input("Nom", df.at[i, "nom_client"])
    sms_envoye = t2.checkbox("SMS envoy√©", value=bool(df.at[i, "sms_envoye"]))

    col = st.columns(2)
    tel = col[0].text_input("T√©l√©phone", normalize_tel(df.at[i, "telephone"]))
    plateforme = col[1].selectbox("Plateforme", ["Booking","Airbnb","Autre"],
                                  index = ["Booking","Airbnb","Autre"].index(df.at[i,"plateforme"]) if df.at[i,"plateforme"] in ["Booking","Airbnb","Autre"] else 2)

    arrivee = st.date_input("Arriv√©e", df.at[i,"date_arrivee"] if isinstance(df.at[i,"date_arrivee"], date) else date.today())
    depart  = st.date_input("D√©part",  df.at[i,"date_depart"] if isinstance(df.at[i,"date_depart"], date) else arrivee + timedelta(days=1), min_value=arrivee+timedelta(days=1))

    c1, c2, c3 = st.columns(3)
    brut = c1.number_input("Prix brut (‚Ç¨)", min_value=0.0, value=float(df.at[i,"prix_brut"]) if pd.notna(df.at[i,"prix_brut"]) else 0.0, step=1.0, format="%.2f")
    commissions = c2.number_input("Commissions (‚Ç¨)", min_value=0.0, value=float(df.at[i,"commissions"]) if pd.notna(df.at[i,"commissions"]) else 0.0, step=1.0, format="%.2f")
    frais_cb = c3.number_input("Frais CB (‚Ç¨)", min_value=0.0, value=float(df.at[i,"frais_cb"]) if pd.notna(df.at[i,"frais_cb"]) else 0.0, step=1.0, format="%.2f")

    net_calc = max(brut - commissions - frais_cb, 0.0)

    d1, d2, d3 = st.columns(3)
    menage = d1.number_input("M√©nage (‚Ç¨)", min_value=0.0, value=float(df.at[i,"menage"]) if pd.notna(df.at[i,"menage"]) else 0.0, step=1.0, format="%.2f")
    taxes  = d2.number_input("Taxes s√©jour (‚Ç¨)", min_value=0.0, value=float(df.at[i,"taxes_sejour"]) if pd.notna(df.at[i,"taxes_sejour"]) else 0.0, step=1.0, format="%.2f")
    base_calc = max(net_calc - menage - taxes, 0.0)

    charges_calc = max(brut - net_calc, 0.0)
    pct_calc = (charges_calc / brut * 100) if brut > 0 else 0.0
    d3.markdown(f"**Prix net (calcul√©)**: {net_calc:.2f} ‚Ç¨  \n**Base (calcul√©e)**: {base_calc:.2f} ‚Ç¨  \n**%**: {pct_calc:.2f}")

    c_save, c_del = st.columns(2)
    if c_save.button("üíæ Enregistrer"):
        if depart < arrivee + timedelta(days=1):
            st.error("La date de d√©part doit √™tre au moins le lendemain de l‚Äôarriv√©e.")
            return
        df.at[i,"paye"] = bool(paye)
        df.at[i,"nom_client"] = nom.strip()
        df.at[i,"sms_envoye"] = bool(sms_envoye)
        df.at[i,"plateforme"] = plateforme
        df.at[i,"telephone"]  = normalize_tel(tel)
        df.at[i,"date_arrivee"] = arrivee
        df.at[i,"date_depart"]  = depart
        df.at[i,"prix_brut"] = float(brut)
        df.at[i,"commissions"] = float(commissions)
        df.at[i,"frais_cb"] = float(frais_cb)
        df.at[i,"prix_net"]  = round(net_calc, 2)
        df.at[i,"menage"] = float(menage)
        df.at[i,"taxes_sejour"] = float(taxes)
        df.at[i,"base"] = round(base_calc, 2)
        df.at[i,"charges"] = round(charges_calc, 2)
        df.at[i,"%"] = round(pct_calc, 2)
        df.at[i,"nuitees"]   = (depart - arrivee).days
        df.at[i,"AAAA"]      = arrivee.year
        df.at[i,"MM"]        = arrivee.month
        df.drop(columns=["identifiant"], inplace=True, errors="ignore")
        sauvegarder_donnees(df)
        st.success("‚úÖ Modifi√©")
        st.rerun()

    if c_del.button("üóë Supprimer"):
        df2 = df.drop(index=i)
        df2.drop(columns=["identifiant"], inplace=True, errors="ignore")
        sauvegarder_donnees(df2)
        st.warning("Supprim√©.")
        st.rerun()

def vue_calendrier(df: pd.DataFrame, palette: dict):
    st.title("üìÖ Calendrier mensuel (coloris√© par plateforme)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    cols = st.columns(2)
    mois_nom = cols[0].selectbox("Mois", list(calendar.month_name)[1:], index=max(0, date.today().month-1))
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    if not annees:
        st.warning("Aucune ann√©e disponible.")
        return
    annee = cols[1].selectbox("Ann√©e", annees, index=len(annees)-1)

    mois_index = list(calendar.month_name).index(mois_nom)
    nb_jours = calendar.monthrange(annee, mois_index)[1]
    jours = [date(annee, mois_index, j+1) for j in range(nb_jours)]

    # R√©servations (hors lignes totales)
    core, _ = split_totals(df)
    core = sort_core(core)

    # Pour chaque jour : liste (nom, pf)
    occ = {j: [] for j in jours}
    for _, r in core.iterrows():
        d1, d2 = r["date_arrivee"], r["date_depart"]
        if not (isinstance(d1, date) and isinstance(d2, date)):
            continue
        nom = str(r.get("nom_client") or "")
        pf  = str(r.get("plateforme") or "")
        for j in jours:
            if d1 <= j < d2:
                occ[j].append((nom, pf))

    # HTML du calendrier
    headers = ["Lun","Mar","Mer","Jeu","Ven","Sam","Dim"]
    cal = calendar.Calendar(firstweekday=0)  # Lundi=0
    weeks = cal.monthdatescalendar(annee, mois_index)

    # Table styl√©e
    styles = """
    <style>
    .cal {border-collapse: collapse; width:100%; table-layout: fixed;}
    .cal th, .cal td { border:1px solid #e5e7eb; vertical-align: top; padding:6px; height:95px; }
    .cal th { background:#f8fafc; text-align:center; font-weight:600; }
    .cal .other-month { background:#fafafa; color:#aaa; }
    .cal .daynum { font-size:0.85rem; font-weight:600; opacity:0.8; margin-bottom:4px; }
    .cal .cellwrap { font-size:0.9rem; border-radius:6px; padding:4px; line-height:1.2; }
    </style>
    """
    html = [styles, "<table class='cal'>", "<thead><tr>"]
    for h in headers:
        html.append(f"<th>{h}</th>")
    html.append("</tr></thead><tbody>")

    for week in weeks:
        html.append("<tr>")
        for d in week:
            other = (d.month != mois_index)
            classes = "other-month" if other else ""
            inside = ""
            if d.month == mois_index:
                items = occ.get(d, [])
                if items:
                    # Fond = couleur de la 1√®re plateforme
                    bg = platform_color(palette, items[0][1])
                    txt_col = "#fff" if is_dark_hex(bg) else "#111"
                    names = "<br>".join([n for n, _ in items])  # liste simple des noms
                    inside = f"<div class='cellwrap' style='background:{bg};color:{txt_col}'>{names}</div>"
            html.append(f"<td class='{classes}'>"
                        f"<div class='daynum'>{d.day}</div>{inside}</td>")
        html.append("</tr>")
    html.append("</tbody></table>")
    st.markdown("".join(html), unsafe_allow_html=True)

    # L√©gende plateformes
    st.markdown("**L√©gende plateformes** : ", unsafe_allow_html=True)
    badges = "".join([platform_badge(pf, col) for pf, col in palette.items()])
    st.markdown(badges, unsafe_allow_html=True)

def vue_rapport(df: pd.DataFrame):
    st.title("üìä Rapport (d√©taill√©)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    if not annees:
        st.info("Aucune ann√©e disponible.")
        return

    c1, c2, c3 = st.columns(3)
    annee = c1.selectbox("Ann√©e", annees, index=len(annees)-1, key="rapport_annee")
    pf_opt = ["Toutes"] + sorted(df["plateforme"].dropna().unique().tolist())
    pf = c2.selectbox("Plateforme", pf_opt, key="rapport_pf")
    mois_opt = ["Tous"] + [f"{i:02d}" for i in range(1,13)]
    mois_label = c3.selectbox("Mois", mois_opt, key="rapport_mois")

    data = df[df["AAAA"] == int(annee)].copy()
    if pf != "Toutes":
        data = data[data["plateforme"] == pf]
    if mois_label != "Tous":
        data = data[data["MM"] == int(mois_label)]

    if data.empty:
        st.info("Aucune donn√©e pour ces filtres.")
        return

    detail = data.copy()
    for c in ["date_arrivee","date_depart"]:
        detail[c] = detail[c].apply(format_date_str)
    by = [c for c in ["date_arrivee","nom_client"] if c in detail.columns]
    if by:
        detail = detail.sort_values(by=by, na_position="last").reset_index(drop=True)

    cols_detail = [
        "paye","nom_client","sms_envoye","plateforme","telephone",
        "date_arrivee","date_depart","nuitees",
        "prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%"
    ]
    cols_detail = [c for c in cols_detail if c in detail.columns]
    st.dataframe(detail[cols_detail], use_container_width=True)

    core, _ = split_totals(data)
    kpi_chips(core)

    stats = (
        data.groupby(["MM","plateforme"], dropna=True)
            .agg(prix_brut=("prix_brut","sum"),
                 prix_net=("prix_net","sum"),
                 base=("base","sum"),
                 charges=("charges","sum"),
                 nuitees=("nuitees","sum"))
            .reset_index()
    )
    stats = stats.sort_values(["MM","plateforme"]).reset_index(drop=True)

    def bar_chart_metric(metric_label, metric_col):
        if stats.empty:
            return
        pvt = stats.pivot(index="MM", columns="plateforme", values=metric_col).fillna(0).sort_index()
        pvt.index = [f"{int(m):02d}" for m in pvt.index]
        st.markdown(f"**{metric_label}**")
        st.bar_chart(pvt)

    bar_chart_metric("Revenus bruts", "prix_brut")
    bar_chart_metric("Revenus nets", "prix_net")
    bar_chart_metric("Base", "base")
    bar_chart_metric("Nuit√©es", "nuitees")

    buf = BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        detail[cols_detail].to_excel(writer, index=False)
    st.download_button(
        "‚¨áÔ∏è T√©l√©charger le d√©tail (XLSX)",
        data=buf.getvalue(),
        file_name=f"rapport_detail_{annee}{'' if mois_label=='Tous' else '_'+mois_label}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

def vue_clients(df: pd.DataFrame):
    st.title("üë• Liste des clients")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    c1, c2 = st.columns(2)
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    annee = c1.selectbox("Ann√©e", annees, index=len(annees)-1) if annees else None
    mois  = c2.selectbox("Mois", ["Tous"] + [f"{i:02d}" for i in range(1,13)])

    data = df.copy()
    if annee:
        data = data[data["AAAA"] == int(annee)]
    if mois != "Tous":
        data = data[data["MM"] == int(mois)]

    if data.empty:
        st.info("Aucune donn√©e pour cette p√©riode.")
        return

    data["prix_brut/nuit"] = data.apply(lambda r: round((r["prix_brut"]/r["nuitees"]) if r["nuitees"] else 0,2), axis=1)
    data["prix_net/nuit"]  = data.apply(lambda r: round((r["prix_net"]/r["nuitees"])  if r["nuitees"] else 0,2), axis=1)

    show = data.copy()
    for c in ["date_arrivee","date_depart"]:
        show[c] = show[c].apply(format_date_str)

    cols = ["paye","nom_client","sms_envoye","plateforme","telephone","date_arrivee","date_depart",
            "nuitees","prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%","prix_brut/nuit","prix_net/nuit"]
    cols = [c for c in cols if c in show.columns]
    st.dataframe(show[cols], use_container_width=True)
    st.download_button(
        "üì• T√©l√©charger (CSV)",
        data=show[cols].to_csv(index=False).encode("utf-8"),
        file_name="liste_clients.csv",
        mime="text/csv"
    )

def vue_export_ics(df: pd.DataFrame):
    st.title("üì§ Export ICS (Google Agenda ‚Äì Import manuel)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e √† exporter.")
        return

    c1, c2, c3 = st.columns(3)
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    annee = c1.selectbox("Ann√©e", ["Toutes"] + annees, index=len(annees)) if annees else "Toutes"
    mois  = c2.selectbox("Mois", ["Tous"] + list(range(1,13)))
    pfopt = ["Toutes"] + sorted(df["plateforme"].dropna().unique().tolist())
    pf    = c3.selectbox("Plateforme", pfopt)

    data = df.copy()
    if annee != "Toutes":
        data = data[data["AAAA"] == int(annee)]
    if mois != "Tous":
        data = data[data["MM"] == int(mois)]
    if pf != "Toutes":
        data = data[data["plateforme"] == pf]

    if data.empty:
        st.info("Aucune r√©servation pour ces filtres.")
        return

    ics_text = df_to_ics(data)
    st.download_button(
        "‚¨áÔ∏è T√©l√©charger reservations.ics",
        data=ics_text.encode("utf-8"),
        file_name="reservations.ics",
        mime="text/calendar"
    )
    st.caption("Dans Google Agenda : Param√®tres ‚Üí Importer & exporter ‚Üí Importer ‚Üí s√©lectionnez ce fichier .ics.")

def vue_sms(df: pd.DataFrame):
    st.title("‚úâÔ∏è SMS (envoi manuel)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    today = date.today()
    demain = today + timedelta(days=1)
    hier = today - timedelta(days=1)

    colA, colB = st.columns(2)

    # Arriv√©es demain
    with colA:
        st.subheader("üìÜ Arriv√©es demain")
        arrives = df[df["date_arrivee"] == demain].copy()
        if arrives.empty:
            st.info("Aucune arriv√©e demain.")
        else:
            for idx, r in arrives.reset_index(drop=True).iterrows():
                body = sms_message_arrivee(r)
                tel = normalize_tel(r.get("telephone"))
                tel_link = f"tel:{tel}" if tel else ""
                sms_link = f"sms:{tel}?&body={quote(body)}" if tel and body else ""
                st.markdown(f"**{r.get('nom_client','')}** ‚Äî {r.get('plateforme','')}")
                st.markdown(f"Arriv√©e: {format_date_str(r.get('date_arrivee'))} ‚Ä¢ "
                            f"D√©part: {format_date_str(r.get('date_depart'))} ‚Ä¢ "
                            f"Nuit√©es: {r.get('nuitees','')}")
                st.code(body)
                c1, c2 = st.columns(2)
                if tel_link: c1.link_button(f"üìû Appeler {tel}", tel_link)
                if sms_link: c2.link_button("üì© Envoyer SMS", sms_link)
                st.divider()

    # Relance +24h apr√®s d√©part
    with colB:
        st.subheader("üïí Relance +24h apr√®s d√©part")
        dep_24h = df[df["date_depart"] == hier].copy()
        if dep_24h.empty:
            st.info("Aucun d√©part hier.")
        else:
            for idx, r in dep_24h.reset_index(drop=True).iterrows():
                body = sms_message_depart(r)
                tel = normalize_tel(r.get("telephone"))
                tel_link = f"tel:{tel}" if tel else ""
                sms_link = f"sms:{tel}?&body={quote(body)}" if tel and body else ""
                st.markdown(f"**{r.get('nom_client','')}** ‚Äî {r.get('plateforme','')}")
                st.code(body)
                c1, c2 = st.columns(2)
                if tel_link: c1.link_button(f"üìû Appeler {tel}", tel_link)
                if sms_link: c2.link_button("üì© Envoyer SMS", sms_link)
                st.divider()

    # Composeur manuel
    st.subheader("‚úçÔ∏è Composer un SMS manuel")
    df_pick = df.copy()
    df_pick["id_aff"] = df_pick["nom_client"].astype(str) + " | " + df_pick["plateforme"].astype(str) + " | " + df_pick["date_arrivee"].apply(format_date_str)
    choix = st.selectbox("Choisir une r√©servation", df_pick["id_aff"])
    r = df_pick.loc[df_pick["id_aff"] == choix].iloc[0]
    tel = normalize_tel(r.get("telephone"))

    choix_type = st.radio("Mod√®le de message",
                          ["Arriv√©e (demande d‚Äôheure)","Relance apr√®s d√©part","Message libre"],
                          horizontal=True)
    if choix_type == "Arriv√©e (demande d‚Äôheure)":
        body = sms_message_arrivee(r)
    elif choix_type == "Relance apr√®s d√©part":
        body = sms_message_depart(r)
    else:
        body = st.text_area("Votre message", value="", height=160, placeholder="Tapez votre SMS ici‚Ä¶")

    c1, c2 = st.columns(2)
    with c1:
        st.code(body or "‚Äî")
    if tel and body:
        c1, c2 = st.columns(2)
        c1.link_button(f"üìû Appeler {tel}", f"tel:{tel}")
        c2.link_button("üì© Envoyer SMS", f"sms:{tel}?&body={quote(body)}")
    else:
        st.info("Renseignez un t√©l√©phone et un message.")

# ==============================  BARRE LAT√âRALE : FICHIER + PALETTE ==============================

def palette_sidebar(palette: dict) -> dict:
    st.sidebar.markdown("## üé® Plateformes")
    # Liste existantes
    if palette:
        badges = "".join([platform_badge(pf, col) for pf, col in palette.items()])
        st.sidebar.markdown(badges, unsafe_allow_html=True)

    st.sidebar.markdown("##### Ajouter / modifier")
    with st.sidebar.form("form_palette"):
        new_pf = st.text_input("Nom de la plateforme", "")
        new_color = st.color_picker("Couleur", "#4b5563")
        submitted = st.form_submit_button("‚ûï Ajouter / Mettre √† jour")
        if submitted and new_pf.strip():
            palette[new_pf.strip()] = new_color
            save_palette(palette)
            st.sidebar.success(f"‚úÖ Plateforme ¬´ {new_pf.strip()} ¬ª enregistr√©e")
            st.rerun()
    return palette

# ==============================  APP  ==============================

def main():
    st.set_page_config(page_title="üìñ R√©servations Villa Tobias", layout="wide")

    # Palette persistante
    palette = load_palette()

    # Barre lat√©rale : Fichier + Palette + Maintenance
    st.sidebar.title("üìÅ Fichier")
    df_tmp = charger_donnees()
    bouton_telecharger(df_tmp)
    bouton_restaurer()

    palette = palette_sidebar(palette)
    render_cache_section_sidebar()

    # Navigation
    st.sidebar.title("üß≠ Navigation")
    onglet = st.sidebar.radio(
        "Aller √†",
        ["üìã R√©servations","‚ûï Ajouter","‚úèÔ∏è Modifier / Supprimer",
         "üìÖ Calendrier","üìä Rapport","üë• Liste clients","üì§ Export ICS","‚úâÔ∏è SMS"]
    )

    # Charger les donn√©es (apr√®s √©ventuelle restauration)
    df = charger_donnees()

    if onglet == "üìã R√©servations":
        vue_reservations(df, palette)
    elif onglet == "‚ûï Ajouter":
        vue_ajouter(df)
    elif onglet == "‚úèÔ∏è Modifier / Supprimer":
        vue_modifier(df)
    elif onglet == "üìÖ Calendrier":
        vue_calendrier(df, palette)
    elif onglet == "üìä Rapport":
        vue_rapport(df)
    elif onglet == "üë• Liste clients":
        vue_clients(df)
    elif onglet == "üì§ Export ICS":
        vue_export_ics(df)
    elif onglet == "‚úâÔ∏è SMS":
        vue_sms(df)

if __name__ == "__main__":
    main()