# app.py ‚Äî Villa Tobias (STABLE)
# - Filtre Pay√© (Tous / Pay√© / Non pay√©) dans üìã R√©servations
# - SMS (arriv√©e + relance), ICS, Rapport, Clients, Calendrier color√©
# - Plateformes & couleurs persist√©es dans 'plateformes.json'
# - Pas d'expander imbriqu√© ; sauvegarde XLSX robuste

import streamlit as st
import pandas as pd
import numpy as np
import calendar
from datetime import date, timedelta, datetime, timezone
from io import BytesIO
import hashlib
import os
import json
from urllib.parse import quote

FICHIER = "reservations.xlsx"
PALETTE_FILE = "plateformes.json"

# ==============================  PALETTE (plateformes & couleurs)  ==============================

DEFAULT_PALETTE = {
    "Booking": "#1e90ff",
    "Airbnb": "#ff385c",
    "Autre": "#f59e0b"
}

def load_palette() -> dict:
    if os.path.exists(PALETTE_FILE):
        try:
            with open(PALETTE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            # merge defaults for missing
            for k, v in DEFAULT_PALETTE.items():
                if k not in data:
                    data[k] = v
            return data
        except Exception:
            pass
    # create file with defaults
    save_palette(DEFAULT_PALETTE)
    return DEFAULT_PALETTE.copy()

def save_palette(pal: dict):
    try:
        with open(PALETTE_FILE, "w", encoding="utf-8") as f:
            json.dump(pal, f, ensure_ascii=False, indent=2)
    except Exception:
        st.warning("Impossible d‚Äôenregistrer la palette des plateformes.")

def platform_color(pal: dict, pf: str) -> str:
    if not pf:
        return "#999999"
    return pal.get(str(pf), "#999999")

# ==============================  MAINTENANCE / CACHE  ==============================

def render_cache_section_sidebar():
    st.sidebar.markdown("---")
    st.sidebar.markdown("## üß∞ Maintenance")
    if st.sidebar.button("‚ôªÔ∏è Vider le cache et relancer"):
        try:
            st.cache_data.clear()
        except Exception:
            pass
        try:
            st.cache_resource.clear()
        except Exception:
            pass
        st.sidebar.success("Cache vid√©. Red√©marrage‚Ä¶")
        st.rerun()

# ==============================  OUTILS  ==============================

def to_date_only(x):
    if pd.isna(x) or x is None:
        return None
    try:
        return pd.to_datetime(x).date()
    except Exception:
        return None

def format_date_str(d):
    return d.strftime("%Y/%m/%d") if isinstance(d, date) else ""

def normalize_tel(x):
    if x is None or (isinstance(x, float) and np.isnan(x)):
        return ""
    s = str(x).strip().replace(" ", "")
    if s.endswith(".0"):
        s = s[:-2]
    return s

PLATFORM_ICONS = {"Booking": "üü¶", "Airbnb": "üü©", "Autre": "üüß"}

# ==============================  SCHEMA & CALCULS  ==============================

BASE_COLS = [
    "paye",
    "nom_client",
    "sms_envoye",
    "plateforme","telephone",
    "date_arrivee","date_depart","nuitees",
    "prix_brut","commissions","frais_cb","prix_net",
    "menage","taxes_sejour","base",
    "charges","%", "AAAA","MM","ical_uid"
]

def ensure_schema(df: pd.DataFrame) -> pd.DataFrame:
    if df is None:
        df = pd.DataFrame()
    df = df.copy()

    for c in BASE_COLS:
        if c not in df.columns:
            df[c] = np.nan

    df["paye"] = df["paye"].fillna(False).astype(bool)
    df["sms_envoye"] = df["sms_envoye"].fillna(False).astype(bool)

    for c in ["date_arrivee", "date_depart"]:
        df[c] = df[c].apply(to_date_only)

    df["telephone"] = df["telephone"].apply(normalize_tel)

    for c in ["prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%","nuitees"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")

    if "date_arrivee" in df.columns and "date_depart" in df.columns:
        df["nuitees"] = [
            (d2 - d1).days if (isinstance(d1, date) and isinstance(d2, date)) else np.nan
            for d1, d2 in zip(df["date_arrivee"], df["date_depart"])
        ]

    df["AAAA"] = df["date_arrivee"].apply(lambda d: d.year if isinstance(d, date) else np.nan).astype("Int64")
    df["MM"]   = df["date_arrivee"].apply(lambda d: d.month if isinstance(d, date) else np.nan).astype("Int64")

    df["nom_client"] = df["nom_client"].fillna("")
    df["plateforme"] = df["plateforme"].fillna("Autre")
    df["ical_uid"]   = df["ical_uid"].fillna("")

    for c in ["prix_brut","commissions","frais_cb","menage","taxes_sejour"]:
        df[c] = df[c].fillna(0.0)

    df["prix_net"] = (df["prix_brut"] - df["commissions"] - df["frais_cb"]).clip(lower=0)
    df["base"]     = (df["prix_net"] - df["menage"] - df["taxes_sejour"]).clip(lower=0)
    df["charges"]  = (df["prix_brut"] - df["prix_net"]).clip(lower=0)
    with pd.option_context("mode.use_inf_as_na", True):
        df["%"] = (df["charges"] / df["prix_brut"] * 100).fillna(0)

    for c in ["prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%"]:
        df[c] = df[c].round(2)

    ordered_cols = [c for c in BASE_COLS if c in df.columns]
    rest_cols = [c for c in df.columns if c not in ordered_cols]
    return df[ordered_cols + rest_cols]

def is_total_row(row: pd.Series) -> bool:
    name_is_total = str(row.get("nom_client","")).strip().lower() == "total"
    pf_is_total   = str(row.get("plateforme","")).strip().lower() == "total"
    d1 = row.get("date_arrivee"); d2 = row.get("date_depart")
    no_dates = not isinstance(d1, date) and not isinstance(d2, date)
    has_money = any(pd.notna(row.get(c)) and float(row.get(c) or 0) != 0
                    for c in ["prix_brut","prix_net","base","charges"])
    return name_is_total or pf_is_total or (no_dates and has_money)

def split_totals(df: pd.DataFrame):
    if df is None or df.empty:
        return df, df
    mask = df.apply(is_total_row, axis=1)
    return df[~mask].copy(), df[mask].copy()

def sort_core(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty:
        return df
    by = [c for c in ["date_arrivee","nom_client"] if c in df.columns]
    return df.sort_values(by=by, na_position="last").reset_index(drop=True)

# ==============================  EXCEL I/O  ==============================

@st.cache_data(show_spinner=False)
def _read_excel_cached(path: str, mtime: float):
    return pd.read_excel(path, converters={"telephone": normalize_tel})

def charger_donnees() -> pd.DataFrame:
    if not os.path.exists(FICHIER):
        return ensure_schema(pd.DataFrame())
    try:
        mtime = os.path.getmtime(FICHIER)
        df = _read_excel_cached(FICHIER, mtime)
        return ensure_schema(df)
    except Exception as e:
        st.error(f"Erreur de lecture Excel : {e}")
        return ensure_schema(pd.DataFrame())

def _force_telephone_text_format_openpyxl(writer, df_to_save: pd.DataFrame, sheet_name: str):
    try:
        ws = writer.sheets.get(sheet_name) or writer.sheets.get('Sheet1', None)
        if ws is None or "telephone" not in df_to_save.columns:
            return
        col_idx = df_to_save.columns.get_loc("telephone") + 1
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=col_idx, max_col=col_idx):
            row[0].number_format = '@'
    except Exception:
        pass

def sauvegarder_donnees(df: pd.DataFrame):
    df = ensure_schema(df)
    core, totals = split_totals(df)
    core = sort_core(core)
    out = pd.concat([core, totals], ignore_index=True)
    try:
        with pd.ExcelWriter(FICHIER, engine="openpyxl") as w:
            out.to_excel(w, index=False, sheet_name="Sheet1")
            _force_telephone_text_format_openpyxl(w, out, "Sheet1")
        st.cache_data.clear()
        st.success("üíæ Sauvegarde Excel effectu√©e.")
    except Exception as e:
        st.error(f"√âchec de sauvegarde Excel : {e}")

def bouton_restaurer():
    up = st.sidebar.file_uploader("üì§ Restauration xlsx", type=["xlsx"], help="Remplace le fichier actuel")
    if up is not None:
        try:
            df_new = pd.read_excel(up, converters={"telephone": normalize_tel})
            df_new = ensure_schema(df_new)
            sauvegarder_donnees(df_new)
            st.sidebar.success("‚úÖ Fichier restaur√©.")
            st.rerun()
        except Exception as e:
            st.sidebar.error(f"Erreur import: {e}")

def bouton_telecharger(df:

# ==============================  PALETTE (AIDES D'AFFICHAGE) ==============================

def platform_color(palette: dict, pf: str) -> str:
    """Renvoie une couleur hex (ex: #1e90ff) pour la plateforme pf."""
    if not isinstance(palette, dict):
        palette = {}
    # par d√©faut si inconnue
    return palette.get(str(pf) or "Autre", "#9ca3af")

def platform_badge(pf: str, palette: dict) -> str:
    col = platform_color(palette, pf)
    label = (pf or "Autre")
    return f"""<span style="display:inline-block;padding:2px 8px;border-radius:999px;
                          background:{col}; color:#fff; font-size:0.85rem;">{label}</span>"""

# ==============================  VUES ==============================

def vue_ajouter(df: pd.DataFrame):
    st.title("‚ûï Ajouter une r√©servation")
    st.caption("Saisie compacte (libell√©s √† gauche)")

    def inline_input(label, widget_fn, key=None, **widget_kwargs):
        col1, col2 = st.columns([1,2])
        with col1: st.markdown(f"**{label}**")
        with col2: return widget_fn(label, key=key, label_visibility="collapsed", **widget_kwargs)

    paye = inline_input("Pay√©", st.checkbox, key="add_paye", value=False)
    nom = inline_input("Nom", st.text_input, key="add_nom", value="")
    sms_envoye = inline_input("SMS envoy√©", st.checkbox, key="add_sms", value=False)

    tel = inline_input("T√©l√©phone (+33...)", st.text_input, key="add_tel", value="")
    # plateformes existantes depuis la palette (d√©finies c√¥t√© sidebar / partie 1)
    palette = get_palette()
    existing_pf = sorted(list(palette.keys())) or ["Booking","Airbnb","Autre"]
    plateforme = inline_input("Plateforme", st.selectbox, key="add_pf", options=existing_pf, index=0)

    arrivee = inline_input("Arriv√©e", st.date_input, key="add_arrivee", value=date.today())
    depart_min = arrivee + timedelta(days=1)
    depart = inline_input("D√©part", st.date_input, key="add_depart", value=depart_min, min_value=depart_min)

    brut = inline_input("Prix brut (‚Ç¨)", st.number_input, key="add_brut", min_value=0.0, step=1.0, format="%.2f")
    commissions = inline_input("Commissions (‚Ç¨)", st.number_input, key="add_comm", min_value=0.0, step=1.0, format="%.2f")
    frais_cb = inline_input("Frais CB (‚Ç¨)", st.number_input, key="add_cb", min_value=0.0, step=1.0, format="%.2f")

    net_calc = max(float(brut) - float(commissions) - float(frais_cb), 0.0)
    inline_input("Prix net (calcul√©)", st.number_input, key="add_net", value=round(net_calc,2),
                 step=0.01, format="%.2f", disabled=True)

    menage = inline_input("M√©nage (‚Ç¨)", st.number_input, key="add_menage", min_value=0.0, step=1.0, format="%.2f")
    taxes  = inline_input("Taxes s√©jour (‚Ç¨)", st.number_input, key="add_taxes", min_value=0.0, step=1.0, format="%.2f")

    base_calc = max(net_calc - float(menage) - float(taxes), 0.0)
    charges_calc = max(float(brut) - net_calc, 0.0)
    pct_calc = (charges_calc / float(brut) * 100) if float(brut) > 0 else 0.0

    inline_input("Base (calcul√©e)", st.number_input, key="add_base", value=round(base_calc,2),
                 step=0.01, format="%.2f", disabled=True)
    inline_input("Commission (%)", st.number_input, key="add_pct", value=round(pct_calc,2),
                 step=0.01, format="%.2f", disabled=True)

    if st.button("Enregistrer"):
        if depart < arrivee + timedelta(days=1):
            st.error("La date de d√©part doit √™tre au moins le lendemain de l‚Äôarriv√©e.")
            return
        ligne = {
            "paye": bool(paye),
            "nom_client": (nom or "").strip(),
            "sms_envoye": bool(sms_envoye),
            "plateforme": plateforme,
            "telephone": normalize_tel(tel),
            "date_arrivee": arrivee,
            "date_depart": depart,
            "prix_brut": float(brut),
            "commissions": float(commissions),
            "frais_cb": float(frais_cb),
            "prix_net": round(net_calc, 2),
            "menage": float(menage),
            "taxes_sejour": float(taxes),
            "base": round(base_calc, 2),
            "charges": round(charges_calc, 2),
            "%": round(pct_calc, 2),
            "nuitees": (depart - arrivee).days,
            "AAAA": arrivee.year,
            "MM": arrivee.month,
            "ical_uid": ""
        }
        df2 = pd.concat([df, pd.DataFrame([ligne])], ignore_index=True)
        sauvegarder_donnees(df2)
        st.success("‚úÖ R√©servation enregistr√©e")
        st.rerun()

def vue_modifier(df: pd.DataFrame):
    st.title("‚úèÔ∏è Modifier / Supprimer")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune r√©servation.")
        return

    df["identifiant"] = df["nom_client"].astype(str) + " | " + df["date_arrivee"].apply(format_date_str)
    choix = st.selectbox("Choisir une r√©servation", df["identifiant"])
    idx = df.index[df["identifiant"] == choix]
    if len(idx) == 0:
        st.warning("S√©lection invalide.")
        return
    i = idx[0]

    t0, t1, t2 = st.columns(3)
    paye = t0.checkbox("Pay√©", value=bool(df.at[i, "paye"]))
    nom = t1.text_input("Nom", df.at[i, "nom_client"])
    sms_envoye = t2.checkbox("SMS envoy√©", value=bool(df.at[i, "sms_envoye"]))

    palette = get_palette()
    existing_pf = sorted(list(palette.keys())) or ["Booking","Airbnb","Autre"]
    col = st.columns(2)
    tel = col[0].text_input("T√©l√©phone", normalize_tel(df.at[i, "telephone"]))
    def_idx = existing_pf.index(df.at[i,"plateforme"]) if df.at[i,"plateforme"] in existing_pf else 0
    plateforme = col[1].selectbox("Plateforme", existing_pf, index=def_idx)

    arrivee = st.date_input("Arriv√©e", df.at[i,"date_arrivee"] if isinstance(df.at[i,"date_arrivee"], date) else date.today())
    depart  = st.date_input("D√©part",  df.at[i,"date_depart"] if isinstance(df.at[i,"date_depart"], date) else arrivee + timedelta(days=1), min_value=arrivee+timedelta(days=1))

    c1, c2, c3 = st.columns(3)
    brut = c1.number_input("Prix brut (‚Ç¨)", min_value=0.0, value=float(df.at[i,"prix_brut"]) if pd.notna(df.at[i,"prix_brut"]) else 0.0, step=1.0, format="%.2f")
    commissions = c2.number_input("Commissions (‚Ç¨)", min_value=0.0, value=float(df.at[i,"commissions"]) if pd.notna(df.at[i,"commissions"]) else 0.0, step=1.0, format="%.2f")
    frais_cb = c3.number_input("Frais CB (‚Ç¨)", min_value=0.0, value=float(df.at[i,"frais_cb"]) if pd.notna(df.at[i,"frais_cb"]) else 0.0, step=1.0, format="%.2f")

    net_calc = max(brut - commissions - frais_cb, 0.0)

    d1, d2, d3 = st.columns(3)
    menage = d1.number_input("M√©nage (‚Ç¨)", min_value=0.0, value=float(df.at[i,"menage"]) if pd.notna(df.at[i,"menage"]) else 0.0, step=1.0, format="%.2f")
    taxes  = d2.number_input("Taxes s√©jour (‚Ç¨)", min_value=0.0, value=float(df.at[i,"taxes_sejour"]) if pd.notna(df.at[i,"taxes_sejour"]) else 0.0, step=1.0, format="%.2f")
    base_calc = max(net_calc - menage - taxes, 0.0)

    charges_calc = max(brut - net_calc, 0.0)
    pct_calc = (charges_calc / brut * 100) if brut > 0 else 0.0
    d3.markdown(f"**Prix net (calcul√©)**: {net_calc:.2f} ‚Ç¨  \n**Base (calcul√©e)**: {base_calc:.2f} ‚Ç¨  \n**%**: {pct_calc:.2f}")

    c_save, c_del = st.columns(2)
    if c_save.button("üíæ Enregistrer"):
        if depart < arrivee + timedelta(days=1):
            st.error("La date de d√©part doit √™tre au moins le lendemain de l‚Äôarriv√©e.")
            return
        df.at[i,"paye"] = bool(paye)
        df.at[i,"nom_client"] = nom.strip()
        df.at[i,"sms_envoye"] = bool(sms_envoye)
        df.at[i,"plateforme"] = plateforme
        df.at[i,"telephone"]  = normalize_tel(tel)
        df.at[i,"date_arrivee"] = arrivee
        df.at[i,"date_depart"]  = depart
        df.at[i,"prix_brut"] = float(brut)
        df.at[i,"commissions"] = float(commissions)
        df.at[i,"frais_cb"] = float(frais_cb)
        df.at[i,"prix_net"]  = round(net_calc, 2)
        df.at[i,"menage"] = float(menage)
        df.at[i,"taxes_sejour"] = float(taxes)
        df.at[i,"base"] = round(base_calc, 2)
        df.at[i,"charges"] = round(charges_calc, 2)
        df.at[i,"%"] = round(pct_calc, 2)
        df.at[i,"nuitees"]   = (depart - arrivee).days
        df.at[i,"AAAA"]      = arrivee.year
        df.at[i,"MM"]        = arrivee.month
        df.drop(columns=["identifiant"], inplace=True, errors="ignore")
        sauvegarder_donnees(df)
        st.success("‚úÖ Modifi√©")
        st.rerun()

    if c_del.button("üóë Supprimer"):
        df2 = df.drop(index=i)
        df2.drop(columns=["identifiant"], inplace=True, errors="ignore")
        sauvegarder_donnees(df2)
        st.warning("Supprim√©.")
        st.rerun()

def _calendar_html_table(annee:int, mois:int, events_by_day:dict, palette:dict) -> str:
    """Construit une table HTML type calendrier avec cellules color√©es par plateforme."""
    headers = ["Lun","Mar","Mer","Jeu","Ven","Sam","Dim"]
    cal = calendar.Calendar(firstweekday=0)  # lundi = 0
    weeks = cal.monthdayscalendar(annee, mois)

    # CSS simple (fond clair lisible)
    css = """
    <style>
    .vtcal {border-collapse:collapse; width:100%; table-layout:fixed; font-size:0.92rem;}
    .vtcal th, .vtcal td {border:1px solid #e5e7eb; vertical-align:top; padding:0; height:92px;}
    .vtcal th {background:#f3f4f6; text-align:center; font-weight:600; padding:6px 0;}
    .vtday {position:relative;}
    .vtnum {position:absolute; top:4px; right:6px; font-size:0.8rem; color:#6b7280;}
    .vtcell {display:flex; flex-direction:column; gap:4px; padding:20px 6px 6px 6px;}
    .vtbadge {display:block; width:100%; border-radius:6px; padding:6px; color:#fff; font-weight:600; overflow:hidden; text-overflow:ellipsis; white-space:nowrap;}
    .vtlegend {display:flex; flex-wrap:wrap; gap:8px; margin:8px 0 12px 0;}
    .vtlegend-item {display:flex; align-items:center; gap:6px; padding:4px 8px; border:1px solid #e5e7eb; border-radius:999px; font-size:0.85rem;}
    .vtlegend-dot {width:12px; height:12px; border-radius:999px; display:inline-block;}
    </style>
    """

    def cell_html(day: int) -> str:
        if day == 0:
            return '<td></td>'
        evts = events_by_day.get(day, [])
        # chaque evts est (plateforme, nom_client)
        inner = [f'<span class="vtbadge" style="background:{platform_color(palette,p)};">{name}</span>'
                 for p, name in evts]
        return f'<td class="vtday"><div class="vtnum">{day}</div><div class="vtcell">{"".join(inner)}</div></td>'

    # table
    thead = "<thead><tr>" + "".join(f"<th>{h}</th>" for h in headers) + "</tr></thead>"
    tbody_rows = []
    for w in weeks:
        tds = "".join(cell_html(d) for d in w)
        tbody_rows.append(f"<tr>{tds}</tr>")
    tbody = "<tbody>" + "".join(tbody_rows) + "</tbody>"
    return css + f'<table class="vtcal">{thead}{tbody}</table>'

def vue_calendrier(df: pd.DataFrame):
    st.title("üìÖ Calendrier")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    # s√©lecteurs
    c1, c2 = st.columns(2)
    mois_idx = c1.selectbox("Mois", list(calendar.month_name)[1:], index=max(0, date.today().month-1))
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    if not annees:
        st.warning("Aucune ann√©e disponible.")
        return
    annee = c2.selectbox("Ann√©e", annees, index=len(annees)-1)
    mois = list(calendar.month_name).index(mois_idx)

    # palette
    palette = get_palette()

    # pr√©pare events par jour
    events_by_day = {}
    core, _ = split_totals(df)
    for _, r in core.iterrows():
        d1 = r.get("date_arrivee"); d2 = r.get("date_depart")
        if not (isinstance(d1, date) and isinstance(d2, date)):
            continue
        if d1.year != annee or d1.month != mois:
            # on n'affiche que par mois d'arriv√©e (comme tu avais l'habitude)
            continue
        pf = str(r.get("plateforme") or "Autre")
        name = str(r.get("nom_client") or "")
        # sur toute la plage d'occupation (jours concern√©s dans le mois s√©lectionn√©)
        cur = d1
        while cur < d2:
            if cur.year == annee and cur.month == mois:
                events_by_day.setdefault(cur.day, []).append((pf, name))
            cur += timedelta(days=1)

    # rendu
    st.markdown(_calendar_html_table(annee, mois, events_by_day, palette), unsafe_allow_html=True)

    # l√©gende
    st.subheader("L√©gende des plateformes")
    if palette:
        legend_html = ['<div class="vtlegend">']
        for pf in sorted(palette.keys()):
            c = platform_color(palette, pf)
            legend_html.append(
                f'<div class="vtlegend-item"><span class="vtlegend-dot" style="background:{c}"></span>{pf}</div>'
            )
        legend_html.append('</div>')
        st.markdown("\n".join(legend_html), unsafe_allow_html=True)
    else:
        st.caption("Aucune plateforme d√©finie dans la palette (voir la barre lat√©rale).")

def vue_rapport(df: pd.DataFrame):
    st.title("üìä Rapport (d√©taill√©)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    if not annees:
        st.info("Aucune ann√©e disponible.")
        return

    c1, c2, c3 = st.columns(3)
    annee = c1.selectbox("Ann√©e", annees, index=len(annees)-1, key="rapport_annee")
    pf_opt = ["Toutes"] + sorted(df["plateforme"].dropna().unique().tolist())
    pf = c2.selectbox("Plateforme", pf_opt, key="rapport_pf")
    mois_opt = ["Tous"] + [f"{i:02d}" for i in range(1,13)]
    mois_label = c3.selectbox("Mois", mois_opt, key="rapport_mois")

    data = df[df["AAAA"] == int(annee)].copy()
    if pf != "Toutes":
        data = data[data["plateforme"] == pf]
    if mois_label != "Tous":
        data = data[data["MM"] == int(mois_label)]

    if data.empty:
        st.info("Aucune donn√©e pour ces filtres.")
        return

    detail = data.copy()
    for c in ["date_arrivee","date_depart"]:
        detail[c] = detail[c].apply(format_date_str)
    by = [c for c in ["date_arrivee","nom_client"] if c in detail.columns]
    if by:
        detail = detail.sort_values(by=by, na_position="last").reset_index(drop=True)

    cols_detail = [
        "paye","nom_client","sms_envoye","plateforme","telephone",
        "date_arrivee","date_depart","nuitees",
        "prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%"
    ]
    cols_detail = [c for c in cols_detail if c in detail.columns]
    st.dataframe(detail[cols_detail], use_container_width=True)

    core, _ = split_totals(data)
    kpi_chips(core)

    stats = (
        data.groupby(["MM","plateforme"], dropna=True)
            .agg(prix_brut=("prix_brut","sum"),
                 prix_net=("prix_net","sum"),
                 base=("base","sum"),
                 charges=("charges","sum"),
                 nuitees=("nuitees","sum"))
            .reset_index()
            .sort_values(["MM","plateforme"])
            .reset_index(drop=True)
    )

    def bar_chart_metric(label, colname):
        if stats.empty: return
        pvt = stats.pivot(index="MM", columns="plateforme", values=colname).fillna(0).sort_index()
        pvt.index = [f"{int(m):02d}" for m in pvt.index]
        st.markdown(f"**{label}**")
        st.bar_chart(pvt)

    bar_chart_metric("Revenus bruts", "prix_brut")
    bar_chart_metric("Revenus nets", "prix_net")
    bar_chart_metric("Base", "base")
    bar_chart_metric("Nuit√©es", "nuitees")

    buf = BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        detail[cols_detail].to_excel(writer, index=False)
    st.download_button(
        "‚¨áÔ∏è T√©l√©charger le d√©tail (XLSX)",
        data=buf.getvalue(),
        file_name=f"rapport_detail_{annee}{'' if mois_label=='Tous' else '_'+mois_label}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

def vue_clients(df: pd.DataFrame):
    st.title("üë• Liste des clients")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    c1, c2 = st.columns(2)
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    annee = c1.selectbox("Ann√©e", annees, index=len(annees)-1) if annees else None
    mois  = c2.selectbox("Mois", ["Tous"] + [f"{i:02d}" for i in range(1,13)])

    data = df.copy()
    if annee:
        data = data[data["AAAA"] == int(annee)]
    if mois != "Tous":
        data = data[data["MM"] == int(mois)]

    if data.empty:
        st.info("Aucune donn√©e pour cette p√©riode.")
        return

    data["prix_brut/nuit"] = data.apply(lambda r: round((r["prix_brut"]/r["nuitees"]) if r["nuitees"] else 0,2), axis=1)
    data["prix_net/nuit"]  = data.apply(lambda r: round((r["prix_net"]/r["nuitees"])  if r["nuitees"] else 0,2), axis=1)

    show = data.copy()
    for c in ["date_arrivee","date_depart"]:
        show[c] = show[c].apply(format_date_str)

    cols = ["paye","nom_client","sms_envoye","plateforme","telephone","date_arrivee","date_depart",
            "nuitees","prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%","prix_brut/nuit","prix_net/nuit"]
    cols = [c for c in cols if c in show.columns]
    st.dataframe(show[cols], use_container_width=True)
    st.download_button(
        "üì• T√©l√©charger (CSV)",
        data=show[cols].to_csv(index=False).encode("utf-8"),
        file_name="liste_clients.csv",
        mime="text/csv"
    )

def vue_export_ics(df: pd.DataFrame):
    st.title("üì§ Export ICS (Google Agenda ‚Äì Import manuel)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e √† exporter.")
        return

    c1, c2, c3 = st.columns(3)
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    annee = c1.selectbox("Ann√©e", ["Toutes"] + annees, index=len(annees)) if annees else "Toutes"
    mois  = c2.selectbox("Mois", ["Tous"] + list(range(1,13)))
    pfopt = ["Toutes"] + sorted(df["plateforme"].dropna().unique().tolist())
    pf    = c3.selectbox("Plateforme", pfopt)

    data = df.copy()
    if annee != "Toutes":
        data = data[data["AAAA"] == int(annee)]
    if mois != "Tous":
        data = data[data["MM"] == int(mois)]
    if pf != "Toutes":
        data = data[data["plateforme"] == pf]

    if data.empty:
        st.info("Aucune r√©servation pour ces filtres.")
        return

    ics_text = df_to_ics(data)
    st.download_button(
        "‚¨áÔ∏è T√©l√©charger reservations.ics",
        data=ics_text.encode("utf-8"),
        file_name="reservations.ics",
        mime="text/calendar"
    )
    st.caption("Dans Google Agenda : Param√®tres ‚Üí Importer & exporter ‚Üí Importer ‚Üí s√©lectionnez ce fichier .ics.")

def vue_sms(df: pd.DataFrame):
    st.title("‚úâÔ∏è SMS (envoi manuel)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    today = date.today()
    demain = today + timedelta(days=1)
    hier = today - timedelta(days=1)

    colA, colB = st.columns(2)

    with colA:
        st.subheader("üìÜ Arriv√©es demain")
        arrives = df[df["date_arrivee"] == demain].copy()
        if arrives.empty:
            st.info("Aucune arriv√©e demain.")
        else:
            for _, r in arrives.reset_index(drop=True).iterrows():
                body = sms_message_arrivee(r)
                tel = normalize_tel(r.get("telephone"))
                tel_link = f"tel:{tel}" if tel else ""
                sms_link = f"sms:{tel}?&body={quote(body)}" if tel and body else ""
                st.markdown(f"**{r.get('nom_client','')}** ‚Äî {r.get('plateforme','')}")
                st.markdown(f"Arriv√©e: {format_date_str(r.get('date_arrivee'))} ‚Ä¢ "
                            f"D√©part: {format_date_str(r.get('date_depart'))} ‚Ä¢ "
                            f"Nuit√©es: {r.get('nuitees','')}")
                st.code(body)
                c1, c2 = st.columns(2)
                if tel_link: c1.link_button(f"üìû Appeler {tel}", tel_link)
                if sms_link: c2.link_button("üì© Envoyer SMS", sms_link)
                st.divider()

    with colB:
        st.subheader("üïí Relance +24h apr√®s d√©part")
        dep_24h = df[df["date_depart"] == hier].copy()
        if dep_24h.empty:
            st.info("Aucun d√©part hier.")
        else:
            for _, r in dep_24h.reset_index(drop=True).iterrows():
                body = sms_message_depart(r)
                tel = normalize_tel(r.get("telephone"))
                tel_link = f"tel:{tel}" if tel else ""
                sms_link = f"sms:{tel}?&body={quote(body)}" if tel and body else ""
                st.markdown(f"**{r.get('nom_client','')}** ‚Äî {r.get('plateforme','')}")
                st.code(body)
                c1, c2 = st.columns(2)
                if tel_link: c1.link_button(f"üìû Appeler {tel}", tel_link)
                if sms_link: c2.link_button("üì© Envoyer SMS", sms_link)
                st.divider()

    st.subheader("‚úçÔ∏è Composer un SMS manuel")
    df_pick = df.copy()
    df_pick["id_aff"] = df_pick["nom_client"].astype(str) + " | " + df_pick["plateforme"].astype(str) + " | " + df_pick["date_arrivee"].apply(format_date_str)
    choix = st.selectbox("Choisir une r√©servation", df_pick["id_aff"])
    r = df_pick.loc[df_pick["id_aff"] == choix].iloc[0]
    tel = normalize_tel(r.get("telephone"))

    choix_type = st.radio("Mod√®le de message",
                          ["Arriv√©e (demande d‚Äôheure)","Relance apr√®s d√©part","Message libre"],
                          horizontal=True)
    if choix_type == "Arriv√©e (demande d‚Äôheure)":
        body = sms_message_arrivee(r)
    elif choix_type == "Relance apr√®s d√©part":
        body = sms_message_depart(r)
    else:
        body = st.text_area("Votre message", value="", height=160, placeholder="Tapez votre SMS ici‚Ä¶")

    c1, c2 = st.columns(2)
    with c1:
        st.code(body or "‚Äî")
    if tel and body:
        c1, c2 = st.columns(2)
        c1.link_button(f"üìû Appeler {tel}", f"tel:{tel}")
        c2.link_button("üì© Envoyer SMS", f"sms:{tel}?&body={quote(body)}")
    else:
        st.info("Renseignez un t√©l√©phone et un message.")

# ==============================  APP  ==============================

def main():
    st.set_page_config(page_title="üìñ R√©servations Villa Tobias", layout="wide")

    # Barre lat√©rale : Fichier
    st.sidebar.title("üìÅ Fichier")
    df_tmp = charger_donnees()
    # Boutons I/O g√©r√©s dans la partie 1 (bouton_telecharger / bouton_restaurer)
    bouton_telecharger(df_tmp)
    bouton_restaurer()

    # Navigation
    st.sidebar.title("üß≠ Navigation")
    onglet = st.sidebar.radio(
        "Aller √†",
        ["üìã R√©servations","‚ûï Ajouter","‚úèÔ∏è Modifier / Supprimer",
         "üìÖ Calendrier","üìä Rapport","üë• Liste clients","üì§ Export ICS","‚úâÔ∏è SMS"]
    )

    # Palette / Plateformes (√©diteur dans la sidebar ‚Äì d√©fini en partie 1)
    render_palette_editor_sidebar()

    # Charger les donn√©es (apr√®s √©ventuelle restauration)
    df = charger_donnees()

    if onglet == "üìã R√©servations":
        vue_reservations(df)   # d√©finie en partie 1
    elif onglet == "‚ûï Ajouter":
        vue_ajouter(df)
    elif onglet == "‚úèÔ∏è Modifier / Supprimer":
        vue_modifier(df)
    elif onglet == "üìÖ Calendrier":
        vue_calendrier(df)
    elif onglet == "üìä Rapport":
        vue_rapport(df)
    elif onglet == "üë• Liste clients":
        vue_clients(df)
    elif onglet == "üì§ Export ICS":
        vue_export_ics(df)
    elif onglet == "‚úâÔ∏è SMS":
        vue_sms(df)

if __name__ == "__main__":
    main()