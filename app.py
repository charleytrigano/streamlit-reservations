# app.py ‚Äî Villa Tobias (COMPLET, STABLE + Pay√© & SMS + Filtre Pay√©) + üìà Ratios
# ‚úÖ Ajout : onglet "üìà Ratios" (filtres Ann√©e / Mois / Plateforme, tableaux + bar charts)
# Le reste du comportement est inchang√©.

import streamlit as st
import pandas as pd
import numpy as np
import calendar
from datetime import date, timedelta, datetime, timezone
from io import BytesIO
import hashlib
import os
from urllib.parse import quote

FICHIER = "reservations.xlsx"

# ==============================  MAINTENANCE / CACHE  ==============================

def render_cache_section_sidebar():
    st.sidebar.markdown("---")
    st.sidebar.markdown("## üß∞ Maintenance")
    if st.sidebar.button("‚ôªÔ∏è Vider le cache et relancer"):
        try:
            st.cache_data.clear()
        except Exception:
            pass
        try:
            st.cache_resource.clear()
        except Exception:
            pass
        st.sidebar.success("Cache vid√©. Red√©marrage‚Ä¶")
        st.rerun()

# ==============================  OUTILS  ==============================

def to_date_only(x):
    if pd.isna(x) or x is None:
        return None
    try:
        return pd.to_datetime(x).date()
    except Exception:
        return None

def format_date_str(d):
    return d.strftime("%Y/%m/%d") if isinstance(d, date) else ""

def normalize_tel(x):
    """Force la lecture du t√©l√©phone en TEXTE, retire .0 √©ventuel, espaces, et garde le +."""
    if x is None or (isinstance(x, float) and np.isnan(x)):
        return ""
    s = str(x).strip()
    s = s.replace(" ", "")
    if s.endswith(".0"):
        s = s[:-2]
    return s

PLATFORM_ICONS = {"Booking": "üü¶", "Airbnb": "üü©", "Autre": "üüß"}

# ==============================  SCHEMA & CALCULS  ==============================

BASE_COLS = [
    "paye",                         # <- bool avant nom_client
    "nom_client",
    "sms_envoye",                   # <- bool apr√®s nom_client
    "plateforme","telephone",
    "date_arrivee","date_depart","nuitees",
    "prix_brut","commissions","frais_cb","prix_net",
    "menage","taxes_sejour","base",
    "charges","%", "AAAA","MM","ical_uid"
]

def ensure_schema(df: pd.DataFrame) -> pd.DataFrame:
    """Normalise les colonnes, types et recalcule tout proprement (sans toucher aux formules existantes)."""
    if df is None:
        df = pd.DataFrame()
    df = df.copy()

    # Colonnes minimales
    for c in BASE_COLS:
        if c not in df.columns:
            df[c] = np.nan

    # Defaults pour les bool√©ens
    if "paye" in df.columns:
        df["paye"] = df["paye"].fillna(False).astype(bool)
    if "sms_envoye" in df.columns:
        df["sms_envoye"] = df["sms_envoye"].fillna(False).astype(bool)

    # Dates
    for c in ["date_arrivee", "date_depart"]:
        df[c] = df[c].apply(to_date_only)

    # T√©l√©phone
    df["telephone"] = df["telephone"].apply(normalize_tel)

    # Num√©riques -> float
    for c in ["prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%","nuitees"]:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c], errors="coerce")

    # Nuit√©es
    if "date_arrivee" in df.columns and "date_depart" in df.columns:
        df["nuitees"] = [
            (d2 - d1).days if (isinstance(d1, date) and isinstance(d2, date)) else np.nan
            for d1, d2 in zip(df["date_arrivee"], df["date_depart"])
        ]

    # AAAA/MM
    if "date_arrivee" in df.columns:
        df["AAAA"] = df["date_arrivee"].apply(lambda d: d.year if isinstance(d, date) else np.nan).astype("Int64")
        df["MM"]   = df["date_arrivee"].apply(lambda d: d.month if isinstance(d, date) else np.nan).astype("Int64")

    # Valeurs par d√©faut
    df["nom_client"] = df["nom_client"].fillna("")
    df["plateforme"] = df["plateforme"].fillna("Autre")
    df["ical_uid"]   = df["ical_uid"].fillna("")

    # NaN -> 0 pour colonnes de calcul
    for c in ["prix_brut","commissions","frais_cb","menage","taxes_sejour"]:
        df[c] = df[c].fillna(0.0)

    # Calculs (valid√©s)
    df["prix_net"] = (df["prix_brut"] - df["commissions"] - df["frais_cb"]).clip(lower=0)
    df["base"]     = (df["prix_net"] - df["menage"] - df["taxes_sejour"]).clip(lower=0)
    df["charges"]  = (df["prix_brut"] - df["prix_net"]).clip(lower=0)
    with pd.option_context("mode.use_inf_as_na", True):
        df["%"] = (df["charges"] / df["prix_brut"] * 100).fillna(0)

    # Arrondis
    for c in ["prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%"]:
        df[c] = df[c].round(2)

    # Tri lecture
    ordered_cols = [c for c in BASE_COLS if c in df.columns]
    rest_cols = [c for c in df.columns if c not in ordered_cols]
    return df[ordered_cols + rest_cols]

def is_total_row(row: pd.Series) -> bool:
    name_is_total = str(row.get("nom_client","")).strip().lower() == "total"
    pf_is_total   = str(row.get("plateforme","")).strip().lower() == "total"
    d1 = row.get("date_arrivee"); d2 = row.get("date_depart")
    no_dates = not isinstance(d1, date) and not isinstance(d2, date)
    has_money = any(pd.notna(row.get(c)) and float(row.get(c) or 0) != 0
                    for c in ["prix_brut","prix_net","base","charges"])
    return name_is_total or pf_is_total or (no_dates and has_money)

def split_totals(df: pd.DataFrame):
    if df is None or df.empty:
        return df, df
    mask = df.apply(is_total_row, axis=1)
    return df[~mask].copy(), df[mask].copy()

def sort_core(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty:
        return df
    by = [c for c in ["date_arrivee","nom_client"] if c in df.columns]
    return df.sort_values(by=by, na_position="last").reset_index(drop=True)

# ==============================  EXCEL I/O  ==============================

@st.cache_data(show_spinner=False)
def _read_excel_cached(path: str, mtime: float):
    # converters: t√©l√©phone en texte ; bool√©ens g√©r√©s apr√®s via ensure_schema
    return pd.read_excel(path, converters={"telephone": normalize_tel})

def charger_donnees() -> pd.DataFrame:
    if not os.path.exists(FICHIER):
        return ensure_schema(pd.DataFrame())
    try:
        mtime = os.path.getmtime(FICHIER)
        df = _read_excel_cached(FICHIER, mtime)
        return ensure_schema(df)
    except Exception as e:
        st.error(f"Erreur de lecture Excel : {e}")
        return ensure_schema(pd.DataFrame())

def _force_telephone_text_format_openpyxl(writer, df_to_save: pd.DataFrame, sheet_name: str):
    try:
        ws = writer.sheets.get(sheet_name) or writer.sheets.get('Sheet1', None)
        if ws is None or "telephone" not in df_to_save.columns:
            return
        col_idx = df_to_save.columns.get_loc("telephone") + 1
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=col_idx, max_col=col_idx):
            row[0].number_format = '@'
    except Exception:
        pass

def sauvegarder_donnees(df: pd.DataFrame):
    df = ensure_schema(df)
    core, totals = split_totals(df)
    core = sort_core(core)
    out = pd.concat([core, totals], ignore_index=True)
    try:
        with pd.ExcelWriter(FICHIER, engine="openpyxl") as w:
            out.to_excel(w, index=False, sheet_name="Sheet1")
            _force_telephone_text_format_openpyxl(w, out, "Sheet1")
        st.cache_data.clear()
        st.success("üíæ Sauvegarde Excel effectu√©e.")
    except Exception as e:
        st.error(f"√âchec de sauvegarde Excel : {e}")

def bouton_restaurer():
    up = st.sidebar.file_uploader("üì§ Restauration xlsx", type=["xlsx"], help="Remplace le fichier actuel")
    if up is not None:
        try:
            df_new = pd.read_excel(up, converters={"telephone": normalize_tel})
            df_new = ensure_schema(df_new)
            sauvegarder_donnees(df_new)
            st.sidebar.success("‚úÖ Fichier restaur√©.")
            st.rerun()
        except Exception as e:
            st.sidebar.error(f"Erreur import: {e}")

def bouton_telecharger(df: pd.DataFrame):
    buf = BytesIO()
    try:
        ensure_schema(df).to_excel(buf, index=False, engine="openpyxl")
        data_xlsx = buf.getvalue()
    except Exception as e:
        st.sidebar.error(f"Export XLSX indisponible : {e}")
        data_xlsx = None
    st.sidebar.download_button(
        "üíæ Sauvegarde xlsx",
        data=data_xlsx if data_xlsx else b"",
        file_name="reservations.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        disabled=(data_xlsx is None),
    )

# ==============================  ICS EXPORT  ==============================

def _ics_escape(text: str) -> str:
    if text is None:
        return ""
    s = str(text)
    s = s.replace("\\", "\\\\").replace(";", "\\;").replace(",", "\\,")
    s = s.replace("\n", "\\n")
    return s

def _fmt_date_ics(d: date) -> str:
    return d.strftime("%Y%m%d")

def _dtstamp_utc_now() -> str:
    return datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")

def _stable_uid(nom_client, plateforme, d1, d2, tel, salt="v1"):
    base = f"{nom_client}|{plateforme}|{d1}|{d2}|{tel}|{salt}"
    h = hashlib.sha1(base.encode("utf-8")).hexdigest()
    return f"vt-{h}@villatobias"

def df_to_ics(df: pd.DataFrame, cal_name: str = "Villa Tobias ‚Äì R√©servations") -> str:
    df = ensure_schema(df)
    if df.empty:
        return (
            "BEGIN:VCALENDAR\r\n"
            "VERSION:2.0\r\n"
            "PRODID:-//Villa Tobias//Reservations//FR\r\n"
            f"X-WR-CALNAME:{_ics_escape(cal_name)}\r\n"
            "CALSCALE:GREGORIAN\r\n"
            "METHOD:PUBLISH\r\n"
            "END:VCALENDAR\r\n"
        )
    core, _ = split_totals(df)
    core = sort_core(core)

    lines = []
    A = lines.append
    A("BEGIN:VCALENDAR")
    A("VERSION:2.0")
    A("PRODID:-//Villa Tobias//Reservations//FR")
    A(f"X-WR-CALNAME:{_ics_escape(cal_name)}")
    A("CALSCALE:GREGORIAN")
    A("METHOD:PUBLISH")

    for _, row in core.iterrows():
        d1 = row.get("date_arrivee"); d2 = row.get("date_depart")
        if not (isinstance(d1, date) and isinstance(d2, date)):
            continue
        plateforme = str(row.get("plateforme") or "").strip()
        nom_client = str(row.get("nom_client") or "").strip()
        tel = str(row.get("telephone") or "").strip()
        summary = " - ".join([x for x in [plateforme, nom_client, tel] if x])
        brut = float(row.get("prix_brut") or 0)
        net  = float(row.get("prix_net")  or 0)
        nuitees = int(row.get("nuitees") or ((d2 - d1).days))

        desc = (
            f"Plateforme: {plateforme}\\n"
            f"Client: {nom_client}\\n"
            f"T√©l√©phone: {tel}\\n"
            f"Arrivee: {d1.strftime('%Y/%m/%d')}\\n"
            f"Depart: {d2.strftime('%Y/%m/%d')}\\n"
            f"Nuitees: {nuitees}\\n"
            f"Brut: {brut:.2f} ‚Ç¨\\nNet: {net:.2f} ‚Ç¨"
        )

        uid_existing = str(row.get("ical_uid") or "").strip()
        uid = uid_existing if uid_existing else _stable_uid(nom_client, plateforme, d1, d2, tel, salt="v1")

        A("BEGIN:VEVENT")
        A(f"UID:{_ics_escape(uid)}")
        A(f"DTSTAMP:{_dtstamp_utc_now()}")
        A(f"DTSTART;VALUE=DATE:{_fmt_date_ics(d1)}")
        A(f"DTEND;VALUE=DATE:{_fmt_date_ics(d2)}")
        A(f"SUMMARY:{_ics_escape(summary)}")
        A(f"DESCRIPTION:{_ics_escape(desc)}")
        A("END:VEVENT")

    A("END:VCALENDAR")
    return "\r\n".join(lines) + "\r\n"

# ==============================  SMS (MANUEL) ====================

def sms_message_arrivee(row: pd.Series) -> str:
    d1 = row.get("date_arrivee"); d2 = row.get("date_depart")
    d1s = d1.strftime("%Y/%m/%d") if isinstance(d1, date) else ""
    d2s = d2.strftime("%Y/%m/%d") if isinstance(d2, date) else ""
    nuitees = int(row.get("nuitees") or ((d2 - d1).days if isinstance(d1, date) and isinstance(d2, date) else 0))
    plateforme = str(row.get("plateforme") or "")
    nom = str(row.get("nom_client") or "")
    tel_aff = str(row.get("telephone") or "").strip()

    return (
        "VILLA TOBIAS\n"
        f"Plateforme : {plateforme}\n"
        f"Date d'arrivee : {d1s}  Date depart : {d2s}  Nombre de nuitees : {nuitees}\n\n"
        f"Bonjour {nom}\n"
        f"Telephone : {tel_aff}\n\n"
        "Bienvenue chez nous !\n\n "
        "Nous sommes ravis de vous accueillir bientot √† Nice. Pour organiser au mieux votre reception, merci de nous indiquer "
        "votre heure d'arrivee.\n\n "
        "Sachez egalement qu'une place de parking vous est allouee.\n\n "
        "Nous vous rappelons que le check-inse fait a partir de 2h pm et que le check-outau maximum 11h am.\n\n "
        "Vous trouverez des consignes a bagages des consignes a bagages, en cas de besoin.\n\n "
        "Nous vous souhaitons un excellent voyage et nous nous rejouissons de vous rencontrer tres bientot.\n\n "
        "Annick & Charley"
    )

def sms_message_depart(row: pd.Series) -> str:
    nom = str(row.get("nom_client") or "")
    return (
        f"Bonjour {nom},\n\n"
        "Un grand merci d‚Äôavoir choisi notre appartement pour votre s√©jour ! "
        "Nous esp√©rons que vous avez pass√© un moment aussi agr√©able que celui que nous avons eu √† vous accueillir.\n\n"
        "Si l‚Äôenvie vous prend de revenir explorer encore un peu notre ville (ou simplement retrouver le confort de notre petit cocon), "
        "sachez que notre porte vous sera toujours grande ouverte.\n\n"
        "Au plaisir de vous accueillir √† nouveau,\n"
        "Annick & Charley"
    )

# ==============================  UI HELPERS  ==============================

def kpi_chips(df: pd.DataFrame):
    core, _ = split_totals(df)
    if core.empty:
        return
    b = core["prix_brut"].sum()
    # Total charges = commissions + frais_cb (somme)
    total_comm = core["commissions"].sum()
    total_cb   = core["frais_cb"].sum()
    ch = total_comm + total_cb
    n = core["prix_net"].sum()
    base = core["base"].sum()
    nuits = core["nuitees"].sum()
    pct = (ch / b * 100) if b else 0
    pm_nuit = (b / nuits) if nuits else 0

    html = f"""
    <style>
    .chips-wrap {{ display:flex; flex-wrap:wrap; gap:8px; margin:6px 0 10px 0; }}
    .chip {{ padding:8px 10px; border-radius:10px; background: rgba(127,127,127,0.12); border: 1px solid rgba(127,127,127,0.25); font-size:0.9rem; }}
    .chip b {{ display:block; margin-bottom:3px; font-size:0.85rem; opacity:0.8; }}
    .chip .v {{ font-weight:600; }}
    </style>
    <div class="chips-wrap">
      <div class="chip"><b>Total Brut</b><div class="v">{b:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Total Net</b><div class="v">{n:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Total Base</b><div class="v">{base:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Total Charges</b><div class="v">{ch:,.2f} ‚Ç¨</div></div>
      <div class="chip"><b>Nuit√©es</b><div class="v">{int(nuits) if pd.notna(nuits) else 0}</div></div>
      <div class="chip"><b>Commission moy.</b><div class="v">{pct:.2f} %</div></div>
      <div class="chip"><b>Prix moyen/nuit</b><div class="v">{pm_nuit:,.2f} ‚Ç¨</div></div>
    </div>
    """
    st.markdown(html, unsafe_allow_html=True)

def search_box(df: pd.DataFrame) -> pd.DataFrame:
    q = st.text_input("üîé Recherche (nom, plateforme, t√©l√©phone‚Ä¶)", "")
    if not q:
        return df
    ql = q.strip().lower()
    def _match(v):
        s = "" if pd.isna(v) else str(v)
        return ql in s.lower()
    mask = (
        df["nom_client"].apply(_match) |
        df["plateforme"].apply(_match) |
        df["telephone"].apply(_match)
    )
    return df[mask].copy()

# ==============================  VUES (suite A)  ==============================

def vue_calendrier(df: pd.DataFrame):
    st.title("üìÖ Calendrier mensuel")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    cols = st.columns(2)
    mois_nom = cols[0].selectbox("Mois", list(calendar.month_name)[1:], index=max(0, date.today().month-1))
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    if not annees:
        st.warning("Aucune ann√©e disponible.")
        return
    annee = cols[1].selectbox("Ann√©e", annees, index=len(annees)-1)

    mois_index = list(calendar.month_name).index(mois_nom)
    nb_jours = calendar.monthrange(annee, mois_index)[1]
    jours = [date(annee, mois_index, j+1) for j in range(nb_jours)]
    planning = {j: [] for j in jours}

    core, _ = split_totals(df)
    for _, row in core.iterrows():
        d1 = row["date_arrivee"]; d2 = row["date_depart"]
        if not (isinstance(d1, date) and isinstance(d2, date)):
            continue
        ic = PLATFORM_ICONS.get(row["plateforme"], "‚¨ú")
        nom = str(row["nom_client"])
        for j in jours:
            if d1 <= j < d2:
                planning[j].append(f"{ic} {nom}")

    headers = ["Lun","Mar","Mer","Jeu","Ven","Sam","Dim"]
    grille = []
    for semaine in calendar.monthcalendar(annee, mois_index):
        ligne = []
        for jour in semaine:
            if jour == 0:
                ligne.append("")
            else:
                d = date(annee, mois_index, jour)
                contenu = f"{jour}\n" + "\n".join(planning.get(d, []))
                ligne.append(contenu)
        grille.append(ligne)

    st.table(pd.DataFrame(grille, columns=headers))


def vue_rapport(df: pd.DataFrame):
    st.title("üìä Rapport (d√©taill√©)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    if not annees:
        st.info("Aucune ann√©e disponible.")
        return

    c1, c2, c3 = st.columns(3)
    annee = c1.selectbox("Ann√©e", annees, index=len(annees)-1, key="rapport_annee")
    pf_opt = ["Toutes"] + sorted(df["plateforme"].dropna().unique().tolist())
    pf = c2.selectbox("Plateforme", pf_opt, key="rapport_pf")
    mois_opt = ["Tous"] + [f"{i:02d}" for i in range(1,13)]
    mois_label = c3.selectbox("Mois", mois_opt, key="rapport_mois")

    data = df[df["AAAA"] == int(annee)].copy()
    if pf != "Toutes":
        data = data[data["plateforme"] == pf]
    if mois_label != "Tous":
        data = data[data["MM"] == int(mois_label)]

    if data.empty:
        st.info("Aucune donn√©e pour ces filtres.")
        return

    detail = data.copy()
    for c in ["date_arrivee","date_depart"]:
        detail[c] = detail[c].apply(format_date_str)
    by = [c for c in ["date_arrivee","nom_client"] if c in detail.columns]
    if by:
        detail = detail.sort_values(by=by, na_position="last").reset_index(drop=True)

    cols_detail = [
        "paye","nom_client","sms_envoye","plateforme","telephone",
        "date_arrivee","date_depart","nuitees",
        "prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%"
    ]
    cols_detail = [c for c in cols_detail if c in detail.columns]
    st.dataframe(detail[cols_detail], use_container_width=True)

    core, _ = split_totals(data)
    kpi_chips(core)

    stats = (
        data.groupby(["MM","plateforme"], dropna=True)
            .agg(prix_brut=("prix_brut","sum"),
                 prix_net=("prix_net","sum"),
                 base=("base","sum"),
                 charges=("charges","sum"),
                 nuitees=("nuitees","sum"))
            .reset_index()
    )
    stats = stats.sort_values(["MM","plateforme"]).reset_index(drop=True)

    def bar_chart_metric(metric_label, metric_col):
        if stats.empty:
            return
        pvt = stats.pivot(index="MM", columns="plateforme", values=metric_col).fillna(0).sort_index()
        pvt.index = [f"{int(m):02d}" for m in pvt.index]
        st.markdown(f"**{metric_label}**")
        st.bar_chart(pvt)

    bar_chart_metric("Revenus bruts", "prix_brut")
    bar_chart_metric("Revenus nets", "prix_net")
    bar_chart_metric("Base", "base")
    bar_chart_metric("Nuit√©es", "nuitees")

    buf = BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        detail[cols_detail].to_excel(writer, index=False)
    st.download_button(
        "‚¨áÔ∏è T√©l√©charger le d√©tail (XLSX)",
        data=buf.getvalue(),
        file_name=f"rapport_detail_{annee}{'' if mois_label=='Tous' else '_'+mois_label}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

# ==============================  VUES (suite B)  ==============================

def vue_clients(df: pd.DataFrame):
    st.title("üë• Liste des clients")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    c1, c2 = st.columns(2)
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    annee = c1.selectbox("Ann√©e", annees, index=len(annees)-1) if annees else None
    mois  = c2.selectbox("Mois", ["Tous"] + [f"{i:02d}" for i in range(1,13)])

    data = df.copy()
    if annee:
        data = data[data["AAAA"] == int(annee)]
    if mois != "Tous":
        data = data[data["MM"] == int(mois)]

    if data.empty:
        st.info("Aucune donn√©e pour cette p√©riode.")
        return

    data["prix_brut/nuit"] = data.apply(lambda r: round((r["prix_brut"]/r["nuitees"]) if r["nuitees"] else 0,2), axis=1)
    data["prix_net/nuit"]  = data.apply(lambda r: round((r["prix_net"]/r["nuitees"])  if r["nuitees"] else 0,2), axis=1)

    show = data.copy()
    for c in ["date_arrivee","date_depart"]:
        show[c] = show[c].apply(format_date_str)

    cols = ["paye","nom_client","sms_envoye","plateforme","telephone","date_arrivee","date_depart",
            "nuitees","prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%","prix_brut/nuit","prix_net/nuit"]
    cols = [c for c in cols if c in show.columns]
    st.dataframe(show[cols], use_container_width=True)
    st.download_button(
        "üì• T√©l√©charger (CSV)",
        data=show[cols].to_csv(index=False).encode("utf-8"),
        file_name="liste_clients.csv",
        mime="text/csv"
    )


def vue_export_ics(df: pd.DataFrame):
    st.title("üì§ Export ICS (Google Agenda ‚Äì Import manuel)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e √† exporter.")
        return

    c1, c2, c3 = st.columns(3)
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    annee = c1.selectbox("Ann√©e", ["Toutes"] + annees, index=len(annees)) if annees else "Toutes"
    mois  = c2.selectbox("Mois", ["Tous"] + list(range(1,13)))
    pfopt = ["Toutes"] + sorted(df["plateforme"].dropna().unique().tolist())
    pf    = c3.selectbox("Plateforme", pfopt)

    data = df.copy()
    if annee != "Toutes":
        data = data[data["AAAA"] == int(annee)]
    if mois != "Tous":
        data = data[data["MM"] == int(mois)]
    if pf != "Toutes":
        data = data[data["plateforme"] == pf]

    if data.empty:
        st.info("Aucune r√©servation pour ces filtres.")
        return

    ics_text = df_to_ics(data)
    st.download_button(
        "‚¨áÔ∏è T√©l√©charger reservations.ics",
        data=ics_text.encode("utf-8"),
        file_name="reservations.ics",
        mime="text/calendar"
    )
    st.caption("Dans Google Agenda : Param√®tres ‚Üí Importer & exporter ‚Üí Importer ‚Üí s√©lectionnez ce fichier .ics.")


def vue_sms(df: pd.DataFrame):
    st.title("‚úâÔ∏è SMS (envoi manuel)")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    today = date.today()
    demain = today + timedelta(days=1)
    hier = today - timedelta(days=1)

    colA, colB = st.columns(2)

    # Arriv√©es demain
    with colA:
        st.subheader("üìÜ Arriv√©es demain")
        arrives = df[df["date_arrivee"] == demain].copy()
        if arrives.empty:
            st.info("Aucune arriv√©e demain.")
        else:
            for idx, r in arrives.reset_index(drop=True).iterrows():
                body = sms_message_arrivee(r)
                tel = normalize_tel(r.get("telephone"))
                tel_link = f"tel:{tel}" if tel else ""
                sms_link = f"sms:{tel}?&body={quote(body)}" if tel and body else ""
                st.markdown(f"**{r.get('nom_client','')}** ‚Äî {r.get('plateforme','')}")
                st.markdown(f"Arriv√©e: {format_date_str(r.get('date_arrivee'))} ‚Ä¢ "
                            f"D√©part: {format_date_str(r.get('date_depart'))} ‚Ä¢ "
                            f"Nuit√©es: {r.get('nuitees','')}")
                st.code(body)
                c1, c2 = st.columns(2)
                if tel_link: c1.link_button(f"üìû Appeler {tel}", tel_link)
                if sms_link: c2.link_button("üì© Envoyer SMS", sms_link)
                st.divider()

    # Relance +24h apr√®s d√©part
    with colB:
        st.subheader("üïí Relance +24h apr√®s d√©part")
        dep_24h = df[df["date_depart"] == hier].copy()
        if dep_24h.empty:
            st.info("Aucun d√©part hier.")
        else:
            for idx, r in dep_24h.reset_index(drop=True).iterrows():
                body = sms_message_depart(r)
                tel = normalize_tel(r.get("telephone"))
                tel_link = f"tel:{tel}" if tel else ""
                sms_link = f"sms:{tel}?&body={quote(body)}" if tel and body else ""
                st.markdown(f"**{r.get('nom_client','')}** ‚Äî {r.get('plateforme','')}")
                st.code(body)
                c1, c2 = st.columns(2)
                if tel_link: c1.link_button(f"üìû Appeler {tel}", tel_link)
                if sms_link: c2.link_button("üì© Envoyer SMS", sms_link)
                st.divider()

    # Composeur manuel
    st.subheader("‚úçÔ∏è Composer un SMS manuel")
    df_pick = df.copy()
    df_pick["id_aff"] = df_pick["nom_client"].astype(str) + " | " + df_pick["plateforme"].astype(str) + " | " + df_pick["date_arrivee"].apply(format_date_str)
    choix = st.selectbox("Choisir une r√©servation", df_pick["id_aff"])
    r = df_pick.loc[df_pick["id_aff"] == choix].iloc[0]
    tel = normalize_tel(r.get("telephone"))

    choix_type = st.radio("Mod√®le de message",
                          ["Arriv√©e (demande d‚Äôheure)","Relance apr√®s d√©part","Message libre"],
                          horizontal=True)
    if choix_type == "Arriv√©e (demande d‚Äôheure)":
        body = sms_message_arrivee(r)
    elif choix_type == "Relance apr√®s d√©part":
        body = sms_message_depart(r)
    else:
        body = st.text_area("Votre message", value="", height=160, placeholder="Tapez votre SMS ici‚Ä¶")

    c1, c2 = st.columns(2)
    with c1:
        st.code(body or "‚Äî")
    if tel and body:
        c1, c2 = st.columns(2)
        c1.link_button(f"üìû Appeler {tel}", f"tel:{tel}")
        c2.link_button("üì© Envoyer SMS", f"sms:{tel}?&body={quote(body)}")
    else:
        st.info("Renseignez un t√©l√©phone et un message.")


# -------- NOUVEAU : Vue Ratios --------
def vue_ratios(df: pd.DataFrame):
    st.title("üìà Ratios & Indicateurs")
    df = ensure_schema(df)
    if df.empty:
        st.info("Aucune donn√©e.")
        return

    # Filtres
    c1, c2, c3 = st.columns(3)
    annees = sorted([int(x) for x in df["AAAA"].dropna().unique()])
    annee = c1.selectbox("Ann√©e", annees, index=len(annees)-1)
    mois_opt = ["Tous"] + [f"{i:02d}" for i in range(1,13)]
    mois = c2.selectbox("Mois", mois_opt)
    pf_opt = ["Toutes"] + sorted(df["plateforme"].dropna().unique().tolist())
    pf = c3.selectbox("Plateforme", pf_opt)

    data = df[df["AAAA"] == int(annee)].copy()
    if mois != "Tous":
        data = data[data["MM"] == int(mois)]
    if pf != "Toutes":
        data = data[data["plateforme"] == pf]

    if data.empty:
        st.info("Aucune donn√©e pour ces filtres.")
        return

    # Agr√©gats de base
    b = data["prix_brut"].sum()
    n = data["prix_net"].sum()
    comm = data["commissions"].sum()
    cb = data["frais_cb"].sum()
    ch = comm + cb
    nuits = data["nuitees"].sum()
    sejours = len(data)

    # Ratios
    taux_comm_pond = (ch / b * 100) if b else 0
    pct_moy       = data["%"].replace([np.inf, -np.inf], np.nan).fillna(0).mean()
    prix_brut_nuit = (b / nuits) if nuits else 0
    prix_net_nuit  = (n / nuits) if nuits else 0
    duree_moy      = (nuits / sejours) if sejours else 0
    taux_paye      = (data["paye"].mean() * 100) if "paye" in data else 0
    taux_sms       = (data["sms_envoye"].mean() * 100) if "sms_envoye" in data else 0

    # Tuiles KPI
    kpi_html = f"""
    <style>
      .grid {{display:grid;grid-template-columns:repeat(4,minmax(160px,1fr));gap:10px;margin:8px 0 14px}}
      .card {{border:1px solid rgba(127,127,127,.25);border-radius:10px;padding:10px;background:rgba(127,127,127,.08)}}
      .card b {{display:block;opacity:.8;font-size:.9rem;margin-bottom:4px}}
      .v {{font-weight:600}}
    </style>
    <div class="grid">
      <div class="card"><b>Total Brut</b><div class="v">{b:,.2f} ‚Ç¨</div></div>
      <div class="card"><b>Total Net</b><div class="v">{n:,.2f} ‚Ç¨</div></div>
      <div class="card"><b>Total Charges</b><div class="v">{ch:,.2f} ‚Ç¨</div></div>
      <div class="card"><b>Nuit√©es</b><div class="v">{int(nuits) if pd.notna(nuits) else 0}</div></div>

      <div class="card"><b>Commission pond√©r√©e</b><div class="v">{taux_comm_pond:.2f} %</div></div>
      <div class="card"><b>% moyen (simple)</b><div class="v">{pct_moy:.2f} %</div></div>
      <div class="card"><b>Brut / nuit</b><div class="v">{prix_brut_nuit:,.2f} ‚Ç¨</div></div>
      <div class="card"><b>Net / nuit</b><div class="v">{prix_net_nuit:,.2f} ‚Ç¨</div></div>

      <div class="card"><b>Dur√©e moyenne s√©jour</b><div class="v">{duree_moy:.2f} nuits</div></div>
      <div class="card"><b>Taux ‚ÄúPay√©‚Äù</b><div class="v">{taux_paye:.1f} %</div></div>
      <div class="card"><b>Taux ‚ÄúSMS envoy√©‚Äù</b><div class="v">{taux_sms:.1f} %</div></div>
      <div class="card"><b>Nombre de s√©jours</b><div class="v">{sejours}</div></div>
    </div>
    """
    st.markdown(kpi_html, unsafe_allow_html=True)

    # R√©partition par plateforme
    st.subheader("R√©partition par plateforme")
    rep = data.groupby("plateforme", dropna=True).agg(
        sejours=("nom_client","count"),
        brut=("prix_brut","sum"),
        net=("prix_net","sum"),
        nuits=("nuitees","sum"),
        charges=("charges","sum")
    ).reset_index()
    if not rep.empty:
        st.dataframe(rep, use_container_width=True)
        st.markdown("**Brut par plateforme**")
        st.bar_chart(rep.set_index("plateforme")["brut"])
        st.markdown("**Nuit√©es par plateforme**")
        st.bar_chart(rep.set_index("plateforme")["nuits"])
    else:
        st.info("Aucune r√©partition disponible pour ces filtres.")

    # Tendances mensuelles (si on n‚Äôa pas fig√© le mois)
    if mois == "Tous":
        st.subheader("Tendances mensuelles")
        trend = (
            data.groupby("MM", dropna=True)
                .agg(prix_brut=("prix_brut","sum"),
                     prix_net=("prix_net","sum"),
                     nuitees=("nuitees","sum"))
                .sort_index()
        )
        trend.index = [f"{int(m):02d}" for m in trend.index]
        st.line_chart(trend)

    st.caption("NB : Les ¬´ charges ¬ª = commissions + frais CB. Les pourcentages affich√©s comprennent ces deux composantes.")


# ==============================  APP  ==============================

def main():
    st.set_page_config(page_title="üìñ R√©servations Villa Tobias", layout="wide")

    # Barre lat√©rale : Fichier
    st.sidebar.title("üìÅ Fichier")
    df_tmp = charger_donnees()
    bouton_telecharger(df_tmp)
    bouton_restaurer()

    # Navigation
    st.sidebar.title("üß≠ Navigation")
    onglet = st.sidebar.radio(
        "Aller √†",
        ["üìã R√©servations","‚ûï Ajouter","‚úèÔ∏è Modifier / Supprimer",
         "üìÖ Calendrier","üìä Rapport","üë• Liste clients","üì§ Export ICS","‚úâÔ∏è SMS","üìà Ratios"]
    )

    # Maintenance (vider cache)
    render_cache_section_sidebar()

    # Charger les donn√©es (apr√®s √©ventuelle restauration)
    df = charger_donnees()

    if onglet == "üìã R√©servations":
        vue_reservations(df)
    elif onglet == "‚ûï Ajouter":
        vue_ajouter(df)
    elif onglet == "‚úèÔ∏è Modifier / Supprimer":
        vue_modifier(df)
    elif onglet == "üìÖ Calendrier":
        vue_calendrier(df)
    elif onglet == "üìä Rapport":
        vue_rapport(df)
    elif onglet == "üë• Liste clients":
        vue_clients(df)
    elif onglet == "üì§ Export ICS":
        vue_export_ics(df)
    elif onglet == "‚úâÔ∏è SMS":
        vue_sms(df)
    elif onglet == "üìà Ratios":
        vue_ratios(df)


if __name__ == "__main__":
    main()