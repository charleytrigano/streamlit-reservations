# === PART 1: IMPORTS & CONSTANTES ===
import os
import io
import re
import pandas as pd
import numpy as np
import streamlit as st
from datetime import date, datetime
from calendar import Calendar, monthrange
from html import escape

# ============================== CONSTANTES ==============================
BASE_COLS = [
    "res_id", "nom_client", "telephone", "email",
    "plateforme", "date_arrivee", "date_depart", "nuitees", "pays"
]

DEFAULT_PALETTE = {
    "Booking": "#003580",
    "Airbnb": "#FF5A5F",
    "Abritel": "#009FE3",
    "Expedia": "#FF9900",
    "Autre": "#888888"
}

# chemins actifs (mis √† jour selon l‚Äôappartement s√©lectionn√©)
CSV_RESERVATIONS = "reservations.csv"
CSV_PLATEFORMES = "plateformes.csv"
APARTMENTS_CSV = "apartments.csv"
PAYS_CSV = "indicatifs.csv"

# URLs externes (√† adapter)
FORM_SHORT_URL = "https://urlr.me/kZuH94"
GOOGLE_FORM_VIEW = "https://docs.google.com/forms/d/e/1FAIpQLScLiaqSAY3JYriYZIk9qP75YGUyP0sxF8pzmhbIQqsSEY0jpQ/viewform?embedded=true"
GOOGLE_SHEET_EMBED_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-xxxxx/pubhtml?widget=true&headers=false"
GOOGLE_SHEET_PUBLISHED_CSV = "https://docs.google.com/spreadsheets/d/e/2PACX-xxxxx/pub?output=csv"

# ============================== STYLE ==============================
def apply_style(light: bool = False):
    """Injecte du CSS pour th√®me clair/sombre et impression."""
    bg = "#fafafa" if light else "#0f1115"
    fg = "#0f172a" if light else "#eaeef6"
    side = "#f2f2f2" if light else "#171923"
    border = "rgba(17,24,39,.08)" if light else "rgba(124,92,255,.16)"
    chip_bg = "#eee" if light else "#2a2f3a"
    chip_fg = "#222" if light else "#eee"

    st.markdown(
        f"""
        <style>
          html, body, [data-testid="stAppViewContainer"] {{
            background:{bg}; color:{fg};
          }}
          [data-testid="stSidebar"] {{
            background:{side}; border-right:1px solid {border};
          }}
          .glass {{
            background:{"rgba(255,255,255,.65)" if light else "rgba(255,255,255,.06)"};
            border:1px solid {border}; border-radius:12px; padding:12px; margin:10px 0;
          }}
          .chip {{
            display:inline-block; padding:6px 10px; border-radius:12px; margin:4px 6px;
            font-size:.86rem; background:{chip_bg}; color:{chip_fg};
          }}
          .cal-grid {{ display:grid; grid-template-columns: repeat(7, 1fr); gap:8px; }}
          .cal-cell {{ border:1px solid {border}; border-radius:10px; min-height:110px; padding:8px;
                      position:relative; overflow:hidden; background:{"#fff" if light else "#0b0d12"}; }}
          .cal-cell.outside {{ opacity:.45; }}
          .cal-date {{ position:absolute; top:6px; right:8px; font-weight:700; font-size:.9rem; opacity:.7; }}
          .resa-pill {{ padding:4px 6px; border-radius:6px; font-size:.84rem; margin-top:22px; color:#fff;
                        white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }}
          .cal-header {{ display:grid; grid-template-columns: repeat(7, 1fr); gap:8px;
                         font-weight:700; opacity:.8; margin:6px 0 8px; }}
          /* Impression A4 paysage */
          @page {{ size: A4 landscape; margin: 10mm; }}
          @media print {{
            [data-testid="stSidebar"], header, footer {{ display:none !important; }}
            .print-hide {{ display:none !important; }}
            .print-only {{ display:block !important; }}
          }}
          .print-only {{ display:none; }}
        </style>
        """,
        unsafe_allow_html=True
    )

def print_buttons(location: str = "main"):
    """Ajoute un bouton Imprimer (window.print)."""
    target = st.sidebar if location == "sidebar" else st
    target.button("üñ®Ô∏è Imprimer", key=f"print_btn_{location}")
    st.markdown(
        """
        <script>
        const labels = Array.from(parent.document.querySelectorAll('button span, button p'));
        const btn = labels.find(n => n.textContent && n.textContent.trim() === "üñ®Ô∏è Imprimer");
        if (btn) { btn.parentElement.onclick = () => window.print(); }
        </script>
        """,
        unsafe_allow_html=True
    )

# === PART 2: HELPERS FICHIERS, SCH√âMA, INDICATIFS, APPARTEMENTS ===
import uuid
import hashlib

# ---------------------- FICHIERS & CSV ----------------------
def _load_file_bytes(path: str):
    try:
        with open(path, "rb") as f:
            return f.read()
    except Exception:
        return None

def _detect_delimiter_and_read(raw: bytes) -> pd.DataFrame:
    if not raw:
        return pd.DataFrame()
    txt = raw.decode("utf-8", errors="ignore").replace("\ufeff", "")
    for sep in [";", ",", "\t", "|"]:
        try:
            df = pd.read_csv(io.StringIO(txt), sep=sep, dtype=str)
            if df.shape[1] >= 2:
                return df
        except Exception:
            pass
    try:
        return pd.read_csv(io.StringIO(txt), dtype=str)
    except Exception:
        return pd.DataFrame()

# ---------------------- TYPES & CONVERSIONS ----------------------
def _as_series(x, index=None):
    if isinstance(x, pd.Series):
        return x
    if isinstance(x, (list, tuple, np.ndarray)):
        s = pd.Series(list(x))
        if index is not None and len(index) == len(s):
            s.index = index
        return s
    if index is None:
        return pd.Series([x])
    return pd.Series([x] * len(index), index=index)

def _to_bool_series(s: pd.Series) -> pd.Series:
    s = _as_series(s)
    out = (
        s.astype(str)
         .str.strip()
         .str.lower()
         .isin(["true", "1", "oui", "vrai", "yes", "y", "t"])
    )
    return out.fillna(False).astype(bool)

def _to_num(s: pd.Series) -> pd.Series:
    s = _as_series(s)
    sc = (
        s.astype(str)
         .str.replace("‚Ç¨", "", regex=False)
         .str.replace(" ", "", regex=False)
         .str.replace(",", ".", regex=False)
         .str.strip()
    )
    return pd.to_numeric(sc, errors="coerce")

def _to_date(s: pd.Series) -> pd.Series:
    s = _as_series(s)
    d = pd.to_datetime(s, errors="coerce", dayfirst=True)
    if len(d) and d.isna().mean() > 0.5:
        d2 = pd.to_datetime(s, errors="coerce", format="%Y-%m-%d")
        d = d.fillna(d2)
    return d.dt.date

# ---------------------- UID iCal stable ----------------------
def build_stable_uid(row) -> str:
    base = f"{row.get('res_id','')}{row.get('nom_client','')}{row.get('telephone','')}"
    return hashlib.sha1(base.encode()).hexdigest() + "@villa-tobias"

# ---------------------- INDICATIFS (CSV) ----------------------
_DEFAULT_INDICATIFS = [
    {"prefix": "33",  "pays": "France",             "flag": "üá´üá∑"},
    {"prefix": "34",  "pays": "Espagne",            "flag": "üá™üá∏"},
    {"prefix": "39",  "pays": "Italie",             "flag": "üáÆüáπ"},
    {"prefix": "44",  "pays": "Royaume-Uni",        "flag": "üá¨üáß"},
    {"prefix": "49",  "pays": "Allemagne",          "flag": "üá©üá™"},
    {"prefix": "41",  "pays": "Suisse",             "flag": "üá®üá≠"},
    {"prefix": "32",  "pays": "Belgique",           "flag": "üáßüá™"},
    {"prefix": "352", "pays": "Luxembourg",         "flag": "üá±üá∫"},
    {"prefix": "351", "pays": "Portugal",           "flag": "üáµüáπ"},
    {"prefix": "1",   "pays": "√âtats-Unis/Canada",  "flag": "üá∫üá∏"},
    {"prefix": "61",  "pays": "Australie",          "flag": "üá¶üá∫"},
    {"prefix": "64",  "pays": "Nouvelle-Z√©lande",   "flag": "üá≥üáø"},
    {"prefix": "420", "pays": "Tch√©quie",           "flag": "üá®üáø"},
    {"prefix": "421", "pays": "Slovaquie",          "flag": "üá∏üá∞"},
    {"prefix": "36",  "pays": "Hongrie",            "flag": "üá≠üá∫"},
    {"prefix": "40",  "pays": "Roumanie",           "flag": "üá∑üá¥"},
    {"prefix": "30",  "pays": "Gr√®ce",              "flag": "üá¨üá∑"},
    {"prefix": "31",  "pays": "Pays-Bas",           "flag": "üá≥üá±"},
    {"prefix": "353", "pays": "Irlande",            "flag": "üáÆüá™"},
    {"prefix": "358", "pays": "Finlande",           "flag": "üá´üáÆ"},
    {"prefix": "46",  "pays": "Su√®de",              "flag": "üá∏üá™"},
    {"prefix": "47",  "pays": "Norv√®ge",            "flag": "üá≥üá¥"},
    {"prefix": "48",  "pays": "Pologne",            "flag": "üáµüá±"},
    {"prefix": "43",  "pays": "Autriche",           "flag": "üá¶üáπ"},
    {"prefix": "45",  "pays": "Danemark",           "flag": "üá©üá∞"},
    {"prefix": "90",  "pays": "Turquie",            "flag": "üáπüá∑"},
    {"prefix": "212", "pays": "Maroc",              "flag": "üá≤üá¶"},
    {"prefix": "216", "pays": "Tunisie",            "flag": "üáπüá≥"},
    {"prefix": "971", "pays": "√âmirats Arabes Unis","flag": "üá¶üá™"},
]

def _ensure_indicatifs_file():
    """Cr√©e indicatifs.csv s'il n'existe pas, avec un jeu par d√©faut."""
    if not os.path.exists(PAYS_CSV):
        pd.DataFrame(_DEFAULT_INDICATIFS).to_csv(
            PAYS_CSV, index=False, encoding="utf-8", lineterminator="\n"
        )

def _read_indicatifs_csv() -> pd.DataFrame:
    """Lit la table des indicatifs (prefix,pays,flag)."""
    _ensure_indicatifs_file()
    raw = _load_file_bytes(PAYS_CSV)
    df = _detect_delimiter_and_read(raw) if raw else pd.DataFrame()
    if df is None or df.empty:
        return pd.DataFrame(_DEFAULT_INDICATIFS)
    df.columns = [c.strip().lower() for c in df.columns]
    for c in ("prefix", "pays", "flag"):
        if c not in df.columns:
            df[c] = ""
    df["prefix"] = df["prefix"].astype(str).str.strip()
    df["pays"] = df["pays"].astype(str).str.strip()
    df["flag"] = df["flag"].astype(str).str.strip()
    df = df[(df["prefix"] != "") & (df["pays"] != "")]
    df = df.drop_duplicates(subset=["prefix"], keep="first")
    return df[["prefix", "pays", "flag"]]

def _write_indicatifs_csv(df: pd.DataFrame):
    """√âcrit la table indicatifs en CSV."""
    df2 = df.copy()
    df2 = df2[["prefix", "pays", "flag"]]
    df2["prefix"] = df2["prefix"].astype(str).str.strip()
    df2["pays"] = df2["pays"].astype(str).str.strip()
    df2["flag"] = df2["flag"].astype(str).str.strip()
    df2 = df2[(df2["prefix"] != "") & (df2["pays"] != "")]
    df2 = df2.drop_duplicates(subset=["prefix"], keep="first")
    df2.to_csv(PAYS_CSV, index=False, encoding="utf-8", lineterminator="\n")

def _phone_country(phone: str) -> str:
    """D√©duit le pays √† partir de l'indicatif dans indicatifs.csv (fallback simple)."""
    p = str(phone or "").strip()
    if not p:
        return ""
    # normalisation : +CCC..., 00CCC..., 0...
    if p.startswith("+"):
        p1 = p[1:]
    elif p.startswith("00"):
        p1 = p[2:]
    elif p.startswith("0"):
        # cas France local
        return "France"
    else:
        p1 = p

    ind = _read_indicatifs_csv()
    # on matche le prefixe le plus long d'abord
    for prefix in sorted(ind["prefix"].tolist(), key=lambda x: -len(str(x))):
        if str(p1).startswith(str(prefix)):
            return ind.set_index("prefix").loc[str(prefix), "pays"]
    return "Inconnu"

def _format_phone_e164(phone: str) -> str:
    """Formate un num√©ro en E.164 grossier (fallback France si 0-d√©but)."""
    s = re.sub(r"\D", "", str(phone or ""))
    if not s:
        return ""
    if s.startswith("33"):
        return "+" + s
    if s.startswith("0"):
        return "+33" + s[1:]
    return "+" + s

# ---------------------- NORMALISATION & SAUVEGARDE ----------------------
def ensure_schema(df_in: pd.DataFrame) -> pd.DataFrame:
    if df_in is None or len(df_in) == 0:
        return pd.DataFrame(columns=BASE_COLS)

    df = df_in.copy()
    df.columns = df.columns.astype(str).str.strip()

    # Renommages fr√©quents
    rename_map = {
        "Pay√©": "paye",
        "Client": "nom_client",
        "Plateforme": "plateforme",
        "Arriv√©e": "date_arrivee",
        "D√©part": "date_depart",
        "Nuits": "nuitees",
        "Brut (‚Ç¨)": "prix_brut",
    }
    df.rename(columns=rename_map, inplace=True)

    # colonnes minimales
    for c in BASE_COLS:
        if c not in df.columns:
            df[c] = pd.Series([None] * len(df), index=df.index)

    # types
    for c in df.columns:
        df[c] = _as_series(df[c], index=df.index)

    df["date_arrivee"] = _to_date(df["date_arrivee"])
    df["date_depart"] = _to_date(df["date_depart"])

    # calcule nuitees si dates OK
    mask_ok = pd.notna(df["date_arrivee"]) & pd.notna(df["date_depart"])
    if mask_ok.any():
        da = pd.to_datetime(df.loc[mask_ok, "date_arrivee"])
        dd = pd.to_datetime(df.loc[mask_ok, "date_depart"])
        df.loc[mask_ok, "nuitees"] = (dd - da).dt.days.clip(lower=0).astype(float)

    # res_id & ical_uid
    miss_res = df["res_id"].isna() | (df["res_id"].astype(str).str.strip() == "")
    if miss_res.any():
        df.loc[miss_res, "res_id"] = [str(uuid.uuid4()) for _ in range(int(miss_res.sum()))]

    miss_uid = df.get("ical_uid", pd.Series([None] * len(df))).isna() | (
        df.get("ical_uid", pd.Series([""] * len(df))).astype(str).str.strip() == ""
    )
    if miss_uid.any():
        if "ical_uid" not in df.columns:
            df["ical_uid"] = ""
        df.loc[miss_uid, "ical_uid"] = df.loc[miss_uid].apply(build_stable_uid, axis=1)

    # nettoyage textes
    for c in ["nom_client", "plateforme", "telephone", "email", "pays"]:
        df[c] = df[c].astype(str).replace({"nan": "", "None": ""}).str.strip()

    # pays √† partir du t√©l√©phone si vide
    need = df["pays"].eq("") | df["pays"].isna()
    if need.any():
        df.loc[need, "pays"] = df.loc[need, "telephone"].apply(_phone_country)

    return df[BASE_COLS]

def sauvegarder_donnees(df: pd.DataFrame) -> bool:
    """√âcrit le CSV des r√©servations pour l‚Äôappartement actif."""
    try:
        out = ensure_schema(df).copy()
        for col in ["date_arrivee", "date_depart"]:
            out[col] = pd.to_datetime(out[col], errors="coerce").dt.strftime("%d/%m/%Y")
        out.to_csv(CSV_RESERVATIONS, sep=";", index=False, encoding="utf-8", lineterminator="\n")
        st.cache_data.clear()
        return True
    except Exception as e:
        st.error(f"Erreur de sauvegarde : {e}")
        return False

@st.cache_data(show_spinner=False)
def charger_donnees(csv_reservations: str, csv_plateformes: str):
    """Charge df r√©servations + palette couleurs depuis les fichiers de l‚Äôappartement."""
    # cr√©er si manquants
    for fichier, header in [
        (csv_reservations, "nom_client,email,telephone,plateforme,date_arrivee,date_depart,nuitees,pays\n"),
        (csv_plateformes, "plateforme,couleur\nBooking,#003580\nAirbnb,#FF5A5F\nAbritel,#009FE3\nAutre,#888888\n"),
    ]:
        if not os.path.exists(fichier):
            with open(fichier, "w", encoding="utf-8", newline="") as f:
                f.write(header)

    # reservations
    raw = _load_file_bytes(csv_reservations)
    base_df = _detect_delimiter_and_read(raw) if raw is not None else pd.DataFrame()
    df = ensure_schema(base_df)

    # palette
    rawp = _load_file_bytes(csv_plateformes)
    palette = DEFAULT_PALETTE.copy()
    if rawp is not None:
        try:
            pal_df = _detect_delimiter_and_read(rawp)
            pal_df.columns = pal_df.columns.astype(str).str.strip()
            if {"plateforme", "couleur"}.issubset(pal_df.columns):
                palette = dict(zip(pal_df["plateforme"], pal_df["couleur"]))
        except Exception as e:
            st.warning(f"Erreur de palette : {e}")

    return df, palette

# ---------------------- APPARTEMENTS ----------------------
def _read_apartments_csv() -> pd.DataFrame:
    """Lit apartments.csv -> colonnes {slug,name} nettoy√©es."""
    if not os.path.exists(APARTMENTS_CSV):
        return pd.DataFrame(columns=["slug", "name"])
    raw = _load_file_bytes(APARTMENTS_CSV)
    df = _detect_delimiter_and_read(raw) if raw else pd.DataFrame()
    if df is None or df.empty:
        return pd.DataFrame(columns=["slug", "name"])
    df.columns = [str(c).strip().lower() for c in df.columns]
    if "slug" not in df.columns:
        df["slug"] = ""
    if "name" not in df.columns:
        df["name"] = ""
    df["slug"] = (
        df["slug"].astype(str)
        .str.replace("\ufeff", "", regex=False)
        .str.strip()
        .str.replace(" ", "-", regex=False)
        .str.replace("_", "-", regex=False)
        .str.lower()
    )
    df["name"] = df["name"].astype(str).str.replace("\ufeff", "", regex=False).str.strip()
    df = df[(df["slug"] != "") & (df["name"] != "")]
    df = df.drop_duplicates(subset=["slug"], keep="first")
    return df[["slug", "name"]]

def _current_apartment() -> dict | None:
    slug = st.session_state.get("apt_slug", "")
    name = st.session_state.get("apt_name", "")
    if slug and name:
        return {"slug": slug, "name": name}
    return None

def _select_apartment_sidebar() -> bool:
    """Bloc de s√©lection d‚Äôappartement dans la sidebar. Retourne True si changement."""
    st.sidebar.markdown("### Appartement")
    apts = _read_apartments_csv()
    if apts.empty:
        st.sidebar.warning("Aucun appartement trouv√© dans apartments.csv")
        return False

    options = apts["slug"].tolist()
    labels = {r["slug"]: r["name"] for _, r in apts.iterrows()}

    cur_slug = st.session_state.get("apt_slug", options[0])
    if cur_slug not in options:
        cur_slug = options[0]
    default_idx = options.index(cur_slug)

    slug = st.sidebar.selectbox(
        "Choisir un appartement",
        options=options,
        index=default_idx,
        format_func=lambda s: labels.get(s, s),
        key="apt_slug_selectbox",
    )
    name = labels.get(slug, slug)

    changed = (slug != st.session_state.get("apt_slug", "") or name != st.session_state.get("apt_name", ""))

    # m√©morise et synchronise
    st.session_state["apt_slug"] = slug
    st.session_state["apt_name"] = name
    st.session_state["CSV_RESERVATIONS"] = f"reservations_{slug}.csv"
    st.session_state["CSV_PLATEFORMES"] = f"plateformes_{slug}.csv"

    global CSV_RESERVATIONS, CSV_PLATEFORMES
    CSV_RESERVATIONS = st.session_state["CSV_RESERVATIONS"]
    CSV_PLATEFORMES = st.session_state["CSV_PLATEFORMES"]

    st.sidebar.success(f"Connect√© : {name}")
    try:
        print_buttons(location="sidebar")
    except Exception:
        pass

    return changed

def _load_data_for_active_apartment():
    """Wrapper centralis√© pour charger df+palette de l‚Äôappartement actif."""
    csv_res = st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)
    csv_pal = st.session_state.get("CSV_PLATEFORMES", CSV_PLATEFORMES)
    try:
        return charger_donnees(csv_res, csv_pal)
    except TypeError:
        # au cas o√π la signature changerait
        return charger_donnees(CSV_RESERVATIONS, CSV_PLATEFORMES)
    except Exception:
        return pd.DataFrame(columns=BASE_COLS), DEFAULT_PALETTE.copy()

# === PART 3: VUES ACCUEIL / R√âSERVATIONS / AJOUTER / MODIFIER / PLATEFORMES ===

def vue_accueil(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üè† Accueil ‚Äî {apt_name}")
    print_buttons()

    today = date.today()
    tomorrow = today + timedelta(days=1)
    st.write(f"**Aujourd'hui : {today.strftime('%d/%m/%Y')}**")

    dfv = df.copy()
    dfv["date_arrivee"] = _to_date(dfv["date_arrivee"])
    dfv["date_depart"]  = _to_date(dfv["date_depart"])

    arr = dfv[dfv["date_arrivee"] == today][["nom_client","telephone","plateforme","pays"]]
    dep = dfv[dfv["date_depart"]  == today][["nom_client","telephone","plateforme","pays"]]
    arr_plus1 = dfv[dfv["date_arrivee"] == tomorrow][["nom_client","telephone","plateforme","pays"]]

    c1, c2, c3 = st.columns(3)
    with c1:
        st.subheader("üü¢ Arriv√©es du jour")
        st.dataframe(arr if not arr.empty else pd.DataFrame({"info":["Aucune arriv√©e."]}), use_container_width=True)
    with c2:
        st.subheader("üî¥ D√©parts du jour")
        st.dataframe(dep if not dep.empty else pd.DataFrame({"info":["Aucun d√©part."]}), use_container_width=True)
    with c3:
        st.subheader("üü† Arriv√©es J+1 (demain)")
        st.dataframe(arr_plus1 if not arr_plus1.empty else pd.DataFrame({"info":["Aucune arriv√©e demain."]}), use_container_width=True)


def vue_reservations(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìã R√©servations ‚Äî {apt_name}")
    print_buttons()
    if df is None or df.empty:
        st.info("Aucune r√©servation.")
        return

    dfa = df.copy()
    dfa["date_arrivee_dt"] = pd.to_datetime(dfa["date_arrivee"], errors="coerce")
    years_avail  = sorted(dfa["date_arrivee_dt"].dt.year.dropna().astype(int).unique().tolist(), reverse=True)
    months_avail = list(range(1, 13))
    plats_avail  = sorted(dfa["plateforme"].astype(str).str.strip().replace({"":np.nan}).dropna().unique().tolist())

    c1, c2, c3, c4 = st.columns(4)
    year  = c1.selectbox("Ann√©e", ["Toutes"]+years_avail, index=0)
    month = c2.selectbox("Mois",  ["Tous"]+months_avail, index=0)
    plat  = c3.selectbox("Plateforme", ["Toutes"]+plats_avail, index=0)
    payf  = c4.selectbox("Paiement", ["Tous","Pay√© uniquement","Non pay√© uniquement"], index=0)

    data = dfa.copy()
    if year != "Toutes":
        data = data[data["date_arrivee_dt"].dt.year == int(year)]
    if month != "Tous":
        data = data[data["date_arrivee_dt"].dt.month == int(month)]
    if plat != "Toutes":
        data = data[data["plateforme"].astype(str).str.strip() == str(plat).strip()]
    if payf == "Pay√© uniquement":
        data = data[_to_bool_series(data["paye"]) == True]
    elif payf == "Non pay√© uniquement":
        data = data[_to_bool_series(data["paye"]) == False]

    brut    = float(pd.to_numeric(data["prix_brut"], errors="coerce").fillna(0).sum())
    net     = float(pd.to_numeric(data["prix_net"],  errors="coerce").fillna(0).sum())
    base    = float(pd.to_numeric(data["base"],     errors="coerce").fillna(0).sum())
    nuits   = int(pd.to_numeric(data["nuitees"],    errors="coerce").fillna(0).sum())
    charges = float(pd.to_numeric(data["charges"],  errors="coerce").fillna(0).sum())
    adr     = (net/nuits) if nuits>0 else 0.0

    st.markdown(
        f"""
        <div class='glass'>
          <span class='chip'><small>Total brut</small><br><strong>{brut:,.2f} ‚Ç¨</strong></span>
          <span class='chip'><small>Total net</small><br><strong>{net:,.2f} ‚Ç¨</strong></span>
          <span class='chip'><small>Charges</small><br><strong>{charges:,.2f} ‚Ç¨</strong></span>
          <span class='chip'><small>Base</small><br><strong>{base:,.2f} ‚Ç¨</strong></span>
          <span class='chip'><small>Nuit√©es</small><br><strong>{nuits}</strong></span>
          <span class='chip'><small>ADR (net)</small><br><strong>{adr:,.2f} ‚Ç¨</strong></span>
        </div>
        """.replace(",", " "),
        unsafe_allow_html=True
    )
    st.markdown("---")

    order_idx = pd.to_datetime(data["date_arrivee"], errors="coerce").sort_values(ascending=False).index
    data = data.loc[order_idx]
    st.dataframe(data.drop(columns=["date_arrivee_dt"]), use_container_width=True)


def vue_ajouter(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"‚ûï Ajouter une r√©servation ‚Äî {apt_name}")
    print_buttons()

    with st.form("form_add", clear_on_submit=True):
        c1, c2 = st.columns(2)
        with c1:
            nom = st.text_input("Nom du client")
            email = st.text_input("Email", value="")
            tel = st.text_input("T√©l√©phone")
            arr = st.date_input("Arriv√©e", date.today())
            dep = st.date_input("D√©part",  date.today()+timedelta(days=1))
        with c2:
            plat = st.selectbox("Plateforme", list(palette.keys()))
            brut = st.number_input("Prix brut (‚Ç¨)", min_value=0.0, step=0.01)
            commissions = st.number_input("Commissions (‚Ç¨)", min_value=0.0, step=0.01)
            frais_cb = st.number_input("Frais CB (‚Ç¨)", min_value=0.0, step=0.01)
            menage = st.number_input("M√©nage (‚Ç¨)", min_value=0.0, step=0.01)
            taxes  = st.number_input("Taxes s√©jour (‚Ç¨)", min_value=0.0, step=0.01)
            paye   = st.checkbox("Pay√©", value=False)

        if st.form_submit_button("‚úÖ Ajouter"):
            if not nom or dep <= arr:
                st.error("Veuillez entrer un nom et des dates valides.")
            else:
                nuitees = (dep-arr).days
                new = pd.DataFrame([{
                    "nom_client": nom, "email": email, "telephone": tel, "plateforme": plat,
                    "date_arrivee": arr, "date_depart": dep, "nuitees": nuitees,
                    "prix_brut": brut, "commissions": commissions, "frais_cb": frais_cb,
                    "menage": menage, "taxes_sejour": taxes, "paye": paye
                }])
                df2 = ensure_schema(pd.concat([df, new], ignore_index=True))
                if sauvegarder_donnees(df2):
                    st.success(f"R√©servation pour {nom} ajout√©e.")
                    st.rerun()


def vue_modifier(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"‚úèÔ∏è Modifier / Supprimer ‚Äî {apt_name}")
    print_buttons()
    if df.empty:
        st.info("Aucune r√©servation.")
        return

    df_sorted = df.sort_values(by="date_arrivee", ascending=False).reset_index()
    options = [f"{i}: {r.get('nom_client','')} ({r.get('date_arrivee','')})" for i, r in df_sorted.iterrows()]
    sel = st.selectbox("S√©lectionnez une r√©servation", options=options, index=None)
    if not sel:
        return

    idx = int(sel.split(":")[0])
    original_idx = df_sorted.loc[idx, "index"]
    row = df.loc[original_idx]

    with st.form(f"form_mod_{original_idx}"):
        c1, c2 = st.columns(2)
        with c1:
            nom = st.text_input("Nom", value=row.get("nom_client","") or "")
            email = st.text_input("Email", value=row.get("email","") or "")
            tel = st.text_input("T√©l√©phone", value=row.get("telephone","") or "")
            arrivee = st.date_input("Arriv√©e", value=row.get("date_arrivee"))
            depart  = st.date_input("D√©part",  value=row.get("date_depart"))
        with c2:
            palette_keys = list(palette.keys())
            plat_idx = palette_keys.index(row.get("plateforme")) if row.get("plateforme") in palette_keys else 0
            plat = st.selectbox("Plateforme", options=palette_keys, index=plat_idx)
            paye = st.checkbox("Pay√©", value=bool(row.get("paye", False)))
            brut = float(pd.to_numeric(row.get("prix_brut"), errors="coerce") or 0)
            commissions = float(pd.to_numeric(row.get("commissions"), errors="coerce") or 0)
            frais_cb = float(pd.to_numeric(row.get("frais_cb"), errors="coerce") or 0)
            menage   = float(pd.to_numeric(row.get("menage"), errors="coerce") or 0)
            taxes    = float(pd.to_numeric(row.get("taxes_sejour"), errors="coerce") or 0)
            brut = st.number_input("Prix brut", min_value=0.0, step=0.01, value=brut)
            commissions = st.number_input("Commissions", min_value=0.0, step=0.01, value=commissions)
            frais_cb = st.number_input("Frais CB", min_value=0.0, step=0.01, value=frais_cb)
            menage   = st.number_input("M√©nage",   min_value=0.0, step=0.01, value=menage)
            taxes    = st.number_input("Taxes s√©jour", min_value=0.0, step=0.01, value=taxes)

        b1, b2 = st.columns([0.7, 0.3])
        if b1.form_submit_button("üíæ Enregistrer"):
            updates = {
                "nom_client": nom, "email": email, "telephone": tel, "date_arrivee": arrivee, "date_depart": depart,
                "plateforme": plat, "paye": paye, "prix_brut": brut, "commissions": commissions, "frais_cb": frais_cb,
                "menage": menage, "taxes_sejour": taxes
            }
            for k, v in updates.items():
                df.loc[original_idx, k] = v
            if sauvegarder_donnees(df):
                st.success("Modifi√© ‚úÖ"); st.rerun()

        if b2.form_submit_button("üóëÔ∏è Supprimer"):
            df2 = df.drop(index=original_idx)
            if sauvegarder_donnees(df2):
                st.warning("Supprim√©."); st.rerun()


def vue_plateformes(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üé® Plateformes & couleurs ‚Äî {apt_name}")
    print_buttons()

    HAS_COLORCOL = hasattr(getattr(st, "column_config", object), "ColorColumn")
    plats_df = sorted(
        df.get("plateforme", pd.Series([], dtype=str))
          .astype(str).str.strip().replace({"nan": ""})
          .dropna().unique().tolist()
    )
    all_plats = sorted(set(list(palette.keys()) + plats_df))
    base = pd.DataFrame({
        "plateforme": all_plats,
        "couleur": [palette.get(p, "#666666") for p in all_plats],
    })

    if HAS_COLORCOL:
        col_cfg = {
            "plateforme": st.column_config.TextColumn("Plateforme"),
            "couleur": st.column_config.ColorColumn("Couleur (hex)"),
        }
    else:
        col_cfg = {
            "plateforme": st.column_config.TextColumn("Plateforme"),
            "couleur": st.column_config.TextColumn(
                "Couleur (hex)",
                help="Ex: #003580",
                validate=r"^#([0-9A-Fa-f]{6})$",
                width="small",
            ),
        }

    edited = st.data_editor(
        base,
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True,
        column_config=col_cfg,
        key="palette_editor"
    )

    if not HAS_COLORCOL and not edited.empty:
        chips = []
        for _, r in edited.iterrows():
            plat = str(r["plateforme"]).strip()
            col = str(r["couleur"]).strip()
            if not plat:
                continue
            ok = bool(re.match(r"^#([0-9A-Fa-f]{6})$", col or ""))
            chips.append(
                "<span style='display:inline-block;margin:4px 6px;padding:6px 10px;"
                f"border-radius:12px;background:{col if ok else '#666'};color:#fff;'>{plat} {col}</span>"
            )
        if chips:
            st.markdown("".join(chips), unsafe_allow_html=True)

    c1, c2, c3 = st.columns([0.5, 0.3, 0.2])
    if c1.button("üíæ Enregistrer la palette", key="save_palette_btn"):
        try:
            to_save = edited.copy()
            to_save["plateforme"] = to_save["plateforme"].astype(str).str.strip()
            to_save["couleur"]    = to_save["couleur"].astype(str).str.strip()
            to_save = to_save[to_save["plateforme"] != ""].drop_duplicates(subset=["plateforme"])
            if not HAS_COLORCOL:
                ok = to_save["couleur"].str.match(r"^#([0-9A-Fa-f]{6})$")
                to_save.loc[~ok, "couleur"] = "#666666"
            to_save.to_csv(CSV_PLATEFORMES, sep=";", index=False, encoding="utf-8", lineterminator="\n")
            st.success("Palette enregistr√©e ‚úÖ"); st.cache_data.clear(); st.rerun()
        except Exception as e:
            st.error(f"Erreur : {e}")

    if c2.button("‚Ü©Ô∏è Palette par d√©faut", key="restore_palette_btn"):
        try:
            pd.DataFrame(list(DEFAULT_PALETTE.items()), columns=["plateforme", "couleur"]).to_csv(
                CSV_PLATEFORMES, sep=";", index=False, encoding="utf-8", lineterminator="\n"
            )
            st.success("Palette restaur√©e."); st.cache_data.clear(); st.rerun()
        except Exception as e:
            st.error(f"Erreur : {e}")

    if c3.button("üîÑ Recharger", key="reload_palette_btn"):
        st.cache_data.clear(); st.rerun()

# === PART 4: CALENDRIER / RAPPORT / EXPORT ICS / GOOGLE SHEET / CLIENTS / ID ===

from html import escape  # pour s√©curiser les attributs HTML (title)

def vue_calendrier(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìÖ Calendrier (grille mensuelle) ‚Äî {apt_name}")
    print_buttons()

    dfv = df.dropna(subset=["date_arrivee", "date_depart"]).copy()
    if dfv.empty:
        st.info("Aucune r√©servation √† afficher.")
        return

    today = date.today()
    years = sorted(
        pd.to_datetime(dfv["date_arrivee"], errors="coerce")
          .dt.year.dropna().astype(int).unique(), reverse=True
    )
    annee = st.selectbox("Ann√©e", options=years if years else [today.year], index=0)
    mois  = st.selectbox("Mois",  options=list(range(1, 13)), index=today.month - 1)

    st.markdown(
        "<div class='cal-header'><div>Lun</div><div>Mar</div><div>Mer</div>"
        "<div>Jeu</div><div>Ven</div><div>Sam</div><div>Dim</div></div>",
        unsafe_allow_html=True
    )

    # normalise en dates
    dfv["date_arrivee"] = _to_date(dfv["date_arrivee"])
    dfv["date_depart"]  = _to_date(dfv["date_depart"])

    def day_resas(d):
        mask = (dfv["date_arrivee"] <= d) & (dfv["date_depart"] > d)
        return dfv[mask]

    cal = Calendar(firstweekday=0)
    html_parts = ["<div class='cal-grid'>"]
    for week in cal.monthdatescalendar(annee, mois):
        for d in week:
            outside = (d.month != mois)
            classes = "cal-cell outside" if outside else "cal-cell"
            cell = f"<div class='{classes}'>"
            cell += f"<div class='cal-date'>{d.day}</div>"
            if not outside:
                rs = day_resas(d)
                if not rs.empty:
                    for _, r in rs.iterrows():
                        color = palette.get(r.get("plateforme"), "#888")
                        name  = str(r.get("nom_client") or "")[:22]
                        title_txt = escape(str(r.get("nom_client", "")), quote=True)
                        cell += (
                            "<div class='resa-pill' "
                            f"style='background:{color}' "
                            f"title='{title_txt}'>"
                            f"{name}</div>"
                        )
            cell += "</div>"
            html_parts.append(cell)
    html_parts.append("</div>")
    st.markdown("".join(html_parts), unsafe_allow_html=True)
    st.markdown("---")

    # D√©tail du mois
    st.subheader("D√©tail du mois s√©lectionn√©")
    debut_mois = date(annee, mois, 1)
    fin_mois   = date(annee, mois, monthrange(annee, mois)[1])
    rows = dfv[(dfv["date_arrivee"] <= fin_mois) & (dfv["date_depart"] > debut_mois)].copy()

    if rows.empty:
        st.info("Aucune r√©servation sur ce mois.")
    else:
        plats = ["Toutes"] + sorted(rows["plateforme"].dropna().unique().tolist())
        plat = st.selectbox("Filtrer par plateforme", plats, index=0, key="cal_plat")
        if plat != "Toutes":
            rows = rows[rows["plateforme"] == plat]

        brut  = float(pd.to_numeric(rows["prix_brut"], errors="coerce").fillna(0).sum())
        net   = float(pd.to_numeric(rows["prix_net"],  errors="coerce").fillna(0).sum())
        nuits = int(pd.to_numeric(rows["nuitees"],    errors="coerce").fillna(0).sum())

        st.markdown(
            f"""
            <div class='glass'>
              <span class='chip'><small>Total brut</small><br><strong>{brut:,.2f} ‚Ç¨</strong></span>
              <span class='chip'><small>Total net</small><br><strong>{net:,.2f} ‚Ç¨</strong></span>
              <span class='chip'><small>Nuit√©es</small><br><strong>{nuits}</strong></span>
            </div>
            """.replace(",", " "),
            unsafe_allow_html=True
        )
        st.dataframe(
            rows[["nom_client", "plateforme", "date_arrivee", "date_depart", "nuitees", "paye", "pays"]],
            use_container_width=True
        )


def vue_rapport(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìä Rapport ‚Äî {apt_name}")
    print_buttons()

    if df is None or df.empty:
        st.info("Aucune donn√©e.")
        return

    dfa = df.copy()
    dfa["date_arrivee_dt"] = pd.to_datetime(dfa["date_arrivee"], errors="coerce")
    dfa["date_depart_dt"]  = pd.to_datetime(dfa["date_depart"],  errors="coerce")

    years_avail  = sorted(dfa["date_arrivee_dt"].dt.year.dropna().astype(int).unique().tolist(), reverse=True)
    months_avail = list(range(1, 13))
    plats_avail  = sorted(dfa["plateforme"].astype(str).str.strip().replace({"":np.nan}).dropna().unique().tolist())

    # calcul pays fallback par tel
    dfa["_pays"] = dfa["pays"].replace("", np.nan)
    dfa["_pays"] = dfa["_pays"].fillna(dfa["telephone"].apply(_phone_country)).replace("", "Inconnu")
    pays_avail   = sorted(dfa["_pays"].unique().tolist())
    if "France" in pays_avail:
        pays_avail.remove("France")
        pays_avail = ["France"] + pays_avail

    c1, c2, c3, c4, c5 = st.columns([1, 1, 1, 1.2, 1.2])
    year   = c1.selectbox("Ann√©e",     ["Toutes"] + years_avail, index=0)
    month  = c2.selectbox("Mois",      ["Tous"] + months_avail, index=0)
    plat   = c3.selectbox("Plateforme",["Toutes"] + plats_avail, index=0)
    payf   = c4.selectbox("Pays",      ["Tous"] + pays_avail, index=0)
    metric = c5.selectbox("M√©trique",  ["prix_brut","prix_net","base","charges","menage","taxes_sejour","nuitees"], index=1)

    data = dfa.copy()
    data["pays"] = data["_pays"]
    if year  != "Toutes": data = data[data["date_arrivee_dt"].dt.year  == int(year)]
    if month != "Tous":   data = data[data["date_arrivee_dt"].dt.month == int(month)]
    if plat  != "Toutes": data = data[data["plateforme"].astype(str).str.strip() == str(plat).strip()]
    if payf  != "Tous":   data = data[data["pays"] == payf]
    if data.empty:
        st.warning("Aucune donn√©e apr√®s filtres.")
        return

    # ---- Occupation par mois ----
    st.markdown("---")
    st.subheader("üìÖ Taux d'occupation")

    data["mois"] = data["date_arrivee_dt"].dt.to_period("M").astype(str)
    data["nuitees"] = (data["date_depart_dt"] - data["date_arrivee_dt"]).dt.days

    occ_mois = data.groupby(["mois", "plateforme"], as_index=False)["nuitees"].sum()
    occ_mois.rename(columns={"nuitees": "nuitees_occupees"}, inplace=True)

    def jours_dans_mois(periode_str):
        an, mo = map(int, periode_str.split("-"))
        return monthrange(an, mo)[1]

    occ_mois["jours_dans_mois"] = occ_mois["mois"].apply(jours_dans_mois)
    occ_mois["taux_occupation"] = (occ_mois["nuitees_occupees"] / occ_mois["jours_dans_mois"]) * 100

    col_plat, col_export = st.columns([1, 1])
    plat_occ = col_plat.selectbox("Filtrer par plateforme (occupation)", ["Toutes"] + plats_avail, index=0)

    occ_filtered = occ_mois.copy()
    if plat_occ != "Toutes":
        occ_filtered = occ_filtered[occ_filtered["plateforme"] == plat_occ]

    filtered_nuitees = pd.to_numeric(occ_filtered["nuitees_occupees"], errors="coerce").fillna(0).sum()
    filtered_jours   = pd.to_numeric(occ_filtered["jours_dans_mois"], errors="coerce").fillna(0).sum()
    taux_global_filtered = (filtered_nuitees / filtered_jours) * 100 if filtered_jours > 0 else 0

    st.markdown(
        f"""
        <div class='glass'>
          <span class='chip'><small>Taux global</small><br><strong>{taux_global_filtered:.1f}%</strong></span>
          <span class='chip'><small>Nuit√©es occup√©es</small><br><strong>{int(filtered_nuitees)}</strong></span>
          <span class='chip'><small>Jours dispos</small><br><strong>{int(filtered_jours)}</strong></span>
          <span class='chip'><small>Pays filtr√©</small><br><strong>{payf if payf!='Tous' else 'Tous'}</strong></span>
        </div>
        """,
        unsafe_allow_html=True
    )

    occ_export = (
        occ_filtered[["mois","plateforme","nuitees_occupees","jours_dans_mois","taux_occupation"]]
        .sort_values(["mois","plateforme"], ascending=[False, True])
    )
    col_export.download_button(
        "‚¨áÔ∏è Exporter occupation (CSV)",
        data=occ_export.to_csv(index=False).encode("utf-8"),
        file_name="taux_occupation.csv",
        mime="text/csv"
    )
    xlsx_occ, _ = _df_to_xlsx_bytes(occ_export, "Taux d'occupation")
    if xlsx_occ:
        col_export.download_button(
            "‚¨áÔ∏è Exporter occupation (Excel)",
            data=xlsx_occ,
            file_name="taux_occupation.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    st.dataframe(
        occ_export.assign(taux_occupation=lambda x: x["taux_occupation"].round(1)),
        use_container_width=True
    )

    # ---- Comparaison par ann√©e ----
    st.markdown("---")
    st.subheader("üìä Comparaison des taux d'occupation par ann√©e")

    data["annee"] = data["date_arrivee_dt"].dt.year
    occ_annee = data.groupby(["annee","plateforme"])["nuitees"].sum().reset_index()
    occ_annee.rename(columns={"nuitees": "nuitees_occupees"}, inplace=True)

    def jours_dans_annee(an):
        return 366 if (an % 4 == 0 and an % 100 != 0) or (an % 400 == 0) else 365

    occ_annee["jours_dans_annee"] = occ_annee["annee"].apply(jours_dans_annee)
    occ_annee["taux_occupation"]  = (occ_annee["nuitees_occupees"] / occ_annee["jours_dans_annee"]) * 100

    all_years = sorted(occ_annee["annee"].unique())
    default_years = all_years[-2:] if len(all_years) >= 2 else all_years
    annees_comparaison = st.multiselect("S√©lectionner les ann√©es √† comparer", options=all_years, default=default_years)

    if annees_comparaison:
        occ_comp = occ_annee[occ_annee["annee"].isin(annees_comparaison)].copy()
        try:
            chart_comparaison = alt.Chart(occ_comp).mark_bar().encode(
                x=alt.X("annee:N", title="Ann√©e"),
                y=alt.Y("taux_occupation:Q", title="Taux d'occupation (%)", scale=alt.Scale(domain=[0, 100])),
                color=alt.Color("plateforme:N", title="Plateforme"),
                tooltip=["annee", "plateforme", alt.Tooltip("taux_occupation:Q", format=".1f")]
            ).properties(height=400)
            st.altair_chart(chart_comparaison, use_container_width=True)
        except Exception as e:
            st.warning(f"Graphique indisponible : {e}")

        st.dataframe(
            occ_comp[["annee","plateforme","nuitees_occupees","taux_occupation"]]
              .sort_values(["annee","plateforme"])
              .assign(taux_occupation=lambda x: x["taux_occupation"].round(1)),
            use_container_width=True
        )

    # ---- M√©triques financi√®res ----
    st.markdown("---")
    st.subheader("üí∞ M√©triques financi√®res")

    data["mois"] = data["date_arrivee_dt"].dt.to_period("M").astype(str)
    total_val = float(pd.to_numeric(data[metric], errors="coerce").fillna(0).sum())
    st.markdown(f"**Total {metric.replace('_',' ')} : {total_val:,.2f}**".replace(",", " "))

    agg_mois      = data.groupby("mois", as_index=False)[metric].sum().sort_values("mois")
    agg_mois_plat = data.groupby(["mois","plateforme"], as_index=False)[metric].sum().sort_values(["mois","plateforme"])

    with st.expander("D√©tail par mois", expanded=True):
        st.dataframe(agg_mois, use_container_width=True)
    with st.expander("D√©tail par mois et par plateforme", expanded=False):
        st.dataframe(agg_mois_plat, use_container_width=True)

    try:
        chart = alt.Chart(agg_mois_plat).mark_bar().encode(
            x=alt.X("mois:N", sort=None, title="Mois"),
            y=alt.Y(f"{metric}:Q", title=metric.replace("_", " ").title()),
            color=alt.Color("plateforme:N", title="Plateforme"),
            tooltip=["mois", "plateforme", alt.Tooltip(f"{metric}:Q", format=",.2f")]
        )
        st.altair_chart(chart.properties(height=420), use_container_width=True)
    except Exception as e:
        st.warning(f"Graphique indisponible : {e}")

    # ---- Analyse par pays ----
    st.markdown("---")
    st.subheader("üåç Analyse par pays")

    years_pays = years_avail
    year_pays = st.selectbox("Ann√©e (analyse pays)", ["Toutes"] + years_pays, index=0, key="year_pays")

    data_p = dfa.copy()
    data_p["pays"] = dfa["_pays"]
    if year_pays != "Toutes":
        data_p = data_p[data_p["date_arrivee_dt"].dt.year == int(year_pays)]

    data_p["nuitees"] = (data_p["date_depart_dt"] - data_p["date_arrivee_dt"]).dt.days

    agg_pays = data_p.groupby("pays", as_index=False).agg(
        reservations=("nom_client","count"),
        nuitees=("nuitees","sum"),
        prix_brut=("prix_brut","sum"),
        prix_net=("prix_net","sum"),
        menage=("menage","sum"),
        taxes_sejour=("taxes_sejour","sum"),
        charges=("charges","sum"),
        base=("base","sum"),
    )

    total_net = float(pd.to_numeric(agg_pays["prix_net"], errors="coerce").fillna(0).sum())
    total_res = int(pd.to_numeric(agg_pays["reservations"], errors="coerce").fillna(0).sum())

    agg_pays["part_revenu_%"] = np.where(
        total_net > 0,
        (pd.to_numeric(agg_pays["prix_net"], errors="coerce").fillna(0) / total_net) * 100,
        0.0
    )
    agg_pays["ADR_net"] = np.where(
        pd.to_numeric(agg_pays["nuitees"], errors="coerce").fillna(0) > 0,
        pd.to_numeric(agg_pays["prix_net"], errors="coerce").fillna(0) / pd.to_numeric(agg_pays["nuitees"], errors="coerce").fillna(0),
        0.0
    )

    agg_pays = agg_pays.sort_values(["prix_net","reservations"], ascending=[False, False])

    nb_pays = int(agg_pays["pays"].nunique())
    top_pays = agg_pays.iloc[0]["pays"] if not agg_pays.empty else "‚Äî"
    st.markdown(
        f"""
        <div class='glass'>
          <span class='chip'><small>Ann√©e</small><br><strong>{year_pays}</strong></span>
          <span class='chip'><small>Pays distincts</small><br><strong>{nb_pays}</strong></span>
          <span class='chip'><small>Total r√©servations</small><br><strong>{total_res}</strong></span>
          <span class='chip'><small>Top pays (CA net)</small><br><strong>{top_pays}</strong></span>
        </div>
        """,
        unsafe_allow_html=True
    )

    disp = agg_pays.copy()
    for c in ["reservations","nuitees","prix_brut","prix_net","menage","taxes_sejour","charges","base","ADR_net","part_revenu_%"]:
        disp[c] = pd.to_numeric(disp[c], errors="coerce")

    disp["reservations"] = disp["reservations"].fillna(0).astype("int64")
    disp["pays"] = disp["pays"].astype(str).replace({"nan":"Inconnu","":"Inconnu"})

    disp["prix_brut"] = disp["prix_brut"].round(2)
    disp["prix_net"]  = disp["prix_net"].round(2)
    disp["ADR_net"]   = disp["ADR_net"].round(2)
    disp["part_revenu_%"] = disp["part_revenu_%"].round(1)

    order_cols = ["pays","reservations","nuitees","prix_brut","prix_net","charges","menage","taxes_sejour","base","ADR_net","part_revenu_%"]
    disp = disp[[c for c in order_cols if c in disp.columns]]

    st.dataframe(disp, use_container_width=True)

    try:
        topN = st.slider("Afficher les N premiers pays (par CA net)", min_value=3, max_value=20, value=12, step=1)
        chart_pays = alt.Chart(agg_pays.head(topN)).mark_bar().encode(
            x=alt.X("pays:N", sort="-y", title="Pays"),
            y=alt.Y("prix_net:Q", title="CA net (‚Ç¨)"),
            tooltip=[
                "pays",
                alt.Tooltip("reservations:Q", title="R√©servations"),
                alt.Tooltip("nuitees:Q",      title="Nuit√©es"),
                alt.Tooltip("ADR_net:Q",      title="ADR net", format=",.2f"),
                alt.Tooltip("part_revenu_%:Q", title="Part du revenu (%)", format=".1f"),
            ],
        ).properties(height=420)
        st.altair_chart(chart_pays, use_container_width=True)
    except Exception as e:
        st.warning(f"Graphique 'Analyse pays' indisponible : {e}")

    # ---- √âvolution du taux d'occupation (courbe) ----
    st.markdown("---")
    st.subheader("üìà √âvolution du taux d'occupation")
    try:
        chart_occ = alt.Chart(occ_mois).mark_line(point=True).encode(
            x=alt.X("mois:N", sort=None, title="Mois"),
            y=alt.Y("taux_occupation:Q", title="Taux d'occupation (%)", scale=alt.Scale(domain=[0, 100])),
            color=alt.Color("plateforme:N", title="Plateforme"),
            tooltip=["mois", "plateforme", alt.Tooltip("taux_occupation:Q", format=".1f")]
        )
        st.altair_chart(chart_occ.properties(height=420), use_container_width=True)
    except Exception as e:
        st.warning(f"Graphique du taux d'occupation indisponible : {e}")


def vue_export_ics(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìÜ Export ICS ‚Äî {apt_name}")
    print_buttons()
    if df.empty:
        st.info("Aucune r√©servation.")
        return

    dfa = df.copy()
    dfa["date_arrivee_dt"] = pd.to_datetime(dfa["date_arrivee"], errors="coerce")
    years = sorted(dfa["date_arrivee_dt"].dt.year.dropna().astype(int).unique(), reverse=True)
    year  = st.selectbox("Ann√©e (arriv√©es)", years if years else [date.today().year], index=0)
    plats = ["Tous"] + sorted(df["plateforme"].dropna().unique())
    plat  = st.selectbox("Plateforme", plats, index=0)

    data = dfa[dfa["date_arrivee_dt"].dt.year == int(year)].copy()
    if plat != "Tous":
        data = data[data["plateforme"] == plat]
    if data.empty:
        st.warning("Rien √† exporter.")
        return

    miss = data["ical_uid"].isna() | (data["ical_uid"].astype(str).str.strip() == "")
    if miss.any():
        data.loc[miss, "ical_uid"] = data.loc[miss].apply(build_stable_uid, axis=1)

    nowstamp = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")

    def _fmt(d):
        if isinstance(d, datetime):
            d = d.date()
        if isinstance(d, date):
            return f"{d.year:04d}{d.month:02d}{d.day:02d}"
        try:
            d2 = pd.to_datetime(d, errors="coerce")
            return d2.strftime("%Y%m%d")
        except Exception:
            return ""

    def _esc(s):
        if s is None:
            return ""
        return str(s).replace("\\", "\\\\").replace("\n", "\\n").replace(",", "\\,").replace(";", "\\;")

    lines = ["BEGIN:VCALENDAR", "VERSION:2.0", "PRODID:-//Villa Tobias//Reservations//FR", "CALSCALE:GREGORIAN"]
    for _, r in data.iterrows():
        dt_a = pd.to_datetime(r["date_arrivee"], errors="coerce")
        dt_d = pd.to_datetime(r["date_depart"],  errors="coerce")
        if pd.isna(dt_a) or pd.isna(dt_d):
            continue

        summary = f"{apt_name} ‚Äî {r.get('nom_client', 'Sans nom')}"
        if r.get("plateforme"):
            summary += f" ({r['plateforme']})"

        desc = "\n".join([
            f"Client: {r.get('nom_client', '')}",
            f"T√©l√©phone: {r.get('telephone', '')}",
            f"Nuit√©es: {int(pd.to_numeric(r.get('nuitees'), errors='coerce') or 0)}",
            f"Prix brut: {float(pd.to_numeric(r.get('prix_brut'), errors='coerce') or 0):.2f} ‚Ç¨",
            f"res_id: {r.get('res_id', '')}",
        ])

        lines += [
            "BEGIN:VEVENT",
            f"UID:{r['ical_uid']}",
            f"DTSTAMP:{nowstamp}",
            f"DTSTART;VALUE=DATE:{_fmt(dt_a)}",
            f"DTEND;VALUE=DATE:{_fmt(dt_d)}",
            f"SUMMARY:{_esc(summary)}",
            f"DESCRIPTION:{_esc(desc)}",
            "TRANSP:OPAQUE",
            "END:VEVENT",
        ]

    lines.append("END:VCALENDAR")
    ics = "\r\n".join(lines) + "\r\n"
    st.download_button(
        "üì• T√©l√©charger .ics",
        data=ics.encode("utf-8"),
        file_name=f"reservations_{year}.ics",
        mime="text/calendar"
    )


def vue_google_sheet(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìù Fiche d'arriv√©e / Google Sheet ‚Äî {apt_name}")
    print_buttons()
    st.markdown(f"**Lien court √† partager** : {FORM_SHORT_URL}")
    st.markdown(
        f'<iframe src="{GOOGLE_FORM_VIEW}" width="100%" height="900" frameborder="0"></iframe>',
        unsafe_allow_html=True
    )
    st.markdown("---")
    st.subheader("Feuille Google int√©gr√©e")
    st.markdown(
        f'<iframe src="{GOOGLE_SHEET_EMBED_URL}" width="100%" height="700" frameborder="0"></iframe>',
        unsafe_allow_html=True
    )
    st.markdown("---")
    st.subheader("R√©ponses (CSV publi√©)")
    try:
        rep = pd.read_csv(GOOGLE_SHEET_PUBLISHED_CSV)
        show_email = st.checkbox("Afficher les colonnes d'email (si pr√©sentes)", value=False)
        if not show_email:
            mask_cols = [c for c in rep.columns if "mail" in c.lower() or "email" in c.lower()]
            rep_display = rep.drop(columns=mask_cols, errors="ignore")
        else:
            rep_display = rep
        st.dataframe(rep_display, use_container_width=True)
    except Exception as e:
        st.error(f"Impossible de charger la feuille publi√©e : {e}")


def vue_clients(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üë• Liste des clients ‚Äî {apt_name}")
    print_buttons()
    if df.empty:
        st.info("Aucun client.")
        return

    clients = df[["nom_client","telephone","email","plateforme","res_id","pays"]].copy()
    for c in ["nom_client","telephone","email","plateforme","res_id","pays"]:
        clients[c] = clients[c].astype(str).str.strip().replace({"nan": ""})

    need = clients["pays"].eq("") | clients["pays"].isna()
    if need.any():
        clients.loc[need, "pays"] = clients.loc[need, "telephone"].apply(_phone_country)

    cols_order = ["nom_client","pays","telephone","email","plateforme","res_id"]
    clients = clients[cols_order]
    clients = clients.loc[clients["nom_client"] != ""].drop_duplicates()
    clients = clients.sort_values(by="nom_client", kind="stable")
    st.dataframe(clients, use_container_width=True)


def vue_id(df, palette):
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üÜî Identifiants des r√©servations ‚Äî {apt_name}")
    print_buttons()
    if df is None or df.empty:
        st.info("Aucune r√©servation.")
        return

    tbl = df[["res_id", "nom_client", "telephone", "email", "plateforme", "pays"]].copy()
    for c in ["nom_client","telephone","email","plateforme","res_id","pays"]:
        tbl[c] = tbl[c].astype(str).str.strip().replace({"nan": ""})

    need = tbl["pays"].eq("") | tbl["pays"].isna()
    if need.any():
        tbl.loc[need, "pays"] = tbl.loc[need, "telephone"].apply(_phone_country)

    tbl = tbl.dropna(subset=["res_id"])
    tbl = tbl[tbl["res_id"] != ""].drop_duplicates()

    st.dataframe(tbl, use_container_width=True)

# === PART 5: PARAM√àTRES + MAIN ===

def vue_settings(df: pd.DataFrame, palette: dict):
    """Sauvegarde / restauration des donn√©es + maintenance apartments.csv + cache."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header("## ‚öôÔ∏è Param√®tres")
    st.subheader(apt_name)
    print_buttons()
    st.caption("Sauvegarde, restauration, cache et outil secours pour apartments.csv.")

    # -------- Sauvegarde (exports) --------
    st.markdown("### üíæ Sauvegarde (exports)")
    try:
        out = ensure_schema(df).copy()
        out["pays"] = out["telephone"].apply(_phone_country)
        for col in ["date_arrivee", "date_depart"]:
            out[col] = pd.to_datetime(out[col], errors="coerce").dt.strftime("%d/%m/%Y")
        csv_bytes = out.to_csv(sep=";", index=False).encode("utf-8")
    except Exception:
        csv_bytes = b""

    c1, c2 = st.columns(2)
    c1.download_button(
        "‚¨áÔ∏è Exporter r√©servations (CSV)",
        data=csv_bytes,
        file_name=os.path.basename(st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)),
        mime="text/csv",
        key="dl_res_csv",
    )

    try:
        out_xlsx = ensure_schema(df).copy()
        out_xlsx["pays"] = out_xlsx["telephone"].apply(_phone_country)
        for col in ["date_arrivee", "date_depart"]:
            out_xlsx[col] = pd.to_datetime(out_xlsx[col], errors="coerce").dt.strftime("%d/%m/%Y")
        xlsx_bytes, _ = _df_to_xlsx_bytes(out_xlsx, sheet_name="Reservations")
    except Exception:
        xlsx_bytes = None

    c2.download_button(
        "‚¨áÔ∏è Exporter r√©servations (XLSX)",
        data=xlsx_bytes or b"",
        file_name=(os.path.splitext(os.path.basename(st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)))[0] + ".xlsx"),
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        disabled=(xlsx_bytes is None),
        key="dl_res_xlsx",
    )

    # -------- Restauration (CSV/XLSX) --------
    st.markdown("### ‚ôªÔ∏è Restauration (remplacer les donn√©es)")
    up = st.file_uploader("Restaurer (CSV ou XLSX)", type=["csv", "xlsx"], key="restore_uploader_settings")
    if up is not None:
        try:
            if up.name.lower().endswith(".xlsx"):
                xls = pd.ExcelFile(up)
                sheet = st.selectbox("Feuille Excel", xls.sheet_names, index=0, key="restore_sheet_settings")
                tmp = pd.read_excel(xls, sheet_name=sheet, dtype=str)
            else:
                raw = up.read()
                tmp = _detect_delimiter_and_read(raw)

            prev = ensure_schema(tmp)
            st.success(f"Aper√ßu charg√© ({up.name})")
            with st.expander("Aper√ßu (10 premi√®res lignes)", expanded=False):
                st.dataframe(prev.head(10), use_container_width=True)

            if st.button("‚úÖ Confirmer la restauration", key="confirm_restore_settings"):
                try:
                    save = prev.copy()
                    for col in ["date_arrivee", "date_depart"]:
                        save[col] = pd.to_datetime(save[col], errors="coerce").dt.strftime("%d/%m/%Y")
                    # Chemin actif (li√©s √† l'appartement courant)
                    target_csv = st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)
                    save.to_csv(target_csv, sep=";", index=False, encoding="utf-8", lineterminator="\n")
                    st.cache_data.clear()
                    st.success("Fichier restaur√© ‚Äî rechargement‚Ä¶")
                    st.rerun()
                except Exception as e:
                    st.error(f"Erreur √©criture : {e}")
        except Exception as e:
            st.error(f"Erreur restauration : {e}")

    # -------- Vider le cache --------
    st.markdown("### üßπ Vider le cache")
    if st.button("Vider le cache & recharger", key="clear_cache_btn_settings"):
        try:
            st.cache_data.clear()
        except Exception:
            pass
        st.rerun()

    # -------- Outil secours apartments.csv --------
    st.markdown("### üß∞ √âcraser apartments.csv (outil secours)")
    default_csv = "slug,name\nvilla-tobias,Villa Tobias\nle-turenne,Le Turenne\n"
    txt = st.text_area(
        "Contenu apartments.csv",
        value=default_csv,
        height=140,
        key="force_apts_txt_settings",
    )
    if st.button("üß∞ √âcraser apartments.csv", key="force_apts_btn_settings"):
        try:
            with open(APARTMENTS_CSV, "w", encoding="utf-8", newline="") as f:
                f.write(txt.strip() + "\n")
            st.cache_data.clear()
            st.success("apartments.csv √©cras√© ‚úÖ ‚Äî rechargement‚Ä¶")
            st.rerun()
        except Exception as e:
            st.error(f"Impossible d'√©crire apartments.csv : {e}")


# ------------------------------- MAIN ---------------------------------

def main():
    # Reset cache via URL ?clear=1
    params = st.query_params
    if params.get("clear", ["0"])[0] in ("1", "true", "True", "yes"):
        try:
            st.cache_data.clear()
        except Exception:
            pass

    # S√©lection appartement (met √† jour CSV_RESERVATIONS / CSV_PLATEFORMES)
    changed = _select_apartment_sidebar()
    if changed:
        try:
            st.cache_data.clear()
        except Exception:
            pass
        # On continue le run (pas de st.rerun ici pour √©viter les boucles)

    # Th√®me
    try:
        mode_clair = st.sidebar.toggle("üåì Mode clair (PC)", value=False)
    except Exception:
        mode_clair = st.sidebar.checkbox("üåì Mode clair (PC)", value=False)
    apply_style(light=bool(mode_clair))

    # En-t√™te
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.title(f"‚ú® {apt_name} ‚Äî Gestion des R√©servations")

    # Chargement des donn√©es sp√©cifiques √† l'appartement
    df, palette_loaded = _load_data_for_active_apartment()
    palette = palette_loaded if palette_loaded else DEFAULT_PALETTE

    # Pages (associe label ‚Üí fonction existante)
    pages = {
        "üè† Accueil": vue_accueil,
        "üìã R√©servations": vue_reservations,
        "‚ûï Ajouter": vue_ajouter,
        "‚úèÔ∏è Modifier / Supprimer": vue_modifier,
        "üé® Plateformes": vue_plateformes,
        "üìÖ Calendrier": vue_calendrier,
        "üìä Rapport": vue_rapport,
        "‚úâÔ∏è SMS": vue_sms,
        "üìÜ Export ICS": vue_export_ics,
        "üìù Google Sheet": vue_google_sheet,
        "üë• Clients": vue_clients,
        "üÜî ID": vue_id,
        "‚öôÔ∏è Param√®tres": vue_settings,
    }

    choice = st.sidebar.radio("Aller √†", list(pages.keys()), key="nav_radio")
    page_func = pages.get(choice)
    if page_func:
        page_func(df, palette)
    else:
        st.error("Page inconnue.")

if __name__ == "__main__":
    main()