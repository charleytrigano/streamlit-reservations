============================= PART 1/5 ‚Äî IMPORTS, CONFIG, STYLES, HELPERS ==============================
import os, io, re, uuid, hashlib
from datetime import date, datetime, timedelta
from calendar import Calendar, monthrange
from urllib.parse import quote

import pandas as pd
import numpy as np
import streamlit as st
import altair as alt

# ------------------------------ CONFIG APP ------------------------------
st.set_page_config(
    page_title="‚ú® Villa Tobias ‚Äî Gestion des R√©servations",
    page_icon="‚ú®",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ------------------------------ CONSTANTES FICHIERS ------------------------------
# Chemins par d√©faut (seront remplac√©s par l'appartement actif)
CSV_RESERVATIONS = "reservations.csv"
CSV_PLATEFORMES  = "plateformes.csv"
APARTMENTS_CSV   = "apartments.csv"
COUNTRY_CODES_CSV = "country_codes.csv"  # << table √©ditable indicatifs ‚Üí pays (avec drapeau)

# ------------------------------ CONSTANTES APP ------------------------------
DEFAULT_PALETTE = {
    "Booking": "#1b9e77",
    "Airbnb":  "#d95f02",
    "Abritel": "#7570b3",
    "Direct":  "#e7298a",
}

# Google Form & Sheet (adapter au besoin)
FORM_SHORT_URL = "https://urlr.me/kZuH94"  # lien court public
GOOGLE_FORM_VIEW = "https://docs.google.com/forms/d/e/1FAIpQLScLiaqSAY3JYriYZIk9qP75YGUyP0sxF8pzmhbIQqsSEY0jpQ/viewform?embedded=true"
GOOGLE_SHEET_EMBED_URL = "https://docs.google.com/spreadsheets/d/1ci-4i8dZWzixt0p5WPdB2D8ePCpNQDD0jjZf41KtYns/edit?usp=sharing"
GOOGLE_SHEET_PUBLISHED_CSV = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSMie1mawlXGJtqC7KL_gSgeC9e8jwOxcqMzC1HmxxU8FCrOxD0HXl5APTO939__tu7EPh6aiXHnSnF/pub?output=csv"

# Colonnes pivot du mod√®le
BASE_COLS = [
    "paye","nom_client","email","sms_envoye","post_depart_envoye",
    "plateforme","telephone","pays",
    "date_arrivee","date_depart","nuitees",
    "prix_brut","commissions","frais_cb","prix_net","menage","taxes_sejour","base","charges","%",
    "res_id","ical_uid"
]

# ------------------------------ STYLES ------------------------------
def apply_style(light: bool):
    bg = "#fafafa" if light else "#0f1115"
    fg = "#0f172a" if light else "#eaeef6"
    side = "#f2f2f2" if light else "#171923"
    border = "rgba(17,24,39,.08)" if light else "rgba(124,92,255,.16)"
    st.markdown(
        f"""
        <style>
          html, body, [data-testid="stAppViewContainer"] {{ background:{bg}; color:{fg}; }}
          [data-testid="stSidebar"] {{ background:{side}; border-right:1px solid {border}; }}
          .glass {{ background:{"rgba(255,255,255,.65)" if light else "rgba(255,255,255,.06)"}; 
                   border:1px solid {border}; border-radius:12px; padding:12px; margin:10px 0; }}
          .chip {{ display:inline-block; padding:6px 10px; border-radius:12px; margin:4px 6px; 
                   font-size:.86rem; background:{"#eee" if light else "#2a2f3a"}; color:{"#222" if light else "#eee"} }}
          .cal-grid {{ display:grid; grid-template-columns: repeat(7, 1fr); gap:8px; }}
          .cal-cell {{ border:1px solid {border}; border-radius:10px; min-height:110px; padding:8px; position:relative; overflow:hidden; background:{"#fff" if light else "#0b0d12"}; }}
          .cal-cell.outside {{ opacity:.45; }}
          .cal-date {{ position:absolute; top:6px; right:8px; font-weight:700; font-size:.9rem; opacity:.7; }}
          .resa-pill {{ padding:4px 6px; border-radius:6px; font-size:.84rem; margin-top:22px; color:#fff; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }}
          .cal-header {{ display:grid; grid-template-columns: repeat(7, 1fr); gap:8px; font-weight:700; opacity:.8; margin:6px 0 8px; }}

          /* Impression A4 paysage + masquage colonnes techniques */
          @page {{ size: A4 landscape; margin: 12mm; }}
          @media print {{
            .no-print, [data-testid="stSidebar"], header, footer {{ display:none !important; }}
            .print-header {{ display:block !important; margin-bottom:10px; }}
            .stDataFrame [data-testid="columnHeaderName"][title="res_id"],
            .stDataFrame [data-testid="columnHeaderName"][title="ical_uid"],
            .stDataFrame [data-testid="columnHeaderName"][title="%"] {{ display:none !important; }}
          }}
        </style>
        """,
        unsafe_allow_html=True
    )

def print_buttons(location: str = "main"):
    target = st.sidebar if location == "sidebar" else st
    target.button("üñ®Ô∏è Imprimer", key=f"print_btn_{location}")
    st.markdown(
        """
        <script>
        const labels = Array.from(parent.document.querySelectorAll('button span, button p'));
        const btn = labels.find(n => n.textContent && n.textContent.trim() === "üñ®Ô∏è Imprimer");
        if (btn) { btn.parentElement.onclick = () => window.print(); }
        </script>
        """,
        unsafe_allow_html=True
    )

# ------------------------------ HELPERS I/O ------------------------------
def _load_file_bytes(path: str):
    try:
        with open(path, "rb") as f:
            return f.read()
    except Exception:
        return None

def _detect_delimiter_and_read(raw: bytes) -> pd.DataFrame:
    if not raw:
        return pd.DataFrame()
    txt = raw.decode("utf-8", errors="ignore").replace("\ufeff","")
    for sep in [";", ",", "\t", "|"]:
        try:
            df = pd.read_csv(io.StringIO(txt), sep=sep, dtype=str)
            if df.shape[1] >= 2:
                return df
        except Exception:
            pass
    try:
        return pd.read_csv(io.StringIO(txt), dtype=str)
    except Exception:
        return pd.DataFrame()

# ------------------------------ HELPERS DATA ------------------------------
def _as_series(x, index=None):
    if isinstance(x, pd.Series): return x
    if isinstance(x, (list, tuple, np.ndarray)):
        s = pd.Series(list(x))
        if index is not None and len(index) == len(s): s.index = index
        return s
    if index is None: return pd.Series([x])
    return pd.Series([x] * len(index), index=index)

def _to_bool_series(s: pd.Series) -> pd.Series:
    s = _as_series(s)
    out = s.astype(str).str.strip().str.lower().isin(["true","1","oui","vrai","yes","y","t"])
    return out.fillna(False).astype(bool)

def _to_num(s: pd.Series) -> pd.Series:
    s = _as_series(s)
    sc = (s.astype(str).str.replace("‚Ç¨","",regex=False)
                  .str.replace(" ","",regex=False)
                  .str.replace(",",".",regex=False).str.strip())
    return pd.to_numeric(sc, errors="coerce")

def _to_date(s: pd.Series) -> pd.Series:
    s = _as_series(s)
    d = pd.to_datetime(s, errors="coerce", dayfirst=True)
    if len(d) and d.isna().mean() > 0.5:
        d2 = pd.to_datetime(s, errors="coerce", format="%Y-%m-%d")
        d = d.fillna(d2)
    return d.dt.date

def build_stable_uid(row) -> str:
    base = f"{row.get('res_id','')}{row.get('nom_client','')}{row.get('telephone','')}"
    return hashlib.sha1(base.encode()).hexdigest() + "@villa-tobias"

def _df_to_xlsx_bytes(df: pd.DataFrame, sheet_name: str = "Reservations"):
    from io import BytesIO
    buf = BytesIO()
    try:
        with pd.ExcelWriter(buf, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name=sheet_name)
        return buf.getvalue(), None
    except Exception as e:
        st.warning(f"Impossible de g√©n√©rer un Excel (openpyxl requis) : {e}")
        return None, e

def _format_phone_e164(phone: str) -> str:
    s = re.sub(r"\D","", str(phone or ""))
    if not s: return ""
    if s.startswith("33"): return "+"+s
    if s.startswith("0"):  return "+33"+s[1:]
    return "+"+s

# ------------------------------ INDICATIFS PAYS (CSV √âDITABLE) ------------------------------
def _ensure_country_codes_file():
    """Cr√©e un CSV d'indicatifs si absent (UTF-8)."""
    if os.path.exists(COUNTRY_CODES_CSV):
        return
    seed = [
        ("33","France","üá´üá∑"), ("34","Espagne","üá™üá∏"), ("39","Italie","üáÆüáπ"),
        ("49","Allemagne","üá©üá™"), ("44","Royaume-Uni","üá¨üáß"), ("41","Suisse","üá®üá≠"),
        ("32","Belgique","üáßüá™"), ("351","Portugal","üáµüáπ"), ("352","Luxembourg","üá±üá∫"),
        ("31","Pays-Bas","üá≥üá±"), ("1","√âtats-Unis/Canada","üá∫üá∏"), ("61","Australie","üá¶üá∫"),
        ("64","Nouvelle-Z√©lande","üá≥üáø"), ("43","Autriche","üá¶üáπ"), ("45","Danemark","üá©üá∞"),
        ("46","Su√®de","üá∏üá™"), ("47","Norv√®ge","üá≥üá¥"), ("48","Pologne","üáµüá±"),
        ("30","Gr√®ce","üá¨üá∑"), ("353","Irlande","üáÆüá™"), ("420","Tch√©quie","üá®üáø"),
        ("421","Slovaquie","üá∏üá∞"), ("36","Hongrie","üá≠üá∫"), ("40","Roumanie","üá∑üá¥"),
        ("212","Maroc","üá≤üá¶"), ("216","Tunisie","üáπüá≥"), ("971","√â.A.U.","üá¶üá™")
    ]
    df_seed = pd.DataFrame(seed, columns=["indicatif","pays","drapeau"])
    df_seed.to_csv(COUNTRY_CODES_CSV, index=False, encoding="utf-8", lineterminator="\n")

def _read_country_codes() -> pd.DataFrame:
    """Charge le CSV d'indicatifs, normalise et trie par longueur d'indicatif (desc)."""
    try:
        raw = _load_file_bytes(COUNTRY_CODES_CSV)
        df = _detect_delimiter_and_read(raw) if raw else pd.DataFrame(columns=["indicatif","pays","drapeau"])
        if df is None or df.empty:
            return pd.DataFrame(columns=["indicatif","pays","drapeau"])
        df.columns = [str(c).strip().lower() for c in df.columns]
        for c in ["indicatif","pays","drapeau"]:
            if c not in df.columns: df[c] = ""
        df["indicatif"] = df["indicatif"].astype(str).str.replace(r"\D","", regex=True)
        df["pays"] = df["pays"].astype(str).str.strip()
        df["drapeau"] = df["drapeau"].astype(str).str.strip()
        df = df[df["indicatif"]!=""].drop_duplicates(subset=["indicatif"], keep="first")
        df["_len"] = df["indicatif"].str.len()
        df = df.sort_values("_len", ascending=False).drop(columns=["_len"])
        return df[["indicatif","pays","drapeau"]]
    except Exception:
        return pd.DataFrame(columns=["indicatif","pays","drapeau"])

def _match_country_by_phone(phone: str) -> str:
    """Retourne le pays en utilisant COUNTRY_CODES_CSV (pr√©fixe le plus long)."""
    if not phone:
        return ""
    s = str(phone).strip()
    if s.startswith("+"): s = s[1:]
    elif s.startswith("00"): s = s[2:]
    elif s.startswith("0"):
        return "France"
    s = re.sub(r"\D", "", s)
    if not s:
        return ""
    df_cc = _read_country_codes()
    for _, r in df_cc.iterrows():
        pref = r["indicatif"]
        if s.startswith(pref):
            return r["pays"] or ""
    return "Inconnu"

def _phone_country(phone: str) -> str:
    """API publique utilis√©e partout : passe par la table, fallback simple."""
    try:
        c = _match_country_by_phone(phone)
        return c or "Inconnu"
    except Exception:
        p = str(phone or "")
        if p.startswith("0"): return "France"
        return "Inconnu"

# ============================== PART 2/5 ‚Äî NORMALISATION, SAUVEGARDE, APPARTEMENTS ==============================

# ------------------------------ NORMALISATION & SAUVEGARDE ------------------------------
def ensure_schema(df_in: pd.DataFrame) -> pd.DataFrame:
    """Normalise le DataFrame de r√©servations selon BASE_COLS et calcule les champs d√©riv√©s."""
    if df_in is None or len(df_in) == 0:
        return pd.DataFrame(columns=BASE_COLS)

    df = df_in.copy()
    df.columns = df.columns.astype(str).str.strip()

    # Renommages fr√©quents (compatibilit√©)
    rename_map = {
        "Pay√©": "paye",
        "Client": "nom_client",
        "Plateforme": "plateforme",
        "Arriv√©e": "date_arrivee",
        "D√©part": "date_depart",
        "Nuits": "nuitees",
        "Brut (‚Ç¨)": "prix_brut",
    }
    df.rename(columns=rename_map, inplace=True)

    # Colonnes manquantes
    for c in BASE_COLS:
        if c not in df.columns:
            df[c] = pd.Series([None] * len(df), index=df.index)

    # Cast s√©rie
    for c in df.columns:
        df[c] = _as_series(df[c], index=df.index)

    # Bool√©ens
    for b in ["paye", "sms_envoye", "post_depart_envoye"]:
        df[b] = _to_bool_series(df[b])

    # Num√©riques
    for n in ["prix_brut", "commissions", "frais_cb", "menage", "taxes_sejour", "nuitees", "charges", "%", "base"]:
        df[n] = _to_num(df[n]).fillna(0.0)

    # Dates
    df["date_arrivee"] = _to_date(df["date_arrivee"])
    df["date_depart"]  = _to_date(df["date_depart"])

    # Nuit√©(e)s si non renseign√©
    mask_ok = pd.notna(df["date_arrivee"]) & pd.notna(df["date_depart"])
    if mask_ok.any():
        da = pd.to_datetime(df.loc[mask_ok, "date_arrivee"])
        dd = pd.to_datetime(df.loc[mask_ok, "date_depart"])
        df.loc[mask_ok, "nuitees"] = (dd - da).dt.days.clip(lower=0).astype(float)

    # Prix net, charges, base, %
    prix_brut = _to_num(df["prix_brut"])
    commissions = _to_num(df["commissions"])
    frais_cb = _to_num(df["frais_cb"])
    menage = _to_num(df["menage"])
    taxes = _to_num(df["taxes_sejour"])

    df["prix_net"] = (prix_brut - commissions - frais_cb).fillna(0.0)
    df["charges"]  = (prix_brut - df["prix_net"]).fillna(0.0)
    df["base"]     = (df["prix_net"] - menage - taxes).fillna(0.0)

    with np.errstate(divide="ignore", invalid="ignore"):
        df["%"] = np.where(prix_brut > 0, (df["charges"] / prix_brut * 100), 0.0).astype(float)

    # Identifiants manquants
    miss_res = df["res_id"].isna() | (df["res_id"].astype(str).str.strip() == "")
    if miss_res.any():
        df.loc[miss_res, "res_id"] = [str(uuid.uuid4()) for _ in range(int(miss_res.sum()))]

    miss_uid = df["ical_uid"].isna() | (df["ical_uid"].astype(str).str.strip() == "")
    if miss_uid.any():
        df.loc[miss_uid, "ical_uid"] = df.loc[miss_uid].apply(build_stable_uid, axis=1)

    # Nettoyage strings
    for c in ["nom_client", "plateforme", "telephone", "email", "pays"]:
        df[c] = df[c].astype(str).replace({"nan": "", "None": ""}).str.strip()

    # Pays via indicatif si vide
    need = df["pays"].eq("") | df["pays"].isna()
    if need.any():
        df.loc[need, "pays"] = df.loc[need, "telephone"].apply(_phone_country)

    return df[BASE_COLS]


def sauvegarder_donnees(df: pd.DataFrame) -> bool:
    """√âcrit le CSV des r√©servations (du fichier actif) et purge le cache."""
    try:
        out = ensure_schema(df).copy()
        for col in ["date_arrivee", "date_depart"]:
            out[col] = pd.to_datetime(out[col], errors="coerce").dt.strftime("%d/%m/%Y")
        # Chemin actif li√© √† l'appartement courant
        target_csv = st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)
        out.to_csv(target_csv, sep=";", index=False, encoding="utf-8", lineterminator="\n")
        st.cache_data.clear()
        return True
    except Exception as e:
        st.error(f"Erreur de sauvegarde : {e}")
        return False


@st.cache_data(show_spinner=False)
def charger_donnees(csv_reservations: str, csv_plateformes: str):
    """Charge r√©servations + palette (et cr√©e les fichiers s'ils n'existent pas)."""
    # S'assure que le fichier des indicatifs existe
    _ensure_country_codes_file()

    # Cr√©e les fichiers s'ils n'existent pas
    for fichier, header in [
        (csv_reservations, "nom_client,email,telephone,plateforme,date_arrivee,date_depart,nuitees,prix_brut\n"),
        (csv_plateformes,  "plateforme,couleur\nBooking,#1b9e77\nAirbnb,#d95f02\nAbritel,#7570b3\nDirect,#e7298a\n"),
    ]:
        if not os.path.exists(fichier):
            with open(fichier, "w", encoding="utf-8", newline="") as f:
                f.write(header)

    # R√©servations
    raw = _load_file_bytes(csv_reservations)
    base_df = _detect_delimiter_and_read(raw) if raw is not None else pd.DataFrame()
    df = ensure_schema(base_df)

    # Palette
    rawp = _load_file_bytes(csv_plateformes)
    palette = DEFAULT_PALETTE.copy()
    if rawp is not None:
        try:
            pal_df = _detect_delimiter_and_read(rawp)
            pal_df.columns = pal_df.columns.astype(str).str.strip()
            if {"plateforme", "couleur"}.issubset(pal_df.columns):
                palette = dict(zip(pal_df["plateforme"], pal_df["couleur"]))
        except Exception as e:
            st.warning(f"Erreur de palette : {e}")

    return df, palette


# ------------------------------ APARTMENTS (s√©lecteur sans mdp) ------------------------------
def _read_apartments_csv() -> pd.DataFrame:
    """Lit apartments.csv et retourne (slug, name)."""
    try:
        if not os.path.exists(APARTMENTS_CSV):
            return pd.DataFrame(columns=["slug", "name"])
        raw = _load_file_bytes(APARTMENTS_CSV)
        df = _detect_delimiter_and_read(raw) if raw else pd.DataFrame()
        if df is None or df.empty:
            return pd.DataFrame(columns=["slug", "name"])
        df.columns = [str(c).strip().lower() for c in df.columns]
        if "slug" not in df.columns: df["slug"] = ""
        if "name" not in df.columns: df["name"] = ""
        df["slug"] = (
            df["slug"].astype(str)
            .str.replace("\ufeff", "", regex=False)
            .str.strip().str.replace(" ", "-", regex=False)
            .str.replace("_", "-", regex=False)
            .str.lower()
        )
        df["name"] = df["name"].astype(str).str.replace("\ufeff", "", regex=False).str.strip()
        df = df[(df["slug"] != "") & (df["name"] != "")]
        df = df.drop_duplicates(subset=["slug"], keep="first")
        return df[["slug", "name"]]
    except Exception:
        return pd.DataFrame(columns=["slug", "name"])


def _current_apartment() -> dict | None:
    """Retourne l'appartement courant (slug, name) depuis la session."""
    slug = st.session_state.get("apt_slug", "")
    name = st.session_state.get("apt_name", "")
    if slug and name:
        return {"slug": slug, "name": name}
    return None


def _select_apartment_sidebar() -> bool:
    """
    Affiche le s√©lecteur d'appartement dans la sidebar et met √† jour les chemins
    CSV_RESERVATIONS / CSV_PLATEFORMES en session. Retourne True si la s√©lection a chang√©.
    """
    st.sidebar.markdown("### Appartement")
    apts = _read_apartments_csv()
    if apts.empty:
        st.sidebar.warning("Aucun appartement trouv√© dans apartments.csv")
        return False

    options = apts["slug"].tolist()
    labels = {r["slug"]: r["name"] for _, r in apts.iterrows()}

    # index par d√©faut robuste
    cur_slug = st.session_state.get("apt_slug", options[0])
    if cur_slug not in options:
        cur_slug = options[0]
    default_idx = options.index(cur_slug)

    slug = st.sidebar.selectbox(
        "Choisir un appartement",
        options=options,
        index=default_idx,
        format_func=lambda s: labels.get(s, s),
        key="apt_slug_selectbox",
    )
    name = labels.get(slug, slug)

    changed = (slug != st.session_state.get("apt_slug", "") or name != st.session_state.get("apt_name", ""))

    # m√©morise et synchronise les chemins actifs
    st.session_state["apt_slug"] = slug
    st.session_state["apt_name"] = name
    st.session_state["CSV_RESERVATIONS"] = f"reservations_{slug}.csv"
    st.session_state["CSV_PLATEFORMES"]  = f"plateformes_{slug}.csv"

    # met √† jour les globales utilis√©es par les fonctions d‚Äôexport/restauration
    global CSV_RESERVATIONS, CSV_PLATEFORMES
    CSV_RESERVATIONS = st.session_state["CSV_RESERVATIONS"]
    CSV_PLATEFORMES  = st.session_state["CSV_PLATEFORMES"]

    st.sidebar.success(f"Connect√© : {name}")
    try:
        print_buttons(location="sidebar")
    except Exception:
        pass

    return changed


def _load_data_for_active_apartment():
    """Wrapper robuste pour charger (df, palette) de l'appartement courant."""
    csv_res = st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)
    csv_pal = st.session_state.get("CSV_PLATEFORMES",  CSV_PLATEFORMES)
    try:
        return charger_donnees(csv_res, csv_pal)
    except TypeError:
        # fallback si la signature cache a boug√©
        return charger_donnees(CSV_RESERVATIONS, CSV_PLATEFORMES)
    except Exception:
        return pd.DataFrame(columns=BASE_COLS), DEFAULT_PALETTE.copy()

# ============================== PART 3/5 ‚Äî VUES : ACCUEIL, R√âSERVATIONS, AJOUTER, MODIFIER ==============================

def vue_accueil(df: pd.DataFrame, palette: dict):
    """Tableau de bord du jour : arriv√©es / d√©parts aujourd'hui + arriv√©es J+1."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üè† Accueil ‚Äî {apt_name}")
    print_buttons()

    today = date.today()
    tomorrow = today + timedelta(days=1)
    st.write(f"**Aujourd'hui : {today.strftime('%d/%m/%Y')}**")

    dfv = df.copy()
    dfv["date_arrivee"] = _to_date(dfv["date_arrivee"])
    dfv["date_depart"]  = _to_date(dfv["date_depart"])

    arr = dfv[dfv["date_arrivee"] == today][["nom_client", "telephone", "plateforme", "pays"]]
    dep = dfv[dfv["date_depart"]  == today][["nom_client", "telephone", "plateforme", "pays"]]
    arr_plus1 = dfv[dfv["date_arrivee"] == tomorrow][["nom_client", "telephone", "plateforme", "pays"]]

    c1, c2, c3 = st.columns(3)
    with c1:
        st.subheader("üü¢ Arriv√©es du jour")
        st.dataframe(arr if not arr.empty else pd.DataFrame({"info": ["Aucune arriv√©e."]}), use_container_width=True)
    with c2:
        st.subheader("üî¥ D√©parts du jour")
        st.dataframe(dep if not dep.empty else pd.DataFrame({"info": ["Aucun d√©part."]}), use_container_width=True)
    with c3:
        st.subheader("üü† Arriv√©es J+1 (demain)")
        st.dataframe(arr_plus1 if not arr_plus1.empty else pd.DataFrame({"info": ["Aucune arriv√©e demain."]}), use_container_width=True)


def vue_reservations(df: pd.DataFrame, palette: dict):
    """Liste des r√©servations + filtres + tuiles synth√®se."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìã R√©servations ‚Äî {apt_name}")
    print_buttons()

    if df is None or df.empty:
        st.info("Aucune r√©servation.")
        return

    dfa = df.copy()
    dfa["date_arrivee_dt"] = pd.to_datetime(dfa["date_arrivee"], errors="coerce")
    years_avail = sorted(dfa["date_arrivee_dt"].dt.year.dropna().astype(int).unique().tolist(), reverse=True)
    months_avail = list(range(1, 13))
    plats_avail  = sorted(dfa["plateforme"].astype(str).str.strip().replace({"": np.nan}).dropna().unique().tolist())

    c1, c2, c3, c4 = st.columns(4)
    year  = c1.selectbox("Ann√©e", ["Toutes"] + years_avail, index=0)
    month = c2.selectbox("Mois",  ["Tous"] + months_avail, index=0)
    plat  = c3.selectbox("Plateforme", ["Toutes"] + plats_avail, index=0)
    payf  = c4.selectbox("Paiement", ["Tous", "Pay√© uniquement", "Non pay√© uniquement"], index=0)

    data = dfa.copy()
    if year != "Toutes":
        data = data[data["date_arrivee_dt"].dt.year == int(year)]
    if month != "Tous":
        data = data[data["date_arrivee_dt"].dt.month == int(month)]
    if plat != "Toutes":
        data = data[data["plateforme"].astype(str).str.strip() == str(plat).strip()]
    if payf == "Pay√© uniquement":
        data = data[_to_bool_series(data["paye"]) == True]
    elif payf == "Non pay√© uniquement":
        data = data[_to_bool_series(data["paye"]) == False]

    brut    = float(pd.to_numeric(data["prix_brut"], errors="coerce").fillna(0).sum())
    net     = float(pd.to_numeric(data["prix_net"],  errors="coerce").fillna(0).sum())
    base    = float(pd.to_numeric(data["base"],     errors="coerce").fillna(0).sum())
    nuits   = int(pd.to_numeric(data["nuitees"],   errors="coerce").fillna(0).sum())
    adr     = (net / nuits) if nuits > 0 else 0.0
    charges = float(pd.to_numeric(data["charges"], errors="coerce").fillna(0).sum())

    st.markdown(
        f"""
        <div class='glass'>
          <span class='chip'><small>Total brut</small><br><strong>{brut:,.2f} ‚Ç¨</strong></span>
          <span class='chip'><small>Total net</small><br><strong>{net:,.2f} ‚Ç¨</strong></span>
          <span class='chip'><small>Charges</small><br><strong>{charges:,.2f} ‚Ç¨</strong></span>
          <span class='chip'><small>Base</small><br><strong>{base:,.2f} ‚Ç¨</strong></span>
          <span class='chip'><small>Nuit√©es</small><br><strong>{nuits}</strong></span>
          <span class='chip'><small>ADR (net)</small><br><strong>{adr:,.2f} ‚Ç¨</strong></span>
        </div>
        """.replace(",", " "),
        unsafe_allow_html=True
    )
    st.markdown("---")

    # Ordre anti-chronologique par arriv√©e
    order_idx = pd.to_datetime(data["date_arrivee"], errors="coerce").sort_values(ascending=False).index
    data = data.loc[order_idx]

    # Masque par d√©faut des colonnes techniques
    cols_hide = ["ical_uid", "res_id", "%", "base", "charges", "commissions", "frais_cb"]
    show_tech = st.checkbox("Afficher colonnes techniques", value=False)
    df_show = data if show_tech else data.drop(columns=[c for c in cols_hide if c in data.columns], errors="ignore")

    st.dataframe(df_show, use_container_width=True)


def vue_ajouter(df: pd.DataFrame, palette: dict):
    """Ajout d'une r√©servation via formulaire."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"‚ûï Ajouter une r√©servation ‚Äî {apt_name}")
    print_buttons()

    with st.form("form_add", clear_on_submit=True):
        c1, c2 = st.columns(2)
        with c1:
            nom = st.text_input("Nom du client")
            email = st.text_input("Email", value="")
            tel = st.text_input("T√©l√©phone")
            arr = st.date_input("Arriv√©e", date.today())
            dep = st.date_input("D√©part",  date.today() + timedelta(days=1))
        with c2:
            plat = st.selectbox("Plateforme", list(palette.keys()))
            brut = st.number_input("Prix brut (‚Ç¨)", min_value=0.0, step=0.01)
            commissions = st.number_input("Commissions (‚Ç¨)", min_value=0.0, step=0.01)
            frais_cb = st.number_input("Frais CB (‚Ç¨)", min_value=0.0, step=0.01)
            menage = st.number_input("M√©nage (‚Ç¨)", min_value=0.0, step=0.01)
            taxes  = st.number_input("Taxes s√©jour (‚Ç¨)", min_value=0.0, step=0.01)
            paye   = st.checkbox("Pay√©", value=False)

        if st.form_submit_button("‚úÖ Ajouter"):
            if not nom or dep <= arr:
                st.error("Veuillez entrer un nom et des dates valides.")
            else:
                nuitees = (dep - arr).days
                new = pd.DataFrame([{
                    "nom_client": nom, "email": email, "telephone": tel, "plateforme": plat,
                    "date_arrivee": arr, "date_depart": dep, "nuitees": nuitees,
                    "prix_brut": brut, "commissions": commissions, "frais_cb": frais_cb,
                    "menage": menage, "taxes_sejour": taxes, "paye": paye
                }])
                df2 = ensure_schema(pd.concat([df, new], ignore_index=True))
                if sauvegarder_donnees(df2):
                    st.success(f"R√©servation pour {nom} ajout√©e.")
                    st.rerun()


def vue_modifier(df: pd.DataFrame, palette: dict):
    """Modification / suppression d'une r√©servation existante."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"‚úèÔ∏è Modifier / Supprimer ‚Äî {apt_name}")
    print_buttons()

    if df.empty:
        st.info("Aucune r√©servation.")
        return

    df_sorted = df.sort_values(by="date_arrivee", ascending=False).reset_index()
    options = [f"{i}: {r.get('nom_client','')} ({r.get('date_arrivee','')})" for i, r in df_sorted.iterrows()]
    sel = st.selectbox("S√©lectionnez une r√©servation", options=options, index=None)
    if not sel:
        return

    idx = int(sel.split(":")[0])
    original_idx = df_sorted.loc[idx, "index"]
    row = df.loc[original_idx]

    with st.form(f"form_mod_{original_idx}"):
        c1, c2 = st.columns(2)
        with c1:
            nom = st.text_input("Nom", value=row.get("nom_client", "") or "")
            email = st.text_input("Email", value=row.get("email", "") or "")
            tel = st.text_input("T√©l√©phone", value=row.get("telephone", "") or "")
            arrivee = st.date_input("Arriv√©e", value=row.get("date_arrivee"))
            depart  = st.date_input("D√©part",  value=row.get("date_depart"))
        with c2:
            palette_keys = list(palette.keys())
            plat_idx = palette_keys.index(row.get("plateforme")) if row.get("plateforme") in palette_keys else 0
            plat = st.selectbox("Plateforme", options=palette_keys, index=plat_idx)
            paye = st.checkbox("Pay√©", value=bool(row.get("paye", False)))
            brut = float(pd.to_numeric(row.get("prix_brut"), errors="coerce") or 0)
            commissions = float(pd.to_numeric(row.get("commissions"), errors="coerce") or 0)
            frais_cb = float(pd.to_numeric(row.get("frais_cb"), errors="coerce") or 0)
            menage   = float(pd.to_numeric(row.get("menage"), errors="coerce") or 0)
            taxes    = float(pd.to_numeric(row.get("taxes_sejour"), errors="coerce") or 0)
            brut = st.number_input("Prix brut", min_value=0.0, step=0.01, value=brut)
            commissions = st.number_input("Commissions", min_value=0.0, step=0.01, value=commissions)
            frais_cb = st.number_input("Frais CB", min_value=0.0, step=0.01, value=frais_cb)
            menage   = st.number_input("M√©nage",   min_value=0.0, step=0.01, value=menage)
            taxes    = st.number_input("Taxes s√©jour", min_value=0.0, step=0.01, value=taxes)

        b1, b2 = st.columns([0.7, 0.3])
        if b1.form_submit_button("üíæ Enregistrer"):
            updates = {
                "nom_client": nom, "email": email, "telephone": tel, "date_arrivee": arrivee, "date_depart": depart,
                "plateforme": plat, "paye": paye, "prix_brut": brut, "commissions": commissions, "frais_cb": frais_cb,
                "menage": menage, "taxes_sejour": taxes
            }
            for k, v in updates.items():
                df.loc[original_idx, k] = v
            if sauvegarder_donnees(df):
                st.success("Modifi√© ‚úÖ")
                st.rerun()

        if b2.form_submit_button("üóëÔ∏è Supprimer"):
            df2 = df.drop(index=original_idx)
            if sauvegarder_donnees(df2):
                st.warning("Supprim√©.")
                st.rerun()

# ============================== PART 4/5 ‚Äî VUES : PLATEFORMES, CALENDRIER, RAPPORT ==============================

def vue_plateformes(df: pd.DataFrame, palette: dict):
    """Gestion des plateformes et couleurs (palette enregistr√©e dans CSV_PLATEFORMES)."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üé® Plateformes & couleurs ‚Äî {apt_name}")
    print_buttons()

    # Support ColorColumn si dispo
    HAS_COLORCOL = hasattr(getattr(st, "column_config", object), "ColorColumn")

    # Plateformes d√©tect√©es + existantes dans la palette
    plats_df = (
        df.get("plateforme", pd.Series([], dtype=str))
          .astype(str).str.strip().replace({"nan": ""}).dropna().unique().tolist()
    )
    all_plats = sorted(set(list(palette.keys()) + plats_df))
    base = pd.DataFrame({
        "plateforme": all_plats,
        "couleur": [palette.get(p, "#666666") for p in all_plats]
    })

    if HAS_COLORCOL:
        col_cfg = {
            "plateforme": st.column_config.TextColumn("Plateforme"),
            "couleur": st.column_config.ColorColumn("Couleur (hex)")
        }
    else:
        col_cfg = {
            "plateforme": st.column_config.TextColumn("Plateforme"),
            "couleur": st.column_config.TextColumn(
                "Couleur (hex)", help="Ex: #1b9e77", validate=r"^#([0-9A-Fa-f]{6})$", width="small"
            )
        }

    edited = st.data_editor(
        base,
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True,
        column_config=col_cfg,
        key="palette_editor",
    )

    # Aper√ßu des pastilles si ColorColumn indisponible
    if not HAS_COLORCOL and not edited.empty:
        chips = []
        for _, r in edited.iterrows():
            plat = str(r["plateforme"]).strip()
            col  = str(r["couleur"]).strip()
            if not plat:
                continue
            ok = bool(re.match(r"^#([0-9A-Fa-f]{6})$", col or ""))
            chips.append(
                "<span style='display:inline-block;margin:4px 6px;padding:6px 10px;"
                f"border-radius:12px;background:{col if ok else '#666'};color:#fff;'>{plat} {col}</span>"
            )
        if chips:
            st.markdown("".join(chips), unsafe_allow_html=True)

    c1, c2, c3 = st.columns([0.5, 0.3, 0.2])
    if c1.button("üíæ Enregistrer la palette", key="save_palette_btn"):
        try:
            to_save = edited.copy()
            to_save["plateforme"] = to_save["plateforme"].astype(str).str.strip()
            to_save["couleur"]    = to_save["couleur"].astype(str).str.strip()
            to_save = to_save[to_save["plateforme"] != ""].drop_duplicates(subset=["plateforme"])
            if not HAS_COLORCOL:
                ok = to_save["couleur"].str.match(r"^#([0-9A-Fa-f]{6})$")
                to_save.loc[~ok, "couleur"] = "#666666"
            to_save.to_csv(
                st.session_state.get("CSV_PLATEFORMES", CSV_PLATEFORMES),
                sep=";", index=False, encoding="utf-8", lineterminator="\n"
            )
            st.success("Palette enregistr√©e ‚úÖ")
            st.cache_data.clear()
            st.rerun()
        except Exception as e:
            st.error(f"Erreur : {e}")

    if c2.button("‚Ü©Ô∏è Palette par d√©faut", key="restore_palette_btn"):
        try:
            pd.DataFrame(list(DEFAULT_PALETTE.items()), columns=["plateforme", "couleur"]).to_csv(
                st.session_state.get("CSV_PLATEFORMES", CSV_PLATEFORMES),
                sep=";", index=False, encoding="utf-8", lineterminator="\n"
            )
            st.success("Palette restaur√©e.")
            st.cache_data.clear()
            st.rerun()
        except Exception as e:
            st.error(f"Erreur : {e}")

    if c3.button("üîÑ Recharger", key="reload_palette_btn"):
        st.cache_data.clear()
        st.rerun()


def vue_calendrier(df: pd.DataFrame, palette: dict):
    """Grille mensuelle + liste d√©taill√©e du mois s√©lectionn√©."""
    from html import escape  # import local pour ne pas d√©pendre d'autres parties

    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìÖ Calendrier (grille mensuelle) ‚Äî {apt_name}")
    print_buttons()

    dfv = df.dropna(subset=["date_arrivee", "date_depart"]).copy()
    if dfv.empty:
        st.info("Aucune r√©servation √† afficher.")
        return

    today = date.today()
    years = sorted(pd.to_datetime(dfv["date_arrivee"], errors="coerce").dt.year.dropna().astype(int).unique(), reverse=True)
    annee = st.selectbox("Ann√©e", options=years if years else [today.year], index=0)
    mois  = st.selectbox("Mois",  options=list(range(1, 13)), index=today.month - 1)

    st.markdown(
        "<div class='cal-header'><div>Lun</div><div>Mar</div><div>Mer</div>"
        "<div>Jeu</div><div>Ven</div><div>Sam</div><div>Dim</div></div>",
        unsafe_allow_html=True
    )

    def day_resas(d):
        mask = (dfv["date_arrivee"] <= d) & (dfv["date_depart"] > d)
        return dfv[mask]

    cal = Calendar(firstweekday=0)
    html_parts = ["<div class='cal-grid'>"]
    for week in cal.monthdatescalendar(annee, mois):
        for d in week:
            outside = (d.month != mois)
            classes = "cal-cell outside" if outside else "cal-cell"
            cell = f"<div class='{classes}'>"
            cell += f"<div class='cal-date'>{d.day}</div>"
            if not outside:
                rs = day_resas(d)
                if not rs.empty:
                    for _, r in rs.iterrows():
                        color = palette.get(str(r.get("plateforme")), "#888")
                        name  = str(r.get("nom_client") or "")[:22]
                        title_txt = escape(str(r.get("nom_client", "")), quote=True)
                        cell += (
                            "<div class='resa-pill' "
                            f"style='background:{color}' "
                            f"title='{title_txt}'>"
                            f"{name}</div>"
                        )
            cell += "</div>"
            html_parts.append(cell)
    html_parts.append("</div>")
    st.markdown("".join(html_parts), unsafe_allow_html=True)
    st.markdown("---")

    # D√©tails du mois
    st.subheader("D√©tail du mois s√©lectionn√©")
    debut_mois = date(annee, mois, 1)
    fin_mois   = date(annee, mois, monthrange(annee, mois)[1])
    rows = dfv[(dfv["date_arrivee"] <= fin_mois) & (dfv["date_depart"] > debut_mois)].copy()

    if rows.empty:
        st.info("Aucune r√©servation sur ce mois.")
    else:
        plats = ["Toutes"] + sorted(rows["plateforme"].dropna().unique().tolist())
        plat = st.selectbox("Filtrer par plateforme", plats, index=0, key="cal_plat")
        if plat != "Toutes":
            rows = rows[rows["plateforme"] == plat]

        brut  = float(pd.to_numeric(rows["prix_brut"], errors="coerce").fillna(0).sum())
        net   = float(pd.to_numeric(rows["prix_net"],  errors="coerce").fillna(0).sum())
        nuits = int(pd.to_numeric(rows["nuitees"],    errors="coerce").fillna(0).sum())

        st.markdown(
            f"""
            <div class='glass'>
              <span class='chip'><small>Total brut</small><br><strong>{brut:,.2f} ‚Ç¨</strong></span>
              <span class='chip'><small>Total net</small><br><strong>{net:,.2f} ‚Ç¨</strong></span>
              <span class='chip'><small>Nuit√©es</small><br><strong>{nuits}</strong></span>
            </div>
            """.replace(",", " "),
            unsafe_allow_html=True
        )
        st.dataframe(
            rows[["nom_client", "plateforme", "date_arrivee", "date_depart", "nuitees", "paye", "pays"]],
            use_container_width=True
        )


def vue_rapport(df: pd.DataFrame, palette: dict):
    """KPI + occupation + comparaisons + finances + analyse par pays."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìä Rapport ‚Äî {apt_name}")
    print_buttons()

    if df is None or df.empty:
        st.info("Aucune donn√©e.")
        return

    dfa = df.copy()
    dfa["date_arrivee_dt"] = pd.to_datetime(dfa["date_arrivee"], errors="coerce")
    dfa["date_depart_dt"]  = pd.to_datetime(dfa["date_depart"],  errors="coerce")

    years_avail = sorted(dfa["date_arrivee_dt"].dt.year.dropna().astype(int).unique().tolist(), reverse=True)
    months_avail = list(range(1, 13))
    plats_avail  = sorted(dfa["plateforme"].astype(str).str.strip().replace({"": np.nan}).dropna().unique().tolist())

    # Pays inf√©r√©s si manquants
    dfa["_pays"] = dfa["pays"].replace("", np.nan)
    dfa["_pays"] = dfa["_pays"].fillna(dfa["telephone"].apply(_phone_country)).replace("", "Inconnu")
    pays_avail   = sorted(dfa["_pays"].unique().tolist())
    if "France" in pays_avail:
        pays_avail.remove("France")
        pays_avail = ["France"] + pays_avail

    c1, c2, c3, c4, c5 = st.columns([1, 1, 1, 1.2, 1.2])
    year  = c1.selectbox("Ann√©e",     ["Toutes"] + years_avail, index=0)
    month = c2.selectbox("Mois",      ["Tous"] + months_avail, index=0)
    plat  = c3.selectbox("Plateforme",["Toutes"] + plats_avail, index=0)
    payf  = c4.selectbox("Pays",      ["Tous"] + pays_avail, index=0)
    metric= c5.selectbox("M√©trique",  ["prix_brut","prix_net","base","charges","menage","taxes_sejour","nuitees"], index=1)

    data = dfa.copy()
    data["pays"] = data["_pays"]
    if year != "Toutes":  data = data[data["date_arrivee_dt"].dt.year == int(year)]
    if month != "Tous":   data = data[data["date_arrivee_dt"].dt.month == int(month)]
    if plat != "Toutes":  data = data[data["plateforme"].astype(str).str.strip() == str(plat).strip()]
    if payf != "Tous":    data = data[data["pays"] == payf]
    if data.empty:
        st.warning("Aucune donn√©e apr√®s filtres.")
        return

    # ---- Occupation par mois ----
    st.markdown("---")
    st.subheader("üìÖ Taux d'occupation")
    data["mois"] = data["date_arrivee_dt"].dt.to_period("M").astype(str)
    data["nuitees_calc"] = (data["date_depart_dt"] - data["date_arrivee_dt"]).dt.days.clip(lower=0)
    occ_mois = (
        data.groupby(["mois", "plateforme"], as_index=False)["nuitees_calc"]
            .sum().rename(columns={"nuitees_calc": "nuitees_occupees"})
    )

    def _jours_dans_mois(periode_str):
        an, mo = map(int, periode_str.split("-"))
        return monthrange(an, mo)[1]

    occ_mois["jours_dans_mois"] = occ_mois["mois"].apply(_jours_dans_mois)
    occ_mois["taux_occupation"] = np.where(
        occ_mois["jours_dans_mois"] > 0,
        (pd.to_numeric(occ_mois["nuitees_occupees"], errors="coerce").fillna(0) /
         pd.to_numeric(occ_mois["jours_dans_mois"], errors="coerce").fillna(0)) * 100,
        0.0
    )

    col_plat, col_export = st.columns([1, 1])
    plat_occ = col_plat.selectbox("Filtrer par plateforme (occupation)", ["Toutes"] + plats_avail, index=0)
    occ_filtered = occ_mois if plat_occ == "Toutes" else occ_mois[occ_mois["plateforme"] == plat_occ]
    filtered_nuitees = pd.to_numeric(occ_filtered["nuitees_occupees"], errors="coerce").fillna(0).sum()
    filtered_jours   = pd.to_numeric(occ_filtered["jours_dans_mois"], errors="coerce").fillna(0).sum()
    taux_global_filtered = (filtered_nuitees / filtered_jours) * 100 if filtered_jours > 0 else 0

    st.markdown(
        f"""
        <div class='glass'>
          <span class='chip'><small>Taux global</small><br><strong>{taux_global_filtered:.1f}%</strong></span>
          <span class='chip'><small>Nuit√©es occup√©es</small><br><strong>{int(filtered_nuitees)}</strong></span>
          <span class='chip'><small>Jours dispos</small><br><strong>{int(filtered_jours)}</strong></span>
          <span class='chip'><small>Pays filtr√©</small><br><strong>{payf if payf!='Tous' else 'Tous'}</strong></span>
        </div>
        """,
        unsafe_allow_html=True
    )

    occ_export = occ_filtered[["mois", "plateforme", "nuitees_occupees", "jours_dans_mois", "taux_occupation"]].copy() \
                    .sort_values(["mois", "plateforme"], ascending=[False, True])
    col_export.download_button(
        "‚¨áÔ∏è Exporter occupation (CSV)",
        data=occ_export.to_csv(index=False).encode("utf-8"),
        file_name="taux_occupation.csv",
        mime="text/csv"
    )
    xlsx_occ, _ = _df_to_xlsx_bytes(occ_export, "Taux d'occupation")
    if xlsx_occ:
        col_export.download_button(
            "‚¨áÔ∏è Exporter occupation (Excel)",
            data=xlsx_occ,
            file_name="taux_occupation.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    st.dataframe(occ_export.assign(taux_occupation=lambda x: x["taux_occupation"].round(1)), use_container_width=True)

    # ---- Comparaison ann√©es ----
    st.markdown("---")
    st.subheader("üìä Comparaison des taux d'occupation par ann√©e")
    data["annee"] = data["date_arrivee_dt"].dt.year
    occ_annee = (
        data.groupby(["annee", "plateforme"])["nuitees_calc"]
            .sum().reset_index().rename(columns={"nuitees_calc": "nuitees_occupees"})
    )

    def _jours_dans_annee(annee):
        return 366 if (annee % 4 == 0 and annee % 100 != 0) or (annee % 400 == 0) else 365

    occ_annee["jours_dans_annee"] = occ_annee["annee"].apply(_jours_dans_annee)
    occ_annee["taux_occupation"]  = np.where(
        occ_annee["jours_dans_annee"] > 0,
        (pd.to_numeric(occ_annee["nuitees_occupees"], errors="coerce").fillna(0) /
         pd.to_numeric(occ_annee["jours_dans_annee"], errors="coerce").fillna(0)) * 100,
        0.0
    )

    default_years = sorted(occ_annee["annee"].unique())[-2:] if occ_annee["annee"].nunique() >= 2 else sorted(occ_annee["annee"].unique())
    annees_comparaison = st.multiselect(
        "S√©lectionner les ann√©es √† comparer",
        options=sorted(occ_annee["annee"].unique()),
        default=default_years
    )
    if annees_comparaison:
        occ_comp = occ_annee[occ_annee["annee"].isin(annees_comparaison)].copy()
        try:
            chart_comparaison = alt.Chart(occ_comp).mark_bar().encode(
                x=alt.X("annee:N", title="Ann√©e"),
                y=alt.Y("taux_occupation:Q", title="Taux d'occupation (%)", scale=alt.Scale(domain=[0, 100])),
                color=alt.Color("plateforme:N", title="Plateforme"),
                tooltip=["annee", "plateforme", alt.Tooltip("taux_occupation:Q", format=".1f")]
            ).properties(height=400)
            st.altair_chart(chart_comparaison, use_container_width=True)
        except Exception as e:
            st.warning(f"Graphique indisponible : {e}")

        st.dataframe(
            occ_comp[["annee", "plateforme", "nuitees_occupees", "taux_occupation"]]
            .sort_values(["annee", "plateforme"])
            .assign(taux_occupation=lambda x: x["taux_occupation"].round(1)),
            use_container_width=True
        )

    # ---- M√©triques financi√®res ----
    st.markdown("---")
    st.subheader("üí∞ M√©triques financi√®res")
    data["mois"] = data["date_arrivee_dt"].dt.to_period("M").astype(str)
    total_val = float(pd.to_numeric(data[metric], errors="coerce").fillna(0).sum())
    st.markdown(f"**Total {metric.replace('_',' ')} : {total_val:,.2f}**".replace(",", " "))
    agg_mois = data.groupby("mois", as_index=False)[metric].sum().sort_values("mois")
    agg_mois_plat = data.groupby(["mois", "plateforme"], as_index=False)[metric].sum().sort_values(["mois", "plateforme"])
    with st.expander("D√©tail par mois", expanded=True):
        st.dataframe(agg_mois, use_container_width=True)
    with st.expander("D√©tail par mois et par plateforme", expanded=False):
        st.dataframe(agg_mois_plat, use_container_width=True)
    try:
        chart = alt.Chart(agg_mois_plat).mark_bar().encode(
            x=alt.X("mois:N", sort=None, title="Mois"),
            y=alt.Y(f"{metric}:Q", title=metric.replace("_", " ").title()),
            color=alt.Color("plateforme:N", title="Plateforme"),
            tooltip=["mois", "plateforme", alt.Tooltip(f"{metric}:Q", format=",.2f")]
        )
        st.altair_chart(chart.properties(height=420), use_container_width=True)
    except Exception as e:
        st.warning(f"Graphique indisponible : {e}")

    # ---- Analyse par pays ----
    st.markdown("---")
    st.subheader("üåç Analyse par pays")
    year_pays = st.selectbox("Ann√©e (analyse pays)", ["Toutes"] + years_avail, index=0, key="year_pays")
    data_p = dfa.copy()
    data_p["pays"] = dfa["_pays"]
    if year_pays != "Toutes":
        data_p = data_p[data_p["date_arrivee_dt"].dt.year == int(year_pays)]
    data_p["nuitees_calc"] = (data_p["date_depart_dt"] - data_p["date_arrivee_dt"]).dt.days.clip(lower=0)

    agg_pays = data_p.groupby("pays", as_index=False).agg(
        reservations=("nom_client", "count"),
        nuitees=("nuitees_calc", "sum"),
        prix_brut=("prix_brut", "sum"),
        prix_net=("prix_net", "sum"),
        menage=("menage", "sum"),
        taxes_sejour=("taxes_sejour", "sum"),
        charges=("charges", "sum"),
        base=("base", "sum"),
    )

    # S√©curiser les types num√©riques
    for c in ["reservations", "nuitees", "prix_brut", "prix_net", "menage", "taxes_sejour", "charges", "base"]:
        agg_pays[c] = pd.to_numeric(agg_pays[c], errors="coerce").fillna(0)

    total_net = float(agg_pays["prix_net"].sum())
    total_res = int(agg_pays["reservations"].sum())

    agg_pays["part_revenu_%"] = np.where(total_net > 0, (agg_pays["prix_net"] / total_net) * 100, 0.0)
    agg_pays["ADR_net"] = np.where(agg_pays["nuitees"] > 0, agg_pays["prix_net"] / agg_pays["nuitees"], 0.0)
    agg_pays = agg_pays.sort_values(["prix_net", "reservations"], ascending=[False, False])

    nb_pays = int(agg_pays["pays"].nunique())
    top_pays = agg_pays.iloc[0]["pays"] if not agg_pays.empty else "‚Äî"
    st.markdown(
        f"""
        <div class='glass'>
          <span class='chip'><small>Ann√©e</small><br><strong>{year_pays}</strong></span>
          <span class='chip'><small>Pays distincts</small><br><strong>{nb_pays}</strong></span>
          <span class='chip'><small>Total r√©servations</small><br><strong>{total_res}</strong></span>
          <span class='chip'><small>Top pays (CA net)</small><br><strong>{top_pays}</strong></span>
        </div>
        """,
        unsafe_allow_html=True
    )

    disp = agg_pays.copy()
    disp["reservations"] = disp["reservations"].astype("int64")
    disp["pays"] = disp["pays"].astype(str).replace({"nan": "Inconnu", "": "Inconnu"})
    disp["prix_brut"] = disp["prix_brut"].round(2)
    disp["prix_net"]  = disp["prix_net"].round(2)
    disp["ADR_net"]   = disp["ADR_net"].round(2)
    disp["part_revenu_%"] = disp["part_revenu_%"].round(1)

    order_cols = ["pays", "reservations", "nuitees", "prix_brut", "prix_net", "charges", "menage", "taxes_sejour", "base", "ADR_net", "part_revenu_%"]
    disp = disp[[c for c in order_cols if c in disp.columns]]
    st.dataframe(disp, use_container_width=True)

    try:
        topN = st.slider("Afficher les N premiers pays (par CA net)", min_value=3, max_value=20, value=12, step=1)
        chart_pays = alt.Chart(agg_pays.head(topN)).mark_bar().encode(
            x=alt.X("pays:N", sort="-y", title="Pays"),
            y=alt.Y("prix_net:Q", title="CA net (‚Ç¨)"),
            tooltip=[
                "pays",
                alt.Tooltip("reservations:Q", title="R√©servations"),
                alt.Tooltip("nuitees:Q", title="Nuit√©es"),
                alt.Tooltip("ADR_net:Q", title="ADR net", format=",.2f"),
                alt.Tooltip("part_revenu_%:Q", title="Part (%)", format=".1f"),
            ],
            color=alt.Color("pays:N", legend=None)
        ).properties(height=420)
        st.altair_chart(chart_pays, use_container_width=True)
    except Exception as e:
        st.warning(f"Graphique 'Analyse pays' indisponible : {e}")

    # ---- Courbe d'√©volution du taux d‚Äôoccupation ----
    st.markdown("---")
    st.subheader("üìà √âvolution du taux d'occupation")
    try:
        chart_occ = alt.Chart(occ_mois).mark_line(point=True).encode(
            x=alt.X("mois:N", sort=None, title="Mois"),
            y=alt.Y("taux_occupation:Q", title="Taux d'occupation (%)", scale=alt.Scale(domain=[0, 100])),
            color=alt.Color("plateforme:N", title="Plateforme"),
            tooltip=["mois", "plateforme", alt.Tooltip("taux_occupation:Q", format=".1f")]
        ).properties(height=420)
        st.altair_chart(chart_occ, use_container_width=True)
    except Exception as e:
        st.warning(f"Graphique du taux d'occupation indisponible : {e}")

# ============================== PART 5/5 ‚Äî SMS, INDICATIFS PAYS, PARAM√àTRES, MAIN ==============================

# ---------- INDICATIFS PAYS (chargement/√©dition) ----------

INDICATIF_CSV = "indicatifs.csv"

_DEFAULT_INDICATIFS = [
    # code (sans +), country, flag
    ("33",  "France",                    "üá´üá∑"),
    ("34",  "Espagne",                   "üá™üá∏"),
    ("39",  "Italie",                    "üáÆüáπ"),
    ("49",  "Allemagne",                 "üá©üá™"),
    ("44",  "Royaume-Uni",               "üá¨üáß"),
    ("41",  "Suisse",                    "üá®üá≠"),
    ("32",  "Belgique",                  "üáßüá™"),
    ("352", "Luxembourg",                "üá±üá∫"),
    ("351", "Portugal",                  "üáµüáπ"),
    ("1",   "√âtats-Unis/Canada",         "üá∫üá∏"),
    ("61",  "Australie",                 "üá¶üá∫"),
    ("64",  "Nouvelle-Z√©lande",          "üá≥üáø"),
    ("31",  "Pays-Bas",                  "üá≥üá±"),
    ("353", "Irlande",                   "üáÆüá™"),
    ("354", "Islande",                   "üáÆüá∏"),
    ("358", "Finlande",                  "üá´üáÆ"),
    ("46",  "Su√®de",                     "üá∏üá™"),
    ("47",  "Norv√®ge",                   "üá≥üá¥"),
    ("48",  "Pologne",                   "üáµüá±"),
    ("43",  "Autriche",                  "üá¶üáπ"),
    ("45",  "Danemark",                  "üá©üá∞"),
    ("90",  "Turquie",                   "üáπüá∑"),
    ("212", "Maroc",                     "üá≤üá¶"),
    ("216", "Tunisie",                   "üáπüá≥"),
    ("971", "√âmirats Arabes Unis",       "üá¶üá™"),
    ("420", "Tch√©quie",                  "üá®üáø"),
    ("421", "Slovaquie",                 "üá∏üá∞"),
    ("36",  "Hongrie",                   "üá≠üá∫"),
    ("40",  "Roumanie",                  "üá∑üá¥"),
    ("30",  "Gr√®ce",                     "üá¨üá∑"),
]

def _ensure_indicatif_csv_exists():
    """Cr√©e un indicatifs.csv par d√©faut si absent."""
    if not os.path.exists(INDICATIF_CSV):
        pd.DataFrame(_DEFAULT_INDICATIFS, columns=["code", "country", "flag"]).to_csv(
            INDICATIF_CSV, sep=";", index=False, encoding="utf-8", lineterminator="\n"
        )

def _load_indicatifs_df():
    """Charge les indicatifs en DataFrame et le garde en session."""
    if "INDICATIFS_DF" in st.session_state and isinstance(st.session_state["INDICATIFS_DF"], pd.DataFrame):
        return st.session_state["INDICATIFS_DF"].copy()

    _ensure_indicatif_csv_exists()
    try:
        raw = _load_file_bytes(INDICATIF_CSV)
        df_ind = _detect_delimiter_and_read(raw) if raw else pd.DataFrame(columns=["code","country","flag"])
        if df_ind.empty:
            df_ind = pd.DataFrame(_DEFAULT_INDICATIFS, columns=["code","country","flag"])
    except Exception:
        df_ind = pd.DataFrame(_DEFAULT_INDICATIFS, columns=["code","country","flag"])

    # Normalisation
    df_ind = df_ind.copy()
    for col in ["code","country","flag"]:
        if col not in df_ind.columns:
            df_ind[col] = ""
    df_ind["code"] = df_ind["code"].astype(str).str.replace("+","", regex=False).str.strip()
    df_ind["country"] = df_ind["country"].astype(str).str.strip()
    df_ind["flag"] = df_ind["flag"].astype(str).str.strip()
    df_ind = df_ind[df_ind["code"] != ""].drop_duplicates(subset=["code"], keep="first")

    st.session_state["INDICATIFS_DF"] = df_ind.copy()
    return df_ind

def _save_indicatifs_df(df_ind: pd.DataFrame):
    df_out = df_ind.copy()
    df_out["code"] = df_out["code"].astype(str).str.replace("+","", regex=False).str.strip()
    df_out["country"] = df_out["country"].astype(str).strip()
    df_out["flag"] = df_out["flag"].astype(str).strip()
    df_out = df_out[df_out["code"] != ""].drop_duplicates(subset=["code"], keep="first")
    df_out.to_csv(INDICATIF_CSV, sep=";", index=False, encoding="utf-8", lineterminator="\n")
    st.session_state["INDICATIFS_DF"] = df_out.copy()

def _guess_country_from_phone_with_table(phone: str) -> str:
    """Version bas√©e sur le tableau √©ditable (priorit√© √† ce tableau)."""
    p = str(phone or "").strip()
    if not p:
        return ""
    # 00, +, 0
    if p.startswith("+"):
        p1 = p[1:]
    elif p.startswith("00"):
        p1 = p[2:]
    elif p.startswith("0"):
        return "France"  # convention locale inchang√©e
    else:
        p1 = p

    df_ind = _load_indicatifs_df()
    # on trie par longueur de code desc pour faire correspondre le plus long pr√©fixe
    codes = sorted(df_ind["code"].astype(str).unique().tolist(), key=lambda x: -len(x))
    for code in codes:
        if p1.startswith(code):
            row = df_ind.loc[df_ind["code"] == code].head(1)
            if not row.empty:
                return str(row.iloc[0]["country"])
    return "Inconnu"

# ---------- PAGE : INDICATIFS / PAYS ----------

def vue_pays(df: pd.DataFrame, palette: dict):
    """Gestion des indicatifs t√©l√©phoniques ‚Üî pays (avec drapeaux), CSV persistant."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üåç Indicatifs t√©l√©phoniques & pays ‚Äî {apt_name}")
    print_buttons()

    df_ind = _load_indicatifs_df()

    st.info(
        "Vous pouvez **ajouter/modifier** des lignes (code sans '+'), pays et drapeau (emoji). "
        "Cliquez ensuite sur **Enregistrer**. Le fichier `indicatifs.csv` sera mis √† jour."
    )

    colcfg = {
        "code": st.column_config.TextColumn("Indicatif (ex: 33, 34, 1...)"),
        "country": st.column_config.TextColumn("Pays"),
        "flag": st.column_config.TextColumn("Drapeau (emoji)"),
    }

    edited = st.data_editor(
        df_ind,
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True,
        column_config=colcfg,
        key="indicatifs_editor",
    )

    c1, c2, c3 = st.columns([0.4, 0.3, 0.3])
    if c1.button("üíæ Enregistrer les indicatifs", key="save_indicatifs"):
        try:
            _save_indicatifs_df(edited)
            st.success("Indicatifs enregistr√©s ‚úÖ")
            st.cache_data.clear()  # au cas o√π certains calculs utilisent _phone_country
        except Exception as e:
            st.error(f"Erreur : {e}")

    if c2.button("‚Ü©Ô∏è Restaurer valeurs par d√©faut", key="restore_indicatifs"):
        try:
            pd.DataFrame(_DEFAULT_INDICATIFS, columns=["code","country","flag"]).to_csv(
                INDICATIF_CSV, sep=";", index=False, encoding="utf-8", lineterminator="\n"
            )
            st.session_state.pop("INDICATIFS_DF", None)
            st.success("Valeurs par d√©faut restaur√©es.")
            st.rerun()
        except Exception as e:
            st.error(f"Erreur : {e}")

    if c3.button("üîÑ Recharger", key="reload_indicatifs"):
        st.session_state.pop("INDICATIFS_DF", None)
        st.rerun()

    st.markdown("---")
    st.subheader("Aide : d√©tection automatique depuis un num√©ro")
    sample = st.text_input("Saisir un num√©ro pour tester (ex: +33612345678, 0033612345678‚Ä¶)", "")
    if sample:
        pays = _guess_country_from_phone_with_table(sample)
        st.write(f"‚Üí **Pays d√©tect√© :** {pays}")


# ============================== SMS ==============================

def vue_sms(df: pd.DataFrame, palette: dict):
    """Page SMS ‚Äî messages pr√©format√©s avant arriv√©e et apr√®s d√©part (copier/coller + liens rapides)."""
    from urllib.parse import quote

    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"‚úâÔ∏è SMS ‚Äî {apt_name}")
    print_buttons()

    if df is None or df.empty:
        st.info("Aucune r√©servation disponible.")
        return

    dfv = df.copy()
    dfv["date_arrivee"] = _to_date(dfv["date_arrivee"])
    dfv["date_depart"]  = _to_date(dfv["date_depart"])

    st.subheader("üõ¨ Pr√©-arriv√©e (arriv√©es J+1)")
    target_arrivee = st.date_input("Arriv√©es du", date.today() + timedelta(days=1), key="pre_date")
    pre = dfv.dropna(subset=["telephone","nom_client","date_arrivee"]).copy()
    pre = pre[(pre["date_arrivee"] == target_arrivee) & (~_to_bool_series(pre["sms_envoye"]))]

    if pre.empty:
        st.info("Aucun client √† contacter pour la date s√©lectionn√©e.")
    else:
        pre = pre.sort_values("date_arrivee")
        pre_reset = pre.reset_index()
        options = [f"{i}: {r['nom_client']} ({r['telephone']})" for i, r in pre_reset.iterrows()]
        pick = st.selectbox("Client (pr√©-arriv√©e)", options=options, index=None)
        if pick:
            sel_idx = int(pick.split(":")[0])
            r = pre_reset.loc[sel_idx]
            link_form = FORM_SHORT_URL
            nuitees = int(pd.to_numeric(r.get("nuitees"), errors="coerce") or 0)
            arr_txt = r["date_arrivee"].strftime("%d/%m/%Y") if pd.notna(r["date_arrivee"]) else ""
            dep_txt = r["date_depart"].strftime("%d/%m/%Y") if pd.notna(r["date_depart"]) else ""

            msg = (
                f"{apt_name.upper()}\n"
                f"Plateforme : {r.get('plateforme','N/A')}\n"
                f"Arriv√©e : {arr_txt}  D√©part : {dep_txt}  Nuit√©es : {nuitees}\n\n"
                f"Bonjour {r.get('nom_client','')}\n"
                "Bienvenue chez nous !\n\n"
                "Nous sommes ravis de vous accueillir bient√¥t √† Nice. Afin d'organiser au mieux votre r√©ception, "
                "nous vous demandons de bien vouloir remplir la fiche que vous trouverez en cliquant sur le lien suivant :\n"
                f"{link_form}\n\n"
                "Un parking est √† votre disposition sur place.\n\n"
                "Le check-in se fait √† partir de 14:00 et le check-out avant 11:00. Nous serons sur place lors de "
                "votre arriv√©e pour vous remettre les cl√©s.\n\n"
                "Vous trouverez des consignes √† bagages dans chaque quartier, √† Nice.\n\n"
                "Nous vous souhaitons un excellent voyage et nous nous r√©jouissons de vous rencontrer tr√®s bient√¥t.\n\n"
                "Annick & Charley\n\n"
                "******\n\n"
                "Welcome to our establishment!\n\n"
                "We are delighted to welcome you soon to Nice. In order to organize your reception as efficiently as possible, "
                "we kindly ask you to fill out this form:\n"
                f"{link_form}\n\n"
                "Parking is available on site.\n\n"
                "Check-in from 2:00 p.m. ‚Äî check-out before 11:00 a.m. We will be there when you arrive to give you the keys.\n\n"
                "You will find luggage storage facilities in every district of Nice.\n\n"
                "We wish you a pleasant journey and look forward to meeting you very soon.\n\n"
                "Annick & Charley"
            )

            st.text_area("üìã Copier le message", value=msg, height=360)
            # Liens rapides (sms / whatsapp)
            e164 = _format_phone_e164(r.get("telephone",""))
            only_digits = "".join(ch for ch in e164 if ch.isdigit())
            enc = quote(msg)
            c1, c2, c3 = st.columns(3)
            c1.link_button("üì≤ iPhone SMS", f"sms:&body={enc}")
            c2.link_button("ü§ñ Android SMS", f"sms:{e164}?body={enc}")
            c3.link_button("üü¢ WhatsApp", f"https://wa.me/{only_digits}?text={enc}")

            # Marquer envoy√©
            if st.button("‚úÖ Marquer 'SMS envoy√©' pour ce client"):
                try:
                    df.loc[r["index"], "sms_envoye"] = True
                    if sauvegarder_donnees(df):
                        st.success("Marqu√© ‚úÖ")
                        st.rerun()
                except Exception as e:
                    st.error(f"Impossible de marquer : {e}")

    st.markdown("---")
    st.subheader("üì§ Post-d√©part (d√©parts du jour)")
    target_depart = st.date_input("D√©parts du", date.today(), key="post_date")
    post = dfv.dropna(subset=["telephone","nom_client","date_depart"]).copy()
    post = post[(post["date_depart"] == target_depart) & (~_to_bool_series(post["post_depart_envoye"]))]

    if post.empty:
        st.info("Aucun message post-d√©part √† envoyer aujourd‚Äôhui.")
    else:
        post = post.sort_values("date_depart")
        post_reset = post.reset_index()
        options2 = [f"{i}: {r['nom_client']} ‚Äî d√©part {r['date_depart']}" for i, r in post_reset.iterrows()]
        pick2 = st.selectbox("Client (post-d√©part)", options=options2, index=None)
        if pick2:
            sel_idx2 = int(pick2.split(":")[0])
            r2 = post_reset.loc[sel_idx2]
            name = str(r2.get("nom_client") or "").strip()
            msg2 = (
                f"Bonjour {name},\n\n"
                "Un grand merci d'avoir choisi notre appartement pour votre s√©jour.\n"
                "Nous esp√©rons que vous avez pass√© un moment agr√©able.\n"
                "Si vous souhaitez revenir explorer encore un peu la ville, notre porte vous sera toujours grande ouverte.\n\n"
                "Au plaisir de vous accueillir √† nouveau.\n\n"
                "Annick & Charley\n\n"
                f"Hello {name},\n\n"
                "Thank you very much for choosing our apartment for your stay.\n"
                "We hope you had a great time ‚Äî our door is always open if you want to come back.\n\n"
                "Annick & Charley"
            )
            st.text_area("üìã Copier le message", value=msg2, height=280)
            e164b = _format_phone_e164(r2.get("telephone",""))
            only_digits_b = "".join(ch for ch in e164b if ch.isdigit())
            enc2 = quote(msg2)
            c1, c2, c3 = st.columns(3)
            c1.link_button("üü¢ WhatsApp", f"https://wa.me/{only_digits_b}?text={enc2}")
            c2.link_button("üì≤ iPhone SMS", f"sms:&body={enc2}")
            c3.link_button("ü§ñ Android SMS", f"sms:{e164b}?body={enc2}")

            if st.button("‚úÖ Marquer 'post-d√©part envoy√©' pour ce client"):
                try:
                    df.loc[r2["index"], "post_depart_envoye"] = True
                    if sauvegarder_donnees(df):
                        st.success("Marqu√© ‚úÖ")
                        st.rerun()
                except Exception as e:
                    st.error(f"Impossible de marquer : {e}")


# ============================== PARAM√àTRES ==============================

def vue_settings(df: pd.DataFrame, palette: dict):
    """Sauvegarde / restauration des donn√©es + maintenance apartments.csv + cache."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header("## ‚öôÔ∏è Param√®tres")
    st.subheader(apt_name)
    print_buttons()
    st.caption("Sauvegarde, restauration, cache et outil secours pour apartments.csv.")

    # -------- Sauvegarde (exports) --------
    st.markdown("### üíæ Sauvegarde (exports)")
    try:
        out = ensure_schema(df).copy()
        out["pays"] = out["telephone"].apply(_guess_country_from_phone_with_table)
        for col in ["date_arrivee", "date_depart"]:
            out[col] = pd.to_datetime(out[col], errors="coerce").dt.strftime("%d/%m/%Y")
        csv_bytes = out.to_csv(sep=";", index=False).encode("utf-8")
    except Exception:
        csv_bytes = b""

    c1, c2 = st.columns(2)
    c1.download_button(
        "‚¨áÔ∏è Exporter r√©servations (CSV)",
        data=csv_bytes,
        file_name=os.path.basename(st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)),
        mime="text/csv",
        key="dl_res_csv",
    )

    try:
        out_xlsx = ensure_schema(df).copy()
        out_xlsx["pays"] = out_xlsx["telephone"].apply(_guess_country_from_phone_with_table)
        for col in ["date_arrivee", "date_depart"]:
            out_xlsx[col] = pd.to_datetime(out_xlsx[col], errors="coerce").dt.strftime("%d/%m/%Y")
        xlsx_bytes, _ = _df_to_xlsx_bytes(out_xlsx, sheet_name="Reservations")
    except Exception:
        xlsx_bytes = None

    c2.download_button(
        "‚¨áÔ∏è Exporter r√©servations (XLSX)",
        data=xlsx_bytes or b"",
        file_name=(os.path.splitext(os.path.basename(st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)))[0] + ".xlsx"),
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        disabled=(xlsx_bytes is None),
        key="dl_res_xlsx",
    )

    # -------- Restauration (CSV/XLSX) --------
    st.markdown("### ‚ôªÔ∏è Restauration (remplacer les donn√©es)")
    up = st.file_uploader("Restaurer (CSV ou XLSX)", type=["csv", "xlsx"], key="restore_uploader_settings")
    if up is not None:
        try:
            if up.name.lower().endswith(".xlsx"):
                xls = pd.ExcelFile(up)
                sheet = st.selectbox("Feuille Excel", xls.sheet_names, index=0, key="restore_sheet_settings")
                tmp = pd.read_excel(xls, sheet_name=sheet, dtype=str)
            else:
                raw = up.read()
                tmp = _detect_delimiter_and_read(raw)

            prev = ensure_schema(tmp)
            st.success(f"Aper√ßu charg√© ({up.name})")
            with st.expander("Aper√ßu (10 premi√®res lignes)", expanded=False):
                st.dataframe(prev.head(10), use_container_width=True)

            if st.button("‚úÖ Confirmer la restauration", key="confirm_restore_settings"):
                try:
                    save = prev.copy()
                    for col in ["date_arrivee", "date_depart"]:
                        save[col] = pd.to_datetime(save[col], errors="coerce").dt.strftime("%d/%m/%Y")
                    target_csv = st.session_state.get("CSV_RESERVATIONS", CSV_RESERVATIONS)
                    save.to_csv(target_csv, sep=";", index=False, encoding="utf-8", lineterminator="\n")
                    st.cache_data.clear()
                    st.success("Fichier restaur√© ‚Äî rechargement‚Ä¶")
                    st.rerun()
                except Exception as e:
                    st.error(f"Erreur √©criture : {e}")
        except Exception as e:
            st.error(f"Erreur restauration : {e}")

    # -------- Vider le cache --------
    st.markdown("### üßπ Vider le cache")
    if st.button("Vider le cache & recharger", key="clear_cache_btn_settings"):
        try:
            st.cache_data.clear()
        except Exception:
            pass
        st.rerun()

    # -------- Outil secours apartments.csv --------
    st.markdown("### üß∞ √âcraser apartments.csv (outil secours)")
    default_csv = "slug,name\nvilla-tobias,Villa Tobias\nle-turenne,Le Turenne\n"
    txt = st.text_area(
        "Contenu apartments.csv",
        value=default_csv,
        height=140,
        key="force_apts_txt_settings",
    )
    if st.button("üß∞ √âcraser apartments.csv", key="force_apts_btn_settings"):
        try:
            with open(APARTMENTS_CSV, "w", encoding="utf-8", newline="") as f:
                f.write(txt.strip() + "\n")
            st.cache_data.clear()
            st.success("apartments.csv √©cras√© ‚úÖ ‚Äî rechargement‚Ä¶")
            st.rerun()
        except Exception as e:
            st.error(f"Impossible d'√©crire apartments.csv : {e}")


def vue_export_ics(df: pd.DataFrame, palette: dict):
    """Export des r√©servations au format .ics (iCalendar)."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìÜ Export ICS ‚Äî {apt_name}")
    print_buttons()

    if df is None or df.empty:
        st.info("Aucune r√©servation.")
        return

    dfa = df.copy()
    dfa["date_arrivee_dt"] = pd.to_datetime(dfa["date_arrivee"], errors="coerce")
    dfa["date_depart_dt"]  = pd.to_datetime(dfa["date_depart"],  errors="coerce")

    years = sorted(
        dfa["date_arrivee_dt"].dt.year.dropna().astype(int).unique().tolist(),
        reverse=True
    )
    year = st.selectbox("Ann√©e (arriv√©es)", years if years else [date.today().year], index=0)

    plats = ["Tous"] + sorted(df["plateforme"].astype(str).dropna().unique().tolist())
    plat  = st.selectbox("Plateforme", plats, index=0)

    data = dfa[dfa["date_arrivee_dt"].dt.year == int(year)].copy()
    if plat != "Tous":
        data = data[data["plateforme"].astype(str) == str(plat)]

    if data.empty:
        st.warning("Rien √† exporter pour ces filtres.")
        return

    # Assure des UID stables
    miss = data["ical_uid"].isna() | (data["ical_uid"].astype(str).str.strip() == "")
    if miss.any():
        data.loc[miss, "ical_uid"] = data.loc[miss].apply(build_stable_uid, axis=1)

    nowstamp = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")

    def _fmt(d):
        if isinstance(d, datetime): d = d.date()
        if isinstance(d, date):
            return f"{d.year:04d}{d.month:02d}{d.day:02d}"
        try:
            dd = pd.to_datetime(d, errors="coerce")
            return dd.strftime("%Y%m%d")
        except Exception:
            return ""

    def _esc(s):
        if s is None:
            return ""
        return (
            str(s)
            .replace("\\", "\\\\")
            .replace("\n", "\\n")
            .replace(",", "\\,")
            .replace(";", "\\;")
        )

    lines = [
        "BEGIN:VCALENDAR",
        "VERSION:2.0",
        "PRODID:-//Villa Tobias//Reservations//FR",
        "CALSCALE:GREGORIAN",
    ]

    # On exporte sous forme d'√©v√©nements "journ√©e enti√®re" (DTSTART/DTEND en VALUE=DATE)
    for _, r in data.iterrows():
        dt_a = pd.to_datetime(r["date_arrivee"], errors="coerce")
        dt_d = pd.to_datetime(r["date_depart"],  errors="coerce")
        if pd.isna(dt_a) or pd.isna(dt_d):
            continue

        summary = f"{apt_name} ‚Äî {r.get('nom_client','Sans nom')}"
        if r.get("plateforme"):
            summary += f" ({r.get('plateforme')})"

        desc = "\n".join([
            f"Client: {r.get('nom_client','')}",
            f"T√©l√©phone: {r.get('telephone','')}",
            f"Nuit√©es: {int(pd.to_numeric(r.get('nuitees'), errors='coerce') or 0)}",
            f"Prix brut: {float(pd.to_numeric(r.get('prix_brut'), errors='coerce') or 0):.2f} ‚Ç¨",
            f"res_id: {r.get('res_id','')}",
        ])

        lines += [
            "BEGIN:VEVENT",
            f"UID:{r['ical_uid']}",
            f"DTSTAMP:{nowstamp}",
            f"DTSTART;VALUE=DATE:{_fmt(dt_a)}",
            f"DTEND;VALUE=DATE:{_fmt(dt_d)}",
            f"SUMMARY:{_esc(summary)}",
            f"DESCRIPTION:{_esc(desc)}",
            "TRANSP:OPAQUE",
            "END:VEVENT",
        ]

    lines.append("END:VCALENDAR")
    ics = "\r\n".join(lines) + "\r\n"

    st.download_button(
        "üì• T√©l√©charger .ics",
        data=ics.encode("utf-8"),
        file_name=f"reservations_{year}.ics",
        mime="text/calendar",
        key="dl_ics"
    )

def vue_google_sheet(df: pd.DataFrame, palette: dict):
    """Fiche d'arriv√©e (Google Form) + Google Sheet + aper√ßu CSV publi√©."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üìù Fiche d'arriv√©e / Google Sheet ‚Äî {apt_name}")
    print_buttons()

    # Lien court (configur√© via FORM_SHORT_URL)
    try:
        st.markdown(f"**Lien court √† partager** : {FORM_SHORT_URL}")
    except NameError:
        st.warning("FORM_SHORT_URL n'est pas d√©fini dans vos constantes.")

    # Formulaire Google int√©gr√©
    try:
        st.markdown(
            f'<iframe src="{GOOGLE_FORM_VIEW}" width="100%" height="900" frameborder="0"></iframe>',
            unsafe_allow_html=True
        )
    except NameError:
        st.error("GOOGLE_FORM_VIEW n'est pas d√©fini.")

    st.markdown("---")
    st.subheader("Feuille Google int√©gr√©e")
    try:
        st.markdown(
            f'<iframe src="{GOOGLE_SHEET_EMBED_URL}" width="100%" height="700" frameborder="0"></iframe>',
            unsafe_allow_html=True
        )
    except NameError:
        st.error("GOOGLE_SHEET_EMBED_URL n'est pas d√©fini.")

    st.markdown("---")
    st.subheader("R√©ponses (CSV publi√©)")
    try:
        rep = pd.read_csv(GOOGLE_SHEET_PUBLISHED_CSV)
        show_email = st.checkbox("Afficher les colonnes d'email (si pr√©sentes)", value=False)
        if not show_email:
            mask_cols = [c for c in rep.columns if "mail" in c.lower() or "email" in c.lower()]
            rep = rep.drop(columns=mask_cols, errors="ignore")
        st.dataframe(rep, use_container_width=True)
    except NameError:
        st.error("GOOGLE_SHEET_PUBLISHED_CSV n'est pas d√©fini.")
    except Exception as e:
        st.error(f"Impossible de charger le CSV publi√© : {e}")

def vue_clients(df: pd.DataFrame, palette: dict):
    """Liste simple des clients (nom, pays, t√©l√©phone, email, plateforme, res_id)."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üë• Liste des clients ‚Äî {apt_name}")
    print_buttons()

    if df is None or df.empty:
        st.info("Aucun client.")
        return

    # Colonnes minimales
    cols = ["nom_client", "telephone", "email", "plateforme", "res_id", "pays"]
    for c in cols:
        if c not in df.columns:
            df[c] = ""

    clients = df[cols].copy()
    for c in cols:
        clients[c] = clients[c].astype(str).str.strip().replace({"nan": ""})

    # Compl√®te pays √† partir du t√©l√©phone si manquant
    need = clients["pays"].eq("") | clients["pays"].isna()
    if need.any():
        clients.loc[need, "pays"] = clients.loc[need, "telephone"].apply(_phone_country)

    # Nettoyage & tri
    clients = clients.loc[clients["nom_client"] != ""].drop_duplicates()
    clients = clients.sort_values(by="nom_client", kind="stable")

    st.dataframe(
        clients[["nom_client", "pays", "telephone", "email", "plateforme", "res_id"]],
        use_container_width=True
    )


def vue_id(df: pd.DataFrame, palette: dict):
    """Table d‚Äôidentifiants (res_id) avec infos de contact."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üÜî Identifiants des r√©servations ‚Äî {apt_name}")
    print_buttons()

    if df is None or df.empty:
        st.info("Aucune r√©servation.")
        return

    cols = ["res_id", "nom_client", "telephone", "email", "plateforme", "pays"]
    for c in cols:
        if c not in df.columns:
            df[c] = ""

    tbl = df[cols].copy()
    for c in cols:
        tbl[c] = tbl[c].astype(str).str.strip().replace({"nan": ""})

    need = tbl["pays"].eq("") | tbl["pays"].isna()
    if need.any():
        tbl.loc[need, "pays"] = tbl.loc[need, "telephone"].apply(_phone_country)

    tbl = tbl.dropna(subset=["res_id"])
    tbl = tbl[tbl["res_id"] != ""].drop_duplicates()

    st.dataframe(tbl, use_container_width=True)


def _ensure_columns(df: pd.DataFrame, cols: list[str]) -> pd.DataFrame:
    """Retourne une copie de df avec toutes les colonnes `cols` pr√©sentes (remplies de '')."""
    dfv = df.copy() if df is not None else pd.DataFrame()
    if dfv.empty and cols:
        # cr√©e un DF vide avec les colonnes attendues
        for c in cols:
            dfv[c] = pd.Series(dtype="object")
        return dfv
    for c in cols:
        if c not in dfv.columns:
            dfv[c] = ""
    return dfv

def vue_clients(df: pd.DataFrame, palette: dict):
    """Liste des clients (nom, pays, t√©l√©phone, email, plateforme, res_id)."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üë• Liste des clients ‚Äî {apt_name}")
    print_buttons()

    cols = ["nom_client", "telephone", "email", "plateforme", "res_id", "pays"]
    dfv = _ensure_columns(df, cols)

    if dfv.empty:
        st.info("Aucun client.")
        return

    clients = dfv[cols].copy()
    for c in cols:
        clients[c] = clients[c].astype(str).str.strip().replace({"nan": ""})

    # Compl√©ter le pays via le t√©l√©phone si manquant
    need = clients["pays"].eq("") | clients["pays"].isna()
    if need.any():
        clients.loc[need, "pays"] = clients.loc[need, "telephone"].apply(_phone_country)

    clients = clients.loc[clients["nom_client"] != ""].drop_duplicates()
    clients = clients.sort_values(by="nom_client", kind="stable")

    st.dataframe(
        clients[["nom_client", "pays", "telephone", "email", "plateforme", "res_id"]],
        use_container_width=True
    )

def vue_id(df: pd.DataFrame, palette: dict):
    """Table d‚Äôidentifiants (res_id) avec infos de contact."""
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.header(f"üÜî Identifiants des r√©servations ‚Äî {apt_name}")
    print_buttons()

    cols = ["res_id", "nom_client", "telephone", "email", "plateforme", "pays"]
    dfv = _ensure_columns(df, cols)

    if dfv.empty:
        st.info("Aucune r√©servation.")
        return

    tbl = dfv[cols].copy()
    for c in cols:
        tbl[c] = tbl[c].astype(str).str.strip().replace({"nan": ""})

    need = tbl["pays"].eq("") | tbl["pays"].isna()
    if need.any():
        tbl.loc[need, "pays"] = tbl.loc[need, "telephone"].apply(_phone_country)

    tbl = tbl.dropna(subset=["res_id"])
    tbl = tbl[tbl["res_id"] != ""].drop_duplicates()

    st.dataframe(tbl, use_container_width=True)

# ------------------------------- MAIN ---------------------------------

def main():
    # Reset cache via URL ?clear=1
    params = st.query_params
    if params.get("clear", ["0"])[0] in ("1", "true", "True", "yes"):
        try:
            st.cache_data.clear()
        except Exception:
            pass

    # S√©lecteur d'appartement (met √† jour CSV_RESERVATIONS / CSV_PLATEFORMES)
    changed = _select_apartment_sidebar()
    if changed:
        try:
            st.cache_data.clear()
        except Exception:
            pass

    # Th√®me (d√©fini en PART 1)
    try:
        mode_clair = st.sidebar.toggle("üåì Mode clair (PC)", value=False)
    except Exception:
        mode_clair = st.sidebar.checkbox("üåì Mode clair (PC)", value=False)
    apply_style(light=bool(mode_clair))

    # En-t√™te
    apt = _current_apartment()
    apt_name = apt["name"] if apt else "‚Äî"
    st.title(f"‚ú® {apt_name} ‚Äî Gestion des R√©servations")

    # Chargement des donn√©es sp√©cifiques √† l'appartement
    df, palette_loaded = _load_data_for_active_apartment()
    palette = palette_loaded if palette_loaded else DEFAULT_PALETTE

    # Assure la pr√©sence/chargement des indicatifs (pour _guess_country_from_phone_with_table)
    _load_indicatifs_df()

    # Pages
    pages = {
        "üè† Accueil": vue_accueil,
        "üìã R√©servations": vue_reservations,
        "‚ûï Ajouter": vue_ajouter,
        "‚úèÔ∏è Modifier / Supprimer": vue_modifier,
        "üé® Plateformes": vue_plateformes,
        "üìÖ Calendrier": vue_calendrier,
        "üìä Rapport": vue_rapport,
        "‚úâÔ∏è SMS": vue_sms,
        "üìÜ Export ICS": vue_export_ics,
        "üìù Google Sheet": vue_google_sheet,
        "üë• Clients": vue_clients,
        "üÜî ID": vue_id,
        "üåç Indicatifs pays": vue_pays,          # ‚Üê nouvelle page
        "‚öôÔ∏è Param√®tres": vue_settings,
    }

    choice = st.sidebar.radio("Aller √†", list(pages.keys()), key="nav_radio")
    page_func = pages.get(choice)
    if page_func:
        page_func(df, palette)
    else:
        st.error("Page inconnue.")


if __name__ == "__main__":
    main()